/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/absences": {
    /**
     * Get all absences 
     * @description {
     *   "text": "Search absences. Parameters are applied as 'AND' filters."
     * }
     */
    get: {
      /**
       * Get all absences 
       * @description {
       *   "text": "Search absences. Parameters are applied as 'AND' filters."
       * }
       */
      parameters?: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          member?: string | null;
          members?: (string)[] | null;
          location?: string | null;
          team?: string | null;
          since?: string | null;
          till?: string | null;
          viewMode?: components["schemas"]["AbsenceListMode"];
          reason?: string | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["AbsenceRecord"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Create absence 
     * @description {
     *   "text": "Create an absence for a given profile (member)"
     * }
     */
    post: {
      /**
       * Create absence 
       * @description {
       *   "text": "Create an absence for a given profile (member)"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            member: string;
            reason: string;
            description: string;
            location?: string | null;
            /** Format: full-date */
            since: string;
            /** Format: full-date */
            till: string;
            /** @default false */
            available?: boolean;
            icon: string;
            customFieldValues?: (components["schemas"]["CustomFieldInputValue"])[] | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["AbsenceRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/absences/{id}/approve": {
    /**
     * Approve absence 
     * @description {
     *   "text": "Approve/unapprove an existing absence. Setting approve to true will approve the absence, false will remove the approval."
     * }
     */
    post: {
      /**
       * Approve absence 
       * @description {
       *   "text": "Approve/unapprove an existing absence. Setting approve to true will approve the absence, false will remove the approval."
       * }
       */
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            approve: boolean;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/absences/member:{member}": {
    /**
     * Get all absences by member 
     * @description {
     *   "text": "Get absences for a given profile ID"
     * }
     */
    get: {
      /**
       * Get all absences by member 
       * @description {
       *   "text": "Get absences for a given profile ID"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          member: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["AbsenceRecord"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/absences/{id}": {
    /**
     * Get absence 
     * @description {
     *   "text": "Get an absence"
     * }
     */
    get: {
      /**
       * Get absence 
       * @description {
       *   "text": "Get an absence"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["AbsenceRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Delete absence 
     * @description {
     *   "text": "Archive/restore an existing absence. Setting delete to true will archive the absence, false will restore it."
     * }
     */
    delete: {
      /**
       * Delete absence 
       * @description {
       *   "text": "Archive/restore an existing absence. Setting delete to true will archive the absence, false will restore it."
       * }
       */
      parameters: {
        query?: {
          delete?: boolean;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Update absence 
     * @description {
     *   "text": "Update an existing absence. Optional parameters will be ignored when not specified and updated otherwise."
     * }
     */
    patch: {
      /**
       * Update absence 
       * @description {
       *   "text": "Update an existing absence. Optional parameters will be ignored when not specified and updated otherwise."
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            member?: string | null;
            reason?: string | null;
            description?: string | null;
            location?: string | null;
            /** Format: full-date */
            since?: string | null;
            /** Format: full-date */
            till?: string | null;
            available: boolean;
            icon?: string | null;
            customFieldValues?: (components["schemas"]["CustomFieldInputValue"])[] | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["AbsenceRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/absences/{id}/delete-approval": {
    /**
     * Delete absence approval 
     * @description {
     *   "text": "Delete approval for a given absence"
     * }
     */
    delete: {
      /**
       * Delete absence approval 
       * @description {
       *   "text": "Delete approval for a given absence"
       * }
       */
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/absences/absence-reasons": {
    /**
     * Get all absence reasons 
     * @description {
     *   "text": "Get available absence reasons"
     * }
     */
    get: {
      /**
       * Get all absence reasons 
       * @description {
       *   "text": "Get available absence reasons"
       * }
       */
      parameters?: {
        query?: {
          withArchived?: boolean;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["AbsenceReasonRecord"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Create absence reason 
     * @description {
     *   "text": "Create a new absence reason"
     * }
     */
    post: {
      /**
       * Create absence reason 
       * @description {
       *   "text": "Create a new absence reason"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name: string;
            description: string;
            defaultAvailability: boolean;
            approvalRequired: boolean;
            icon?: string | null;
            category?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["AbsenceReasonRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/absences/absence-reasons/{id}": {
    /**
     * Get absence reason 
     * @description {
     *   "text": "Get an absence reason"
     * }
     */
    get: {
      /**
       * Get absence reason 
       * @description {
       *   "text": "Get an absence reason"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["AbsenceReasonRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Delete absence reason 
     * @description {
     *   "text": "Archive/restore an existing absence reason. Setting delete to true will archive the absence reason, false will restore it."
     * }
     */
    delete: {
      /**
       * Delete absence reason 
       * @description {
       *   "text": "Archive/restore an existing absence reason. Setting delete to true will archive the absence reason, false will restore it."
       * }
       */
      parameters: {
        query?: {
          delete?: boolean;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Update absence reason 
     * @description {
     *   "text": "Update an existing absence reason"
     * }
     */
    patch: {
      /**
       * Update absence reason 
       * @description {
       *   "text": "Update an existing absence reason"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name: string;
            description: string;
            defaultAvailability: boolean;
            approvalRequired: boolean;
            icon?: string | null;
            category?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["AbsenceReasonRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/administration/support": {
    /**
     * Create support 
     * @description {
     *   "text": "Create a profile for support"
     * }
     */
    post: {
      /**
       * Create support 
       * @description {
       *   "text": "Create a profile for support"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["SupportProfileDTO"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/administration/user-agreement": {
    /** Get user agreement */
    get: {
      /** Get user agreement */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["UA_UserAgreement"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /** Upload new user agreement */
    patch: {
      /** Upload new user agreement */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            newContent: string;
            invalidate: boolean;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["UA_UserAgreement"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/administration/user-agreement/enabled": {
    /** Is user agreement enabled? */
    get: {
      /** Is user agreement enabled? */
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": boolean;
          };
        };
        default: components["responses"]["default"];
      };
    };
    /** Enable / disable user agreement */
    post: {
      /** Enable / disable user agreement */
      requestBody: {
        content: {
          "application/json": {
            enabled: boolean;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/administration/user-agreement/status": {
    /** Get all user agreement statuses */
    get: {
      /** Get all user agreement statuses */
      parameters?: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          query?: string;
          accepted?: boolean | null;
          activeProfilesOnly?: boolean;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["UA_UserAgreementStatus"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/administration/user-agreement/status/{profile}": {
    /** Get user agreement status for a profile */
    get: {
      /** Get user agreement status for a profile */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          profile: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["UA_UserAgreementStatus"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/applications": {
    /**
     * Create application 
     * @description {
     *   "text": "Creates a new application. Marketplace application cannot be installed using this endpoint.\n\nTo create a multi-org application (and connect application server to the current Space instance), pass `connectToSpace = true`. Learn more about multi-org applications in the [documentation](https://www.jetbrains.com/help/space/distribute-your-application.html)."
     * }
     */
    post: {
      /**
       * Create application 
       * @description {
       *   "text": "Creates a new application. Marketplace application cannot be installed using this endpoint.\n\nTo create a multi-org application (and connect application server to the current Space instance), pass `connectToSpace = true`. Learn more about multi-org applications in the [documentation](https://www.jetbrains.com/help/space/distribute-your-application.html)."
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name: string;
            description?: string | null;
            pictureAttachmentId?: string | null;
            defaultExternalPicture?: string | null;
            email?: string | null;
            clientId?: string | null;
            clientSecret?: string | null;
            /** @default true */
            clientCredentialsFlowEnabled?: boolean | null;
            /** @default false */
            codeFlowEnabled?: boolean | null;
            codeFlowRedirectURIs?: string | null;
            pkceRequired?: boolean | null;
            publicClientsAllowed?: boolean | null;
            /** @default false */
            implicitFlowEnabled?: boolean | null;
            implicitFlowRedirectURIs?: string | null;
            endpointUri?: string | null;
            endpointSslVerification?: boolean | null;
            appLevelAuth?: components["schemas"]["EndpointAuthCreate"];
            sslKeystoreAuth?: string | null;
            hasSigningKey?: boolean | null;
            hasPublicKeySignature?: boolean | null;
            basicAuthUsername?: string | null;
            basicAuthPassword?: string | null;
            bearerAuthToken?: string | null;
            /** @default false */
            connectToSpace?: boolean | null;
            state?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["ES_App"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/error-message": {
    /**
     * Set error message 
     * @description {
     *   "text": "Provide error message to display on application page in Space UI. Provide `null` message to remove it."
     * }
     */
    post: {
      /**
       * Set error message 
       * @description {
       *   "text": "Provide error message to display on application page in Space UI. Provide `null` message to remove it."
       * }
       */
      requestBody?: {
        content: {
          "application/json": {
            message?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/report-application-as-healthy": {
    /**
     * Report application as healthy 
     * @description {
     *   "text": "Application may periodically call this api method to notify Space that it is functioning properly. This is mandatory for applications that connect external issue trackers."
     * }
     */
    post: {
      /**
       * Report application as healthy 
       * @description {
       *   "text": "Application may periodically call this api method to notify Space that it is functioning properly. This is mandatory for applications that connect external issue trackers."
       * }
       */
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/{application}/force-remove": {
    /**
     * Force-remove application 
     * @description {
     *   "text": "Removes the application that has previously failed to respond with code 200 to `ApplicationUninstalledPayload` request, without sending additional `ApplicationUninstalledPayload` requests. The application is archived and its access terminated."
     * }
     */
    post: {
      /**
       * Force-remove application 
       * @description {
       *   "text": "Removes the application that has previously failed to respond with code 200 to `ApplicationUninstalledPayload` request, without sending additional `ApplicationUninstalledPayload` requests. The application is archived and its access terminated."
       * }
       */
      parameters: {
        path: {
          application: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/{application}/restore": {
    /** Restore application */
    post: {
      /** Restore application */
      parameters: {
        path: {
          application: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/paged": {
    /** Get all applications */
    get: {
      /** Get all applications */
      parameters?: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          name?: string | null;
          owner?: (string)[] | null;
          withArchived?: boolean | null;
          withManaged?: boolean | null;
          ordering?: components["schemas"]["AppsOrdering"];
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["ES_App"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/{application}": {
    /** Get application */
    get: {
      /** Get application */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          application: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["ES_App"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Delete application 
     * @description {
     *   "text": "Removes specified application. If the application is connected (installed from Marketplace or through an install link), Space sends `ApplicationUninstalledPayload` to the application's server. The application is only actually deleted when the application server responds or when the `ApplicationUninstalledPayload` request times out multiple times.\n\nThis API method does not wait until the `ApplicationUninstalledPayload` request is finished and instead returns immediately. Consequently, the application may still be active right after this API method call.\n\nIf sending `ApplicationUninstalledPayload` has failed at least one time, a user may choose to force-remove the application. In this case the access for the application is terminated and it can no longer make requests. "
     * }
     */
    delete: {
      /**
       * Delete application 
       * @description {
       *   "text": "Removes specified application. If the application is connected (installed from Marketplace or through an install link), Space sends `ApplicationUninstalledPayload` to the application's server. The application is only actually deleted when the application server responds or when the `ApplicationUninstalledPayload` request times out multiple times.\n\nThis API method does not wait until the `ApplicationUninstalledPayload` request is finished and instead returns immediately. Consequently, the application may still be active right after this API method call.\n\nIf sending `ApplicationUninstalledPayload` has failed at least one time, a user may choose to force-remove the application. In this case the access for the application is terminated and it can no longer make requests. "
       * }
       */
      parameters: {
        path: {
          application: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Update application 
     * @description {
     *   "text": "Update existing application. Multi-org applications (created with the parameter `connectToSpace = true` or installed from JetBrains Marketplace) can only be updated by the application itself. Learn more about multi-org applications in the [documentation](https://www.jetbrains.com/help/space/distribute-your-application.html)."
     * }
     */
    patch: {
      /**
       * Update application 
       * @description {
       *   "text": "Update existing application. Multi-org applications (created with the parameter `connectToSpace = true` or installed from JetBrains Marketplace) can only be updated by the application itself. Learn more about multi-org applications in the [documentation](https://www.jetbrains.com/help/space/distribute-your-application.html)."
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          application: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            name?: string;
            description?: string;
            pictureAttachmentId?: string | null;
            defaultExternalPicture?: string | null;
            clientSecret?: string;
            clientCredentialsFlowEnabled?: boolean;
            codeFlowEnabled?: boolean;
            codeFlowRedirectURIs?: string | null;
            pkceRequired?: boolean;
            publicClientsAllowed?: boolean;
            implicitFlowEnabled?: boolean;
            implicitFlowRedirectURIs?: string | null;
            endpointUri?: string | null;
            endpointSslVerification?: boolean;
            hasVerificationToken?: boolean;
            hasPublicKeySignature?: boolean;
            hasSigningKey?: boolean;
            appLevelAuth?: components["schemas"]["EndpointAppLevelAuthUpdateType"];
            sslKeystoreAuth?: string | null;
            basicAuthUsername?: string;
            basicAuthPassword?: string;
            bearerAuthToken?: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["ES_App"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/{application}/bearer-token": {
    /** Bearer Token */
    get: {
      /** Bearer Token */
      parameters: {
        path: {
          application: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": string | null;
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/{application}/last-client-credentials-access": {
    /** Get last client credentials access info */
    get: {
      /** Get last client credentials access info */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          application: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["AccessRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/{application}/public-keys": {
    /**
     * Public Keys 
     * @description {
     *   "text": "Returns list of public keys in JWKS format. If message signature is successfully verified with any of the returned public keys, the message can be considered authentic."
     * }
     */
    get: {
      /**
       * Public Keys 
       * @description {
       *   "text": "Returns list of public keys in JWKS format. If message signature is successfully verified with any of the returned public keys, the message can be considered authentic."
       * }
       */
      parameters: {
        path: {
          application: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": string;
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/ui-extensions": {
    /**
     * Set UI extensions 
     * @description {
     *   "text": "Set UI extensions supported by the calling application in specified context. Only the application itself can set its extensions."
     * }
     */
    patch: {
      /**
       * Set UI extensions 
       * @description {
       *   "text": "Set UI extensions supported by the calling application in specified context. Only the application itself can set its extensions."
       * }
       */
      requestBody: {
        content: {
          "application/json": {
            contextIdentifier: components["schemas"]["PermissionContextIdentifier"];
            extensions: (components["schemas"]["AppUiExtensionIn"])[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/authorizations/authorized-applications": {
    /**
     * Get applications authorized in context 
     * @description {
     *   "text": "List applications authorized in specified context"
     * }
     */
    get: {
      /**
       * Get applications authorized in context 
       * @description {
       *   "text": "List applications authorized in specified context"
       * }
       */
      parameters: {
        query: {
          contextIdentifier: string;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["ES_App"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/parameters": {
    /**
     * Get all parameters 
     * @description {
     *   "text": "Return all application parameters. Only accessible with an app token, not a user token."
     * }
     */
    get: {
      /**
       * Get all parameters 
       * @description {
       *   "text": "Return all application parameters. Only accessible with an app token, not a user token."
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["AppParameter"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/parameters/{key}": {
    /**
     * Get parameter 
     * @description {
     *   "text": "Get application parameter by key. Only accessible with an app token, not a user token."
     * }
     */
    get: {
      /**
       * Get parameter 
       * @description {
       *   "text": "Get application parameter by key. Only accessible with an app token, not a user token."
       * }
       */
      parameters: {
        path: {
          key: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": string;
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Remove parameter 
     * @description {
     *   "text": "Remove application parameter by key. Only accessible with an app token, not a user token."
     * }
     */
    delete: {
      /**
       * Remove parameter 
       * @description {
       *   "text": "Remove application parameter by key. Only accessible with an app token, not a user token."
       * }
       */
      parameters: {
        path: {
          key: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Set parameter 
     * @description {
     *   "text": "Set application parameter by key. Only accessible with an app token, not a user token. There is a limit of 100 app parameters per app. The key cannot be longer than 64 characters. The value cannot be longer than 1000 characters."
     * }
     */
    patch: {
      /**
       * Set parameter 
       * @description {
       *   "text": "Set application parameter by key. Only accessible with an app token, not a user token. There is a limit of 100 app parameters per app. The key cannot be longer than 64 characters. The value cannot be longer than 1000 characters."
       * }
       */
      parameters: {
        path: {
          key: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            value: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/parameters/profile": {
    /**
     * Get all profile parameters 
     * @description {
     *   "text": "Return all profile parameters, profile and application are derived from the access token. Only accessible with a user token, issued to an application."
     * }
     */
    get: {
      /**
       * Get all profile parameters 
       * @description {
       *   "text": "Return all profile parameters, profile and application are derived from the access token. Only accessible with a user token, issued to an application."
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["AppParameter"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/parameters/profile/{key}": {
    /**
     * Get profile parameter 
     * @description {
     *   "text": "Get profile parameter by key, profile and application are derived from the access token. Only accessible with a user token, issued to an application."
     * }
     */
    get: {
      /**
       * Get profile parameter 
       * @description {
       *   "text": "Get profile parameter by key, profile and application are derived from the access token. Only accessible with a user token, issued to an application."
       * }
       */
      parameters: {
        path: {
          key: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": string;
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Remove profile parameter 
     * @description {
     *   "text": "Remove profile parameter by key, profile and application are derived from the access token. Only accessible with a user token, issued to an application."
     * }
     */
    delete: {
      /**
       * Remove profile parameter 
       * @description {
       *   "text": "Remove profile parameter by key, profile and application are derived from the access token. Only accessible with a user token, issued to an application."
       * }
       */
      parameters: {
        path: {
          key: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Set profile parameter 
     * @description {
     *   "text": "Set profile parameter by key, profile and application are derived from the access token. Only accessible with a user token, issued to an application. There is a limit of 100 app parameters per app per profile. The key cannot be longer than 64 characters. The value cannot be longer than 1000 characters."
     * }
     */
    patch: {
      /**
       * Set profile parameter 
       * @description {
       *   "text": "Set profile parameter by key, profile and application are derived from the access token. Only accessible with a user token, issued to an application. There is a limit of 100 app parameters per app per profile. The key cannot be longer than 64 characters. The value cannot be longer than 1000 characters."
       * }
       */
      parameters: {
        path: {
          key: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            value: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/unfurls/domains": {
    /**
     * Update unfurled domains 
     * @description {
     *   "text": "Update list of domains for unfurling by the application. Method is to be called by the application providing unfurls."
     * }
     */
    patch: {
      /**
       * Update unfurled domains 
       * @description {
       *   "text": "Update list of domains for unfurling by the application. Method is to be called by the application providing unfurls."
       * }
       */
      requestBody: {
        content: {
          "application/json": {
            domains: (string)[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/unfurls/patterns": {
    /**
     * Update unfurled patterns 
     * @description {
     *   "text": "Update list of external ID prefixes for unfurling by the application. Method is to be called by the application providing unfurls."
     * }
     */
    patch: {
      /**
       * Update unfurled patterns 
       * @description {
       *   "text": "Update list of external ID prefixes for unfurling by the application. Method is to be called by the application providing unfurls."
       * }
       */
      requestBody: {
        content: {
          "application/json": {
            patterns: (components["schemas"]["ApplicationUnfurlPatternRequest"])[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/unfurls/queue/content": {
    /**
     * Post unfurls content 
     * @description {
     *   "text": "Provide Space with unfurls content. Method is to be called by the application providing unfurls."
     * }
     */
    post: {
      /**
       * Post unfurls content 
       * @description {
       *   "text": "Provide Space with unfurls content. Method is to be called by the application providing unfurls."
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            unfurls: (components["schemas"]["ApplicationUnfurl"])[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["PostUnfurlContentResult"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/unfurls/queue/request-external-auth": {
    /**
     * Request external system authentication 
     * @description {
     *   "text": "Request user to authenticate in external system to provide unfurls from it. Method is to be called by the application providing unfurls."
     * }
     */
    post: {
      /**
       * Request external system authentication 
       * @description {
       *   "text": "Request user to authenticate in external system to provide unfurls from it. Method is to be called by the application providing unfurls."
       * }
       */
      requestBody: {
        content: {
          "application/json": {
            queueItemId: string;
            message: components["schemas"]["ApplicationUnfurlContent.Message"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/unfurls/queue/reset-external-auth-requests": {
    /**
     * Clear external system authentication requests 
     * @description {
     *   "text": "Clear all external system authentication requests for the specified user. Method is to be called by the application providing unfurls."
     * }
     */
    post: {
      /**
       * Clear external system authentication requests 
       * @description {
       *   "text": "Clear all external system authentication requests for the specified user. Method is to be called by the application providing unfurls."
       * }
       */
      requestBody: {
        content: {
          "application/json": {
            userId: components["schemas"]["ProfileIdentifier"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/unfurls/queue": {
    /**
     * Get unfurl queue items 
     * @description {
     *   "text": "Get links for unfurling by the application. Method is to be called by the application providing unfurls."
     * }
     */
    get: {
      /**
       * Get unfurl queue items 
       * @description {
       *   "text": "Get links for unfurling by the application. Method is to be called by the application providing unfurls."
       * }
       */
      parameters: {
        query: {
          fromEtag?: number | null;
          batchSize: number;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["ApplicationUnfurlQueueItem"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/{application}/authorizations/authorized-contexts": {
    /**
     * Get all authorized contexts 
     * @description {
     *   "text": "List authorized contexts of an application"
     * }
     */
    get: {
      /**
       * Get all authorized contexts 
       * @description {
       *   "text": "List authorized contexts of an application"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          application: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["PermissionContextApi"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/{application}/authorizations/authorized-rights": {
    /**
     * Get all authorized rights 
     * @description {
     *   "text": "List authorized rights of an application in specified context"
     * }
     */
    get: {
      /**
       * Get all authorized rights 
       * @description {
       *   "text": "List authorized rights of an application in specified context"
       * }
       */
      parameters: {
        query: {
          contextIdentifier: string;
          $fields?: string;
        };
        path: {
          application: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["RightDTO"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Delete authorized right 
     * @description {
     *   "text": "Remove application authorization in specified context"
     * }
     */
    delete: {
      /**
       * Delete authorized right 
       * @description {
       *   "text": "Remove application authorization in specified context"
       * }
       */
      parameters: {
        query: {
          contextIdentifier: string;
        };
        path: {
          application: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Update authorized right 
     * @description {
     *   "text": "Generic method for editing authorized right status in given context."
     * }
     */
    patch: {
      /**
       * Update authorized right 
       * @description {
       *   "text": "Generic method for editing authorized right status in given context."
       * }
       */
      parameters: {
        path: {
          application: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            contextIdentifier: components["schemas"]["PermissionContextIdentifier"];
            updates: (components["schemas"]["RightUpdateDTO"])[];
            actor?: components["schemas"]["PrincipalIn"];
            comment?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/{application}/authorizations/authorized-rights/request-rights": {
    /**
     * Request Rights 
     * @description {
     *   "text": "Request rights for an application in specified context"
     * }
     */
    patch: {
      /**
       * Request Rights 
       * @description {
       *   "text": "Request rights for an application in specified context"
       * }
       */
      parameters: {
        path: {
          application: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            contextIdentifier: components["schemas"]["PermissionContextIdentifier"];
            rightCodes: (components["schemas"]["PermissionIdentifier"])[];
            actor?: components["schemas"]["PrincipalIn"];
            comment?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/{application}/authorizations/required-rights": {
    /**
     * Get all required rights 
     * @description {
     *   "text": "List required rights for an application"
     * }
     */
    get: {
      /**
       * Get all required rights 
       * @description {
       *   "text": "List required rights for an application"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          application: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["RightDTO"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Update required right 
     * @description {
     *   "text": "Update list of required rights for an application"
     * }
     */
    patch: {
      /**
       * Update required right 
       * @description {
       *   "text": "Update list of required rights for an application"
       * }
       */
      parameters: {
        path: {
          application: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            rightCodesToAdd: (components["schemas"]["PermissionIdentifier"])[];
            rightCodesToRemove: (components["schemas"]["PermissionIdentifier"])[];
            requestRightsInAuthorizedContexts: boolean;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/{application}/client-secret/regenerate": {
    /** Regenerate app secret */
    post: {
      /** Regenerate app secret */
      parameters: {
        path: {
          application: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/{application}/client-secret": {
    /** Get client secret */
    get: {
      /** Get client secret */
      parameters: {
        path: {
          application: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": string;
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/{application}/gpg-keys": {
    /** Get GPG keys */
    get: {
      /** Get GPG keys */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          application: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["GpgKeyData"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /** Add GPG key */
    post: {
      /** Add GPG key */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          application: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            publicKey: string;
            /** @default */
            comment?: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GpgKeyData"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/{application}/gpg-keys/{fingerprint}": {
    /** Delete GPG key */
    delete: {
      /** Delete GPG key */
      parameters: {
        path: {
          application: string;
          fingerprint: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /** Revoke GPG key */
    patch: {
      /** Revoke GPG key */
      parameters: {
        path: {
          application: string;
          fingerprint: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            /** @default */
            comment?: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/{application}/permanent-tokens": {
    /**
     * Get all permanent tokens 
     * @description {
     *   "text": "Get permanent tokens used to access the current organization by the given application"
     * }
     */
    get: {
      /**
       * Get all permanent tokens 
       * @description {
       *   "text": "Get permanent tokens used to access the current organization by the given application"
       * }
       */
      parameters: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
        path: {
          application: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["ES_ApplicationPermanentToken"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Create permanent token 
     * @description {
     *   "text": "Create a permanent token for the given application that can be used to access the current organization"
     * }
     */
    post: {
      /**
       * Create permanent token 
       * @description {
       *   "text": "Create a permanent token for the given application that can be used to access the current organization"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          application: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name: string;
            scope: string;
            /** Format: date-time */
            expires?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              first: components["schemas"]["ES_ApplicationPermanentToken"];
              second: string;
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/{application}/permanent-tokens/{tokenId}": {
    /**
     * Delete permanent token 
     * @description {
     *   "text": "Delete a personal token used to access the current organization"
     * }
     */
    delete: {
      /**
       * Delete permanent token 
       * @description {
       *   "text": "Delete a personal token used to access the current organization"
       * }
       */
      parameters: {
        path: {
          application: string;
          tokenId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Update permanent token 
     * @description {
     *   "text": "Update an existing personal token used to access the current organization. The permanent token's name and/or scope can be updated."
     * }
     */
    patch: {
      /**
       * Update permanent token 
       * @description {
       *   "text": "Update an existing personal token used to access the current organization. The permanent token's name and/or scope can be updated."
       * }
       */
      parameters: {
        path: {
          application: string;
          tokenId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            name?: string | null;
            scope?: string | null;
            /** Format: date-time */
            expires?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/{application}/permanent-tokens/current": {
    /**
     * Delete current permanent token 
     * @description {
     *   "text": "Delete personal token of the given application"
     * }
     */
    delete: {
      /**
       * Delete current permanent token 
       * @description {
       *   "text": "Delete personal token of the given application"
       * }
       */
      parameters: {
        path: {
          application: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/{application}/signing-key/regenerate": {
    /** Regenerate signing key */
    post: {
      /** Regenerate signing key */
      parameters: {
        path: {
          application: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/{application}/signing-key": {
    /** Get signing key */
    get: {
      /** Get signing key */
      parameters: {
        path: {
          application: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": string | null;
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/{application}/ssh-keys": {
    /** Get SSH keys */
    get: {
      /** Get SSH keys */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          application: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["SshKeyData"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /** Add SSH key */
    post: {
      /** Add SSH key */
      parameters: {
        path: {
          application: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            publicKey: string;
            comment: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/{application}/ssh-keys/{fingerprint}": {
    /** Delete SSH key */
    delete: {
      /** Delete SSH key */
      parameters: {
        path: {
          application: string;
          fingerprint: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/{application}/ui-extensions": {
    /**
     * Get UI extensions 
     * @description {
     *   "text": "Get UI extensions supported by the application in specified context. Omit contextIdentifier to get UI extensions in all contexts"
     * }
     */
    get: {
      /**
       * Get UI extensions 
       * @description {
       *   "text": "Get UI extensions supported by the application in specified context. Omit contextIdentifier to get UI extensions in all contexts"
       * }
       */
      parameters: {
        query: {
          contextIdentifier: string;
          $fields?: string;
        };
        path: {
          application: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["AppUiExtensionApi"])[] | null;
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/{application}/ui-extensions/disable-for-everybody": {
    /**
     * Disable application UI 
     * @description {
     *   "text": "Disable application UI for everybody in specified context. Requires Superadmin right for global context, AdminProject for project context, AdminChannel for channel context. Users will still be able to enable application UI individually."
     * }
     */
    patch: {
      /**
       * Disable application UI 
       * @description {
       *   "text": "Disable application UI for everybody in specified context. Requires Superadmin right for global context, AdminProject for project context, AdminChannel for channel context. Users will still be able to enable application UI individually."
       * }
       */
      parameters: {
        path: {
          application: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            contextIdentifier: components["schemas"]["PermissionContextIdentifier"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/{application}/ui-extensions/disable-for-me": {
    /**
     * Disable application UI for me 
     * @description {
     *   "text": "Disable application UI in specified context for the current user"
     * }
     */
    patch: {
      /**
       * Disable application UI for me 
       * @description {
       *   "text": "Disable application UI in specified context for the current user"
       * }
       */
      parameters: {
        path: {
          application: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            contextIdentifier: components["schemas"]["PermissionContextIdentifier"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/{application}/ui-extensions/enable-for-everybody": {
    /**
     * Enable application UI 
     * @description {
     *   "text": "Enable application UI for everybody in specified context. Requires Superadmin right for global context, AdminProject for project context, AdminChannel for channel context. Users will still be able to disable application UI individually."
     * }
     */
    patch: {
      /**
       * Enable application UI 
       * @description {
       *   "text": "Enable application UI for everybody in specified context. Requires Superadmin right for global context, AdminProject for project context, AdminChannel for channel context. Users will still be able to disable application UI individually."
       * }
       */
      parameters: {
        path: {
          application: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            contextIdentifier: components["schemas"]["PermissionContextIdentifier"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/{application}/ui-extensions/enable-for-me": {
    /**
     * Enable application UI for me 
     * @description {
     *   "text": "Enable application UI in specified context for the current user"
     * }
     */
    patch: {
      /**
       * Enable application UI for me 
       * @description {
       *   "text": "Enable application UI in specified context for the current user"
       * }
       */
      parameters: {
        path: {
          application: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            contextIdentifier: components["schemas"]["PermissionContextIdentifier"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/{application}/unfurl-domains/authorize": {
    /**
     * Authorize unfurled domains 
     * @description {
     *   "text": "Authorize domains for unfurling by the application"
     * }
     */
    post: {
      /**
       * Authorize unfurled domains 
       * @description {
       *   "text": "Authorize domains for unfurling by the application"
       * }
       */
      parameters: {
        path: {
          application: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            domains: (string)[];
            approve: boolean;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/{application}/unfurl-domains": {
    /**
     * Get all unfurl domains 
     * @description {
     *   "text": "List domains for unfurling by the application"
     * }
     */
    get: {
      /**
       * Get all unfurl domains 
       * @description {
       *   "text": "List domains for unfurling by the application"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          application: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["ApplicationUnfurlDomain"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/{application}/unfurl-patterns/authorize": {
    /**
     * Authorize unfurled patterns 
     * @description {
     *   "text": "Authorize patterns for unfurling by the application"
     * }
     */
    post: {
      /**
       * Authorize unfurled patterns 
       * @description {
       *   "text": "Authorize patterns for unfurling by the application"
       * }
       */
      parameters: {
        path: {
          application: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            patterns: (string)[];
            approve: boolean;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/{application}/unfurl-patterns": {
    /**
     * Get all unfurl patterns 
     * @description {
     *   "text": "List patterns for unfurling by the application"
     * }
     */
    get: {
      /**
       * Get all unfurl patterns 
       * @description {
       *   "text": "List patterns for unfurling by the application"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          application: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["ApplicationUnfurlPattern"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/{application}/verification-token/regenerate": {
    /** Regenerate verification token */
    post: {
      /** Regenerate verification token */
      parameters: {
        path: {
          application: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/{application}/verification-token": {
    /** Get verification token */
    get: {
      /** Get verification token */
      parameters: {
        path: {
          application: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": string | null;
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/{application}/webhooks": {
    /**
     * Get all webhooks 
     * @description {
     *   "text": "Get application webhooks"
     * }
     */
    get: {
      /**
       * Get all webhooks 
       * @description {
       *   "text": "Get application webhooks"
       * }
       */
      parameters: {
        query?: {
          withArchived?: boolean;
          query?: string;
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
        path: {
          application: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["FullWebhookDTO"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Create webhook 
     * @description {
     *   "text": "Create application webhook"
     * }
     */
    post: {
      /**
       * Create webhook 
       * @description {
       *   "text": "Create application webhook"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          application: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name: string;
            description?: string | null;
            endpoint?: components["schemas"]["EndpointCreateDTO"];
            endpointAuth?: components["schemas"]["EndpointAuthCreateDTO"];
            /** @default true */
            enabled?: boolean;
            /** @default [] */
            acceptedHttpResponseCodes?: (number)[];
            /** @default true */
            doRetries?: boolean;
            payloadFields?: string | null;
            payloadTemplate?: string | null;
            subscriptions?: (components["schemas"]["SubscriptionDefinition"])[] | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["WebhookRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/{application}/webhooks/{webhookId}": {
    /**
     * Post webhook 
     * @description {
     *   "text": "Restore archived application webhook"
     * }
     */
    post: {
      /**
       * Post webhook 
       * @description {
       *   "text": "Restore archived application webhook"
       * }
       */
      parameters: {
        path: {
          application: string;
          webhookId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Delete webhook 
     * @description {
     *   "text": "Archive application webhook"
     * }
     */
    delete: {
      /**
       * Delete webhook 
       * @description {
       *   "text": "Archive application webhook"
       * }
       */
      parameters: {
        path: {
          application: string;
          webhookId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Update webhook 
     * @description {
     *   "text": "Update application webhook"
     * }
     */
    patch: {
      /**
       * Update webhook 
       * @description {
       *   "text": "Update application webhook"
       * }
       */
      parameters: {
        path: {
          application: string;
          webhookId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            name?: string;
            description?: string | null;
            enabled?: boolean;
            endpoint?: components["schemas"]["ExternalEndpointUpdateDTO"];
            endpointAuth?: components["schemas"]["EndpointAuthUpdateDTO"];
            acceptedHttpResponseCodes?: (number)[];
            doRetries?: boolean;
            payloadFields?: string | null;
            payloadTemplate?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/{application}/webhooks/{webhookId}/bearer-token": {
    /** Bearer Token */
    get: {
      /** Bearer Token */
      parameters: {
        path: {
          application: string;
          webhookId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": string | null;
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/{application}/webhooks/{webhookId}/custom-headers": {
    /** Get custom header */
    get: {
      /** Get custom header */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          application: string;
          webhookId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["CustomHttpHeaderDTO"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /** Post custom header */
    post: {
      /** Post custom header */
      parameters: {
        path: {
          application: string;
          webhookId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            headers: (components["schemas"]["CustomHttpHeaderDTO"])[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/{application}/webhooks/{webhookId}/signing-key/regenerate": {
    /** Regenerate */
    post: {
      /** Regenerate */
      parameters: {
        path: {
          application: string;
          webhookId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/{application}/webhooks/{webhookId}/signing-key": {
    /** Get signing key */
    get: {
      /** Get signing key */
      parameters: {
        path: {
          application: string;
          webhookId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": string | null;
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/{application}/webhooks/{webhookId}/subscriptions": {
    /**
     * Get all subscriptions 
     * @description {
     *   "text": "Get webhook subscriptions"
     * }
     */
    get: {
      /**
       * Get all subscriptions 
       * @description {
       *   "text": "Get webhook subscriptions"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          application: string;
          webhookId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["SubscriptionDTO"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Create subscription 
     * @description {
     *   "text": "Add webhook subscription"
     * }
     */
    post: {
      /**
       * Create subscription 
       * @description {
       *   "text": "Add webhook subscription"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          application: string;
          webhookId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name: string;
            subscription: components["schemas"]["CustomGenericSubscriptionIn"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["SubscriptionDTO"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/{application}/webhooks/{webhookId}/subscriptions/{subscriptionId}/request-missing-rights": {
    /**
     * Request Missing Rights 
     * @description {
     *   "text": "Ensures that all permissions required for this subscription are requested in the corresponding permission role"
     * }
     */
    post: {
      /**
       * Request Missing Rights 
       * @description {
       *   "text": "Ensures that all permissions required for this subscription are requested in the corresponding permission role"
       * }
       */
      parameters: {
        path: {
          application: string;
          webhookId: string;
          subscriptionId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/applications/{application}/webhooks/{webhookId}/subscriptions/{subscriptionId}": {
    /**
     * Delete subscription 
     * @description {
     *   "text": "Delete webhook subscription"
     * }
     */
    delete: {
      /**
       * Delete subscription 
       * @description {
       *   "text": "Delete webhook subscription"
       * }
       */
      parameters: {
        path: {
          application: string;
          webhookId: string;
          subscriptionId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Update subscription 
     * @description {
     *   "text": "Update webhook subscription"
     * }
     */
    patch: {
      /**
       * Update subscription 
       * @description {
       *   "text": "Update webhook subscription"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          application: string;
          webhookId: string;
          subscriptionId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            name?: string;
            enabled?: boolean;
            subscription?: components["schemas"]["CustomGenericSubscriptionIn"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["SubscriptionDTO"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/auth-modules": {
    /**
     * Get all auth modules 
     * @description {
     *   "text": "Get all authentication modules"
     * }
     */
    get: {
      /**
       * Get all auth modules 
       * @description {
       *   "text": "Get all authentication modules"
       * }
       */
      parameters?: {
        query?: {
          withDisabled?: boolean;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["ES_AuthModule"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Create auth module 
     * @description {
     *   "text": "Create a new authentication module. Settings are specific to the type of authentication module being created."
     * }
     */
    post: {
      /**
       * Create auth module 
       * @description {
       *   "text": "Create a new authentication module. Settings are specific to the type of authentication module being created."
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            key: string;
            name: string;
            enabled: boolean;
            iconDataURI?: string | null;
            settings: components["schemas"]["ES_AuthModuleSettings"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["ES_AuthModule"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/auth-modules/reorder": {
    /**
     * Reorder authentication modules 
     * @description {
     *   "text": "Define the order of authentication modules. This affects the order of the federated authentication module buttons on the sign-in page."
     * }
     */
    post: {
      /**
       * Reorder authentication modules 
       * @description {
       *   "text": "Define the order of authentication modules. This affects the order of the federated authentication module buttons on the sign-in page."
       * }
       */
      requestBody: {
        content: {
          "application/json": {
            order: (string)[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/auth-modules/{id}/saml-metadata": {
    /**
     * SAML metadata 
     * @description {
     *   "text": ""
     * }
     */
    post: {
      /**
       * SAML metadata 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            idpUrl: string;
            idpEntityId: string;
            idpCertificateSHA256: string;
            spEntityId: string;
            sslKeystore?: components["schemas"]["SSLKeystore"];
            contactProfileId?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["SamlMetadataResponse"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/auth-modules/discover-oidc": {
    /**
     * Discover OIDC 
     * @description {
     *   "text": "Automatically discovers the endpoints for the OpenID Connect provider via discovery document"
     * }
     */
    get: {
      /**
       * Discover OIDC 
       * @description {
       *   "text": "Automatically discovers the endpoints for the OpenID Connect provider via discovery document"
       * }
       */
      parameters: {
        query: {
          discoveryEndpoint: string;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["OIDCDiscovery"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/auth-modules/key:{key}": {
    /**
     * Get auth module by key 
     * @description {
     *   "text": "Get an existing authentication module"
     * }
     */
    get: {
      /**
       * Get auth module by key 
       * @description {
       *   "text": "Get an existing authentication module"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          key: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["ES_AuthModule"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/auth-modules/{id}": {
    /**
     * Delete auth module 
     * @description {
     *   "text": "Delete an existing authentication module"
     * }
     */
    delete: {
      /**
       * Delete auth module 
       * @description {
       *   "text": "Delete an existing authentication module"
       * }
       */
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Update auth module 
     * @description {
     *   "text": "Update an existing authentication module. Optional parameters will be ignored when not specified and updated otherwise."
     * }
     */
    patch: {
      /**
       * Update auth module 
       * @description {
       *   "text": "Update an existing authentication module. Optional parameters will be ignored when not specified and updated otherwise."
       * }
       */
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            key?: string | null;
            name?: string | null;
            enabled?: boolean | null;
            iconDataURI?: string | null;
            settings?: components["schemas"]["ES_AuthModuleSettings"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/auth-modules/config": {
    /**
     * Get config 
     * @description {
     *   "text": "Get authentication configuration"
     * }
     */
    get: {
      /**
       * Get config 
       * @description {
       *   "text": "Get authentication configuration"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["AuthConfig"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Put config 
     * @description {
     *   "text": "Set authentication configuration"
     * }
     */
    put: {
      /**
       * Put config 
       * @description {
       *   "text": "Set authentication configuration"
       * }
       */
      requestBody?: {
        content: {
          "application/json": {
            /** Format: int32 */
            dontRememberMeTtl?: number | null;
            /** Format: int32 */
            adminRememberMeTtl?: number | null;
            /** Format: int32 */
            userRememberMeTtl?: number | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Delete config 
     * @description {
     *   "text": "Reset authentication configuration to default"
     * }
     */
    delete: {
      /**
       * Delete config 
       * @description {
       *   "text": "Reset authentication configuration to default"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["AuthConfig"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/auth-modules/test/built-in": {
    /**
     * Test built-in settings 
     * @description {
     *   "text": "For a username/password combination, test built-in authentication with updated settings"
     * }
     */
    post: {
      /**
       * Test built-in settings 
       * @description {
       *   "text": "For a username/password combination, test built-in authentication with updated settings"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            settings: components["schemas"]["ES_BuiltinAuthModuleSettings"];
            username: string;
            password: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TD_MemberProfile"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/auth-modules/test/ldap": {
    /**
     * Test LDAP settings 
     * @description {
     *   "text": "For a username/password combination, test LDAP authentication with updated settings"
     * }
     */
    post: {
      /**
       * Test LDAP settings 
       * @description {
       *   "text": "For a username/password combination, test LDAP authentication with updated settings"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            settings: components["schemas"]["ES_LdapAuthModuleSettings"];
            username: string;
            password: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["ES_DefaultProfileLoginDetails"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/auth-modules/throttled-logins": {
    /**
     * Get throttled logins 
     * @description {
     *   "text": "Returns logins that are currently subjected to rate limits when logging in to Space"
     * }
     */
    get: {
      /**
       * Get throttled logins 
       * @description {
       *   "text": "Returns logins that are currently subjected to rate limits when logging in to Space"
       * }
       */
      parameters?: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          login?: string | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["ThrottledLogin"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Reset throttling status 
     * @description {
     *   "text": "Resets the counter that tracks failed login attempts for the account with the specified logins. The member who use these accounts are no longer blocked from attempting to log in to Space."
     * }
     */
    delete: {
      /**
       * Reset throttling status 
       * @description {
       *   "text": "Resets the counter that tracks failed login attempts for the account with the specified logins. The member who use these accounts are no longer blocked from attempting to log in to Space."
       * }
       */
      parameters: {
        query: {
          logins: (string)[];
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/auth-modules/throttled-logins/org-status": {
    /**
     * Get organization throttling status 
     * @description {
     *   "text": "Returns date and time until which the organization are throttled"
     * }
     */
    get: {
      /**
       * Get organization throttling status 
       * @description {
       *   "text": "Returns date and time until which the organization are throttled"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["OrgThrottlingStatus"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Reset organization throttling 
     * @description {
     *   "text": "Resets date and time until which the organization are throttled"
     * }
     */
    delete: {
      /**
       * Reset organization throttling 
       * @description {
       *   "text": "Resets date and time until which the organization are throttled"
       * }
       */
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/auth-modules/usages": {
    /**
     * Get all usages 
     * @description {
     *   "text": "Retrieve a list of authentication module usage count"
     * }
     */
    get: {
      /**
       * Get all usages 
       * @description {
       *   "text": "Retrieve a list of authentication module usage count"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["AuthModuleUsage"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/auth-modules/{id}/logins/{identifier}/change": {
    /**
     * Change password 
     * @description {
     *   "text": "Change password for a given authentication module (id) and profile (identifier)"
     * }
     */
    post: {
      /**
       * Change password 
       * @description {
       *   "text": "Change password for a given authentication module (id) and profile (identifier)"
       * }
       */
      parameters: {
        path: {
          id: string;
          identifier: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            oldPassword: string;
            newPassword: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/auth-modules/{id}/logins/{identifier}/reset": {
    /**
     * Reset password 
     * @description {
     *   "text": "Request a password reset for a given authentication module (id) and profile (identifier)"
     * }
     */
    post: {
      /**
       * Reset password 
       * @description {
       *   "text": "Request a password reset for a given authentication module (id) and profile (identifier)"
       * }
       */
      parameters: {
        path: {
          id: string;
          identifier: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/auth-modules/{id}/logins/{identifier}": {
    /**
     * Delete login 
     * @description {
     *   "text": "Detach a profile login from an authentication module. The id parameter refers to the authentication module, the identifier parameter refers to the login."
     * }
     */
    delete: {
      /**
       * Delete login 
       * @description {
       *   "text": "Detach a profile login from an authentication module. The id parameter refers to the authentication module, the identifier parameter refers to the login."
       * }
       */
      parameters: {
        path: {
          identifier: string;
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/billing-admin/features": {
    /** Get features */
    get: {
      /** Get features */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TierFeatureLimits"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/billing-admin/trial": {
    /** Activate trial. Not available for On-Premises installations. */
    put: {
      /** Activate trial. Not available for On-Premises installations. */
      requestBody: {
        content: {
          "application/json": {
            trialTier: components["schemas"]["Tier"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/billing-admin/overdrafts": {
    /** Get overdrafts */
    get: {
      /** Get overdrafts */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Overdrafts"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /** Set overdrafts */
    put: {
      /** Set overdrafts */
      requestBody: {
        content: {
          "application/json": {
            /** Format: int32 */
            storage: number;
            /** Format: int32 */
            bandwidth: number;
            /** Format: int32 */
            ciCredits: number;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/billing-admin/reports/{billingPeriod}": {
    /**
     * Get billing report 
     * @description {
     *   "text": "Returns a billing report for the given billing period"
     * }
     */
    get: {
      /**
       * Get billing report 
       * @description {
       *   "text": "Returns a billing report for the given billing period"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          billingPeriod: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["BillingReport"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/billing-admin/reports/today": {
    /**
     * Get billing report for today 
     * @description {
     *   "text": "Returns a billing report for today"
     * }
     */
    get: {
      /**
       * Get billing report for today 
       * @description {
       *   "text": "Returns a billing report for today"
       * }
       */
      parameters: {
        query: {
          date: string;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TodayBillingReport"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/blog": {
    /**
     * Get all blog posts 
     * @description {
     *   "text": ""
     * }
     */
    get: {
      /**
       * Get all blog posts 
       * @description {
       *   "text": ""
       * }
       */
      parameters?: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          term?: string | null;
          dateFrom?: string | null;
          dateTo?: string | null;
          authorId?: string | null;
          teamId?: string | null;
          locationId?: string | null;
          forProfile?: string | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["ArticleRecord"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Publish blog post 
     * @description {
     *   "text": ""
     * }
     */
    post: {
      /**
       * Publish blog post 
       * @description {
       *   "text": ""
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            title: string;
            content?: string | null;
            docContent?: components["schemas"]["TextDocumentContent"];
            locations?: (string)[] | null;
            teams?: (string)[] | null;
            event?: components["schemas"]["BlogCalendarEvent"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["ArticleRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/blog/import": {
    /**
     * Import blog posts 
     * @description {
     *   "text": ""
     * }
     */
    post: {
      /**
       * Import blog posts 
       * @description {
       *   "text": ""
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            metadata: components["schemas"]["ImportMetadata"];
            articles: (components["schemas"]["ImportArticle"])[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["ArticleImportResult"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/blog/stats": {
    /**
     * Get stats 
     * @description {
     *   "text": ""
     * }
     */
    get: {
      /**
       * Get stats 
       * @description {
       *   "text": ""
       * }
       */
      parameters?: {
        query?: {
          dateFrom?: string | null;
          dateTo?: string | null;
          authorId?: string | null;
          teamId?: string | null;
          locationId?: string | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["BG_Stats"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/blog/alias:{alias}": {
    /**
     * Get blog post by alias 
     * @description {
     *   "text": ""
     * }
     */
    get: {
      /**
       * Get blog post by alias 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          alias: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["ArticleRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/blog/external-id:{id}": {
    /**
     * Get blog post by external ID 
     * @description {
     *   "text": ""
     * }
     */
    get: {
      /**
       * Get blog post by external ID 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["ArticleRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/blog/{id}": {
    /**
     * Get blog post 
     * @description {
     *   "text": ""
     * }
     */
    get: {
      /**
       * Get blog post 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["ArticleRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Unpublish blog post 
     * @description {
     *   "text": ""
     * }
     */
    delete: {
      /**
       * Unpublish blog post 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Update blog post 
     * @description {
     *   "text": ""
     * }
     */
    patch: {
      /**
       * Update blog post 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            title?: string | null;
            content?: string | null;
            docContent?: components["schemas"]["TextDocumentContent"];
            locations?: (string)[] | null;
            teams?: (string)[] | null;
            event?: components["schemas"]["BlogCalendarEvent"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["ArticleRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/calendars/absence-events": {
    /**
     * Get all absence events 
     * @description {
     *   "text": "Get/search absences. Parameters are applied as 'AND' filters."
     * }
     */
    get: {
      /**
       * Get all absence events 
       * @description {
       *   "text": "Get/search absences. Parameters are applied as 'AND' filters."
       * }
       */
      parameters: {
        query: {
          dateFrom: string;
          dateTo: string;
          team?: string | null;
          location?: string | null;
          role?: string | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["AbsenceEvent"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/calendars/birthday-events": {
    /**
     * Get all birthday events 
     * @description {
     *   "text": "Get/search birthdays. Parameters are applied as 'AND' filters."
     * }
     */
    get: {
      /**
       * Get all birthday events 
       * @description {
       *   "text": "Get/search birthdays. Parameters are applied as 'AND' filters."
       * }
       */
      parameters: {
        query: {
          dateFrom: string;
          dateTo: string;
          team?: string | null;
          location?: string | null;
          role?: string | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["BirthdayEvent"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/calendars/birthday-events/starred": {
    /**
     * Get all starred birthday events 
     * @description {
     *   "text": "Get/search birthdays in a specific time period for starred profiles."
     * }
     */
    get: {
      /**
       * Get all starred birthday events 
       * @description {
       *   "text": "Get/search birthdays in a specific time period for starred profiles."
       * }
       */
      parameters: {
        query: {
          dateFrom: string;
          dateTo: string;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["BirthdayEvent"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/calendars/event-participations/{id}": {
    /**
     * Update event participation 
     * @description {
     *   "text": "Update RSVP / calendar event participation status for a calendar event attached to an article"
     * }
     */
    patch: {
      /**
       * Update event participation 
       * @description {
       *   "text": "Update RSVP / calendar event participation status for a calendar event attached to an article"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            newStatus: components["schemas"]["EventParticipationStatus"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["MeetingRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/calendars/events": {
    /**
     * Get all events 
     * @description {
     *   "text": "Get calendar events attached to an article in a specific time period"
     * }
     */
    get: {
      /**
       * Get all events 
       * @description {
       *   "text": "Get calendar events attached to an article in a specific time period"
       * }
       */
      parameters: {
        query: {
          dateFrom: string;
          dateTo: string;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["MeetingRecord"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/calendars/events/{id}": {
    /**
     * Get event 
     * @description {
     *   "text": "Get a calendar event attached to an article"
     * }
     */
    get: {
      /**
       * Get event 
       * @description {
       *   "text": "Get a calendar event attached to an article"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["MeetingRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/calendars/holidays": {
    /**
     * Get all holidays 
     * @description {
     *   "text": "Get/search holidays. Parameters are applied as 'AND' filters."
     * }
     */
    get: {
      /**
       * Get all holidays 
       * @description {
       *   "text": "Get/search holidays. Parameters are applied as 'AND' filters."
       * }
       */
      parameters: {
        query: {
          startDate: string;
          endDate: string;
          team?: string | null;
          location?: string | null;
          role?: string | null;
          workingDays?: boolean | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["HolidaysEvent"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/calendars/meetings": {
    /**
     * Get all meetings 
     * @description {
     *   "text": "Search meetings by name, location, time period and other parameters. Parameters are applied as 'AND' filters while values in lists of locations, profiles and teams have 'OR' semantics."
     * }
     */
    get: {
      /**
       * Get all meetings 
       * @description {
       *   "text": "Search meetings by name, location, time period and other parameters. Parameters are applied as 'AND' filters while values in lists of locations, profiles and teams have 'OR' semantics."
       * }
       */
      parameters?: {
          /** @deprecated */
          /** @deprecated */
        query?: {
          $skip?: string | null;
          $top?: number | null;
          summaryQuery?: string;
          locationsQuery?: (string)[];
          startingAfter?: string | null;
          endingAfter?: string | null;
          endingBefore?: string | null;
          startingBefore?: string | null;
          profiles?: (string)[];
          teams?: (string)[];
          organizer?: string | null;
          includePrivate?: boolean;
          includeArchived?: boolean;
          includeMeetingInstances?: boolean;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["DTO_Meeting"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Create meeting 
     * @description {
     *   "text": "Create a meeting"
     * }
     */
    post: {
      /**
       * Create meeting 
       * @description {
       *   "text": "Create a meeting"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            summary: string;
            description?: string | null;
            occurrenceRule: components["schemas"]["CalendarEventSpec"];
            /** @default [] */
            locations?: (string)[];
            /** @default [] */
            profiles?: (string)[];
            /** @default [] */
            externalParticipants?: (string)[];
            /** @default [] */
            teams?: (string)[];
            /** @default EVERYONE */
            visibility?: components["schemas"]["MeetingVisibility"];
            /** @default PARTICIPANTS */
            modificationPreference?: components["schemas"]["MeetingModificationPreference"];
            /** @default NOBODY */
            joiningPreference?: components["schemas"]["MeetingJoiningPreference"];
            /** @default true */
            notifyOnExport?: boolean;
            organizer?: string | null;
            conferenceData?: components["schemas"]["EventConferenceData"];
            attachments?: (components["schemas"]["MeetingAttachment"])[] | null;
            calendarId?: components["schemas"]["CalendarIdentifier"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["DTO_Meeting"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/calendars/meetings/next-occurrence": {
    /**
     * Get next meeting occurrence 
     * @description {
     *   "text": "Search for the next meeting occurrence that starts after the provided time point or after the current time if it is not specified"
     * }
     */
    get: {
      /**
       * Get next meeting occurrence 
       * @description {
       *   "text": "Search for the next meeting occurrence that starts after the provided time point or after the current time if it is not specified"
       * }
       */
      parameters: {
        query: {
          meetingId: string;
          since?: string | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["MeetingOccurrenceTime"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/calendars/meetings/occurrences": {
    /**
     * Get meeting occurrences for period 
     * @description {
     *   "text": "Search for occurrences of a meeting that start in the provided time interval. Interval limits are inclusive, response is limited by the first 1_000 results by default."
     * }
     */
    get: {
      /**
       * Get meeting occurrences for period 
       * @description {
       *   "text": "Search for occurrences of a meeting that start in the provided time interval. Interval limits are inclusive, response is limited by the first 1_000 results by default."
       * }
       */
      parameters: {
        query: {
          meetingId: string;
          since: string;
          until: string;
          limit?: number | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["MeetingOccurrenceTime"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/calendars/meetings/occurrences-by-meeting": {
    /**
     * Get meeting occurrences for period for multiple meetings 
     * @description {
     *   "text": "Search for occurrences of a meeting that start in the provided time interval. Interval limits are inclusive, response is limited by the first 1_000 results by default (per meeting)."
     * }
     */
    get: {
      /**
       * Get meeting occurrences for period for multiple meetings 
       * @description {
       *   "text": "Search for occurrences of a meeting that start in the provided time interval. Interval limits are inclusive, response is limited by the first 1_000 results by default (per meeting)."
       * }
       */
      parameters: {
        query: {
          meetingIds: (string)[];
          since: string;
          until: string;
          limit?: number | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["MeetingWithOccurrenceTime"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/calendars/meetings/participation-statuses": {
    /** Get meeting participation statuses for profiles */
    get: {
      /** Get meeting participation statuses for profiles */
      parameters: {
        query: {
          id: string;
          profileIds: (string)[];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["EventParticipationStatus"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/calendars/meetings/participation-statuses-external": {
    /** Get RSVP statuses for external users */
    get: {
      /** Get RSVP statuses for external users */
      parameters: {
        query: {
          id: string;
          emails: (string)[];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["EventParticipationStatus"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/calendars/meetings/profile-participation": {
    /**
     * Get profile participation statuses for meetings 
     * @deprecated
     */
    get: {
      /**
       * Get profile participation statuses for meetings 
       * @deprecated
       */
      parameters: {
        query: {
          profileId: string;
          events: (string)[];
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": ({
                first: string;
                second: components["schemas"]["EventParticipationStatus"];
              })[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/calendars/meetings/profile-participation-records": {
    /** Get profile participation status records for meetings */
    get: {
      /** Get profile participation status records for meetings */
      parameters: {
        query: {
          profileId: string;
          events: (string)[];
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["DTO_MeetingRSVP"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/calendars/meetings/{id}": {
    /** Get meeting */
    get: {
      /** Get meeting */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["DTO_Meeting"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /** Delete meeting */
    delete: {
      /** Delete meeting */
      parameters: {
        query?: {
          targetDate?: string | null;
          modificationKind?: components["schemas"]["RecurrentModification"];
          $fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["DTO_Meeting"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Update meeting 
     * @description {
     *   "text": "Patch a meeting. Only not-null parameters and not empty diffs will be applied."
     * }
     */
    patch: {
      /**
       * Update meeting 
       * @description {
       *   "text": "Patch a meeting. Only not-null parameters and not empty diffs will be applied."
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            summary?: string | null;
            description?: string | null;
            occurrenceRule?: components["schemas"]["CalendarEventSpec"];
            locationsDiff?: components["schemas"]["Diff"];
            profilesDiff?: components["schemas"]["Diff"];
            externalParticipantsDiff?: components["schemas"]["Diff"];
            teamsDiff?: components["schemas"]["Diff"];
            visibility?: components["schemas"]["MeetingVisibility"];
            modificationPreference?: components["schemas"]["MeetingModificationPreference"];
            joiningPreference?: components["schemas"]["MeetingJoiningPreference"];
            /** @default true */
            notifyOnExport?: boolean;
            organizer?: string | null;
            /** Format: date-time */
            targetDate?: string | null;
            /** @default All */
            modificationKind?: components["schemas"]["RecurrentModification"];
            conferenceData?: components["schemas"]["EventConferenceData"];
            attachments?: (components["schemas"]["MeetingAttachment"])[] | null;
            calendarId?: components["schemas"]["CalendarIdentifier"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["DTO_Meeting"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/calendars/meetings/{id}/conference-rooms": {
    /** Add conference room */
    post: {
      /** Add conference room */
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            roomId: string;
            /** Format: date-time */
            dateTime: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /** Remove conference room */
    delete: {
      /** Remove conference room */
      parameters: {
        query: {
          roomId: string;
          dateTime: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/calendars/meetings/{id}/participation-status": {
    /**
     * Update profile participation status 
     * @description {
     *   "text": "Update profile participation status for a meeting"
     * }
     */
    patch: {
      /**
       * Update profile participation status 
       * @description {
       *   "text": "Update profile participation status for a meeting"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            profileId: string;
            status: components["schemas"]["EventParticipationStatus"];
            /** Format: date-time */
            targetDate?: string | null;
            /** @default All */
            modificationKind?: components["schemas"]["RecurrentModification"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["DTO_Meeting"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/calendars/membership-events": {
    /**
     * Get all membership events 
     * @description {
     *   "text": "Get/search membership events. Parameters are applied as 'AND' filters."
     * }
     */
    get: {
      /**
       * Get all membership events 
       * @description {
       *   "text": "Get/search membership events. Parameters are applied as 'AND' filters."
       * }
       */
      parameters: {
        query: {
          dateFrom: string;
          dateTo: string;
          team?: string | null;
          location?: string | null;
          role?: string | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["MembershipEvent"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/calendars/non-working-days-events": {
    /**
     * Get all non working days events 
     * @description {
     *   "text": "Get/search non-working day events. Parameters are applied as 'AND' filters."
     * }
     */
    get: {
      /**
       * Get all non working days events 
       * @description {
       *   "text": "Get/search non-working day events. Parameters are applied as 'AND' filters."
       * }
       */
      parameters: {
        query: {
          dateFrom: string;
          dateTo: string;
          member?: string | null;
          team?: string | null;
          location?: string | null;
          role?: string | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["NonWorkingDaysEvent"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/calls": {
    /** Create call */
    post: {
      /** Create call */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            participants: (components["schemas"]["ProfileIdentifier"])[];
            private: boolean;
            channelId?: string | null;
            description?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Room"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/chats/channels": {
    /** Add new channel */
    post: {
      /** Add new channel */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name: string;
            description: string;
            private: boolean;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["M2ChannelRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/chats/channels/dm": {
    /**
     * Get or create direct messages channel 
     * @deprecated 
     * @description {
     *   "text": "Create or get a direct messages channel with a profile"
     * }
     */
    post: {
      /**
       * Get or create direct messages channel 
       * @deprecated 
       * @description {
       *   "text": "Create or get a direct messages channel with a profile"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            profile: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["M2ChannelRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/chats/channels/is-name-free": {
    /**
     * Is name free? 
     * @description {
     *   "text": "Check whether a channel name is available. Returns true when the channel name can be used to create a new channel, false otherwise."
     * }
     */
    post: {
      /**
       * Is name free? 
       * @description {
       *   "text": "Check whether a channel name is available. Returns true when the channel name can be used to create a new channel, false otherwise."
       * }
       */
      requestBody: {
        content: {
          "application/json": {
            name: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": boolean;
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/chats/channels/{channel}/restore-archived": {
    /**
     * Restore archived channel 
     * @description {
     *   "text": "Restore an archived channel and allow new messages to be added again."
     * }
     */
    post: {
      /**
       * Restore archived channel 
       * @description {
       *   "text": "Restore an archived channel and allow new messages to be added again."
       * }
       */
      parameters: {
        path: {
          channel: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/chats/channels/all-channels": {
    /** List all channels */
    get: {
      /** List all channels */
      parameters: {
        query: {
          query: string;
          $skip?: string | null;
          $top?: number | null;
          quickFilter?: components["schemas"]["AllChannelsFilter"];
          sortColumn?: components["schemas"]["AllChannelsSortColumn"];
          sortOrder?: components["schemas"]["ColumnSortOrder"];
          publicOnly?: boolean | null;
          withArchived?: boolean | null;
          subscriber?: string | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["AllChannelsListEntry"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/chats/channels/{channel}": {
    /** Get channel */
    get: {
      /** Get channel */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          channel: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["M2ChannelRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Delete channel 
     * @description {
     *   "text": "Delete a channel. No one will be able to view this channel or its threads. This action cannot be undone."
     * }
     */
    delete: {
      /**
       * Delete channel 
       * @description {
       *   "text": "Delete a channel. No one will be able to view this channel or its threads. This action cannot be undone."
       * }
       */
      parameters: {
        path: {
          channel: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/chats/channels/{channel}/archive": {
    /**
     * Archive channel 
     * @description {
     *   "text": "Archive a channel and reject new messages being added. It is still possible to view messages from an archived channel. It is possible to restore the channel later."
     * }
     */
    delete: {
      /**
       * Archive channel 
       * @description {
       *   "text": "Archive a channel and reject new messages being added. It is still possible to view messages from an archived channel. It is possible to restore the channel later."
       * }
       */
      parameters: {
        path: {
          channel: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/chats/channels/conversations": {
    /** Create conversation */
    post: {
      /** Create conversation */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            profileIds: (string)[];
            subject?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["M2ChannelRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/chats/channels/conversations/{channel}/convert": {
    /** Convert conversation to private channel */
    post: {
      /** Convert conversation to private channel */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          channel: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            channelName: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["M2ChannelRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/chats/channels/conversations/{channel}/subject": {
    /** Change conversation subject */
    patch: {
      /** Change conversation subject */
      parameters: {
        path: {
          channel: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            subject: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/chats/channels/{channel}/administrator": {
    /** Get channel administrator */
    get: {
      /** Get channel administrator */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          channel: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["CPrincipal"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /** Assign channel administrator */
    patch: {
      /** Assign channel administrator */
      parameters: {
        path: {
          channel: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            profile: components["schemas"]["ProfileIdentifier"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/chats/channels/{channel}/attachments": {
    /** List attachments in channel */
    get: {
      /** List attachments in channel */
      parameters: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
        path: {
          channel: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["ChannelInfoAttachment"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/chats/channels/{channel}/attachments/files": {
    /** List file attachments in channel */
    get: {
      /** List file attachments in channel */
      parameters: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
        path: {
          channel: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["ChannelInfoAttachment"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/chats/channels/{channel}/attachments/images": {
    /** List images in channel */
    get: {
      /** List images in channel */
      parameters: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
        path: {
          channel: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["ChannelInfoAttachment"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/chats/channels/{channel}/attachments/links": {
    /** List links in channel */
    get: {
      /** List links in channel */
      parameters: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
        path: {
          channel: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["ChannelInfoAttachment"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/chats/channels/{channel}/attachments/videos": {
    /** List videos in channel */
    get: {
      /** List videos in channel */
      parameters: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
        path: {
          channel: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["ChannelInfoAttachment"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/chats/channels/{channel}/description": {
    /** Change channel description */
    patch: {
      /** Change channel description */
      parameters: {
        path: {
          channel: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            description: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/chats/channels/{channel}/icon": {
    /** Change channel icon */
    patch: {
      /** Change channel icon */
      parameters: {
        path: {
          channel: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            icon?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/chats/channels/{channel}/name": {
    /** Rename channel */
    patch: {
      /** Rename channel */
      parameters: {
        path: {
          channel: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/chats/channels/{channel}/subscribers/teams": {
    /** List teams subscribed to channel */
    get: {
      /** List teams subscribed to channel */
      parameters: {
        query: {
          $skip?: string | null;
          $top?: number | null;
          query: string;
          $fields?: string;
        };
        path: {
          channel: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["TD_Team"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
    /** Add teams to channel */
    post: {
      /** Add teams to channel */
      parameters: {
        path: {
          channel: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            teams: (components["schemas"]["TeamIdentifier"])[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /** Remove teams from channel */
    delete: {
      /** Remove teams from channel */
      parameters: {
        query: {
          teams: (string)[];
        };
        path: {
          channel: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/chats/channels/{channel}/subscribers/users": {
    /** List users subscribed to channel */
    get: {
      /** List users subscribed to channel */
      parameters: {
        query: {
          $skip?: string | null;
          $top?: number | null;
          query: string;
          $fields?: string;
        };
        path: {
          channel: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["TD_MemberProfile"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
    /** Add users to channel */
    post: {
      /** Add users to channel */
      parameters: {
        path: {
          channel: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            profiles: (components["schemas"]["ProfileIdentifier"])[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /** Remove users from channel */
    delete: {
      /** Remove users from channel */
      parameters: {
        query: {
          profiles: (string)[];
        };
        path: {
          channel: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/chats/messages/delete-message": {
    /**
     * Delete message 
     * @description {
     *   "text": "Delete a message from a channel."
     * }
     */
    post: {
      /**
       * Delete message 
       * @description {
       *   "text": "Delete a message from a channel."
       * }
       */
      requestBody: {
        content: {
          "application/json": {
            channel: components["schemas"]["ChannelIdentifier"];
            id: components["schemas"]["ChatMessageIdentifier"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/chats/messages/edit-message": {
    /**
     * Edit message 
     * @description {
     *   "text": "Edit an existing message. Message content can be a string, or a block with one or several sections of information."
     * }
     */
    post: {
      /**
       * Edit message 
       * @description {
       *   "text": "Edit an existing message. Message content can be a string, or a block with one or several sections of information."
       * }
       */
      requestBody: {
        content: {
          "application/json": {
            channel: components["schemas"]["ChannelIdentifier"];
            message: components["schemas"]["ChatMessageIdentifier"];
            content: components["schemas"]["ChatMessage"];
            attachments?: (components["schemas"]["AttachmentIn"])[] | null;
            unfurlLinks?: boolean | null;
            resolveNames?: boolean | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/chats/messages/import": {
    /**
     * Import messages 
     * @description {
     *   "text": "This API method is intended to be used only by applications. The `createdAtUtc` and `editedAtUtc` parameters are Unix epoch timestamps in *milliseconds*."
     * }
     */
    post: {
      /**
       * Import messages 
       * @description {
       *   "text": "This API method is intended to be used only by applications. The `createdAtUtc` and `editedAtUtc` parameters are Unix epoch timestamps in *milliseconds*."
       * }
       */
      requestBody: {
        content: {
          "application/json": {
            channel: components["schemas"]["ChannelIdentifier"];
            messages: (components["schemas"]["ImportMessage"])[];
            /** @default false */
            suppressNotifications?: boolean;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/chats/messages/send": {
    /**
     * Send text message 
     * @deprecated
     */
    post: {
      /**
       * Send text message 
       * @deprecated
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            channel: string;
            text: string;
            /** @default false */
            pending?: boolean;
            temporaryId?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["ChannelItemRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/chats/messages/send-message": {
    /**
     * Send message 
     * @description {
     *   "text": "Send a message to a channel, thread, member, issue, code review, etc. Message content can be a string, or a block with one or several sections of information."
     * }
     */
    post: {
      /**
       * Send message 
       * @description {
       *   "text": "Send a message to a channel, thread, member, issue, code review, etc. Message content can be a string, or a block with one or several sections of information."
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            channel?: components["schemas"]["ChannelIdentifier"];
            content: components["schemas"]["ChatMessage"];
            attachments?: (components["schemas"]["AttachmentIn"])[] | null;
            unfurlLinks?: boolean | null;
            externalId?: string | null;
            resolveNames?: boolean | null;
            pending?: boolean | null;
            recipient?: components["schemas"]["MessageRecipient"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["ChannelItemRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/chats/messages": {
    /**
     * Get channel messages 
     * @description {
     *   "text": "Retrieve a batch of messages from a channel. Messages are divided into batches by providing `sorting`, `startFromDate` and `batchSize` parameters. If the retrieved number of messages is less than `batchSize`, there are currently no more messages to return. Return data also contains next value for `startFromDate` as well as the `orgLimitReached` flag indicating whether part of messages could not be retrieved because of organization plan limitation."
     * }
     */
    get: {
      /**
       * Get channel messages 
       * @description {
       *   "text": "Retrieve a batch of messages from a channel. Messages are divided into batches by providing `sorting`, `startFromDate` and `batchSize` parameters. If the retrieved number of messages is less than `batchSize`, there are currently no more messages to return. Return data also contains next value for `startFromDate` as well as the `orgLimitReached` flag indicating whether part of messages could not be retrieved because of organization plan limitation."
       * }
       */
      parameters: {
        query: {
          channel: string;
          sorting: components["schemas"]["MessagesSorting"];
          startFromDate?: string | null;
          batchSize: number;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GetMessagesResponse"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/chats/messages/{message}": {
    /** Get message */
    get: {
      /** Get message */
      parameters: {
        query: {
          channel: string;
          $fields?: string;
        };
        path: {
          message: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["ChannelItemRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/chats/messages/pin": {
    /** Pin message */
    patch: {
      /** Pin message */
      requestBody: {
        content: {
          "application/json": {
            channel: components["schemas"]["ChannelIdentifier"];
            message: components["schemas"]["ChatMessageIdentifier"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/chats/messages/unpin": {
    /** Unpin message */
    patch: {
      /** Unpin message */
      requestBody: {
        content: {
          "application/json": {
            channel: components["schemas"]["ChannelIdentifier"];
            message: components["schemas"]["ChatMessageIdentifier"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/chats/messages/pinned-messages": {
    /** List pinned messages in channel */
    get: {
      /** List pinned messages in channel */
      parameters: {
        query: {
          channel: string;
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["ChannelItemRecord"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/chats/messages/sync-batch": {
    /**
     * Get sync batch 
     * @description {
     *   "text": "Get messages in specified channel for synchronization with third-party system. Messages with etag greater than specified value are returned, in the order of creation and updates. Use etag value \"0\" to start retrieving all messages in the channel. To get the current etag value, use \"Get current sync batch etag\" method. Read more in the [documentation](https://www.jetbrains.com/help/space/sync-api.html)."
     * }
     */
    get: {
      /**
       * Get sync batch 
       * @description {
       *   "text": "Get messages in specified channel for synchronization with third-party system. Messages with etag greater than specified value are returned, in the order of creation and updates. Use etag value \"0\" to start retrieving all messages in the channel. To get the current etag value, use \"Get current sync batch etag\" method. Read more in the [documentation](https://www.jetbrains.com/help/space/sync-api.html)."
       * }
       */
      parameters: {
        query: {
          batchInfo: string;
          channel: string;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              etag: string;
              data: (components["schemas"]["ChannelItemSyncRecord"])[];
              hasMore: boolean;
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/chats/messages/sync-batch/current-etag": {
    /**
     * Get current sync etag 
     * @description {
     *   "text": "Get current sync etag for given channel. You can use the returned etag to retrieve updates starting from this point through \"Get sync batch\" method. To retrieve all records instead, use \"0\" as the starting etag value. Read more in the [documentation](https://www.jetbrains.com/help/space/sync-api.html)."
     * }
     */
    get: {
      /**
       * Get current sync etag 
       * @description {
       *   "text": "Get current sync etag for given channel. You can use the returned etag to retrieve updates starting from this point through \"Get sync batch\" method. To retrieve all records instead, use \"0\" as the starting etag value. Read more in the [documentation](https://www.jetbrains.com/help/space/sync-api.html)."
       * }
       */
      parameters: {
        query: {
          channel: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": string;
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/checklists/{checklist}/items": {
    /**
     * Create plan item 
     * @description {
     *   "text": "Create plan item as the last element of the top level in a checklist if parent plan item is null, or as the last child if parent plan item is provided."
     * }
     */
    post: {
      /**
       * Create plan item 
       * @description {
       *   "text": "Create plan item as the last element of the top level in a checklist if parent plan item is null, or as the last child if parent plan item is provided."
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          checklist: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            parentItem?: components["schemas"]["PlanItemIdentifier"];
            itemText: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["PlanItem"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/checklists/{checklist}/items/{planItem}/move": {
    /**
     * Move plan item 
     * @description {
     *   "text": "Move plan item in a checklist"
     * }
     */
    post: {
      /**
       * Move plan item 
       * @description {
       *   "text": "Move plan item in a checklist"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          checklist: string;
          planItem: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            targetParent: components["schemas"]["PlanItemIdentifier"];
            afterItem?: components["schemas"]["PlanItemIdentifier"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["PlanItem"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/checklists/{checklist}/items/{planItem}": {
    /**
     * Get plan item 
     * @description {
     *   "text": "Get plan item by its identifier in a checklist"
     * }
     */
    get: {
      /**
       * Get plan item 
       * @description {
       *   "text": "Get plan item by its identifier in a checklist"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          checklist: string;
          planItem: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["PlanItem"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Delete plan item 
     * @description {
     *   "text": "Delete plan item and its children from a checklist"
     * }
     */
    delete: {
      /**
       * Delete plan item 
       * @description {
       *   "text": "Delete plan item and its children from a checklist"
       * }
       */
      parameters: {
        path: {
          checklist: string;
          planItem: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Update plan item 
     * @description {
     *   "text": "Update plan item in a checklist"
     * }
     */
    patch: {
      /**
       * Update plan item 
       * @description {
       *   "text": "Update plan item in a checklist"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          checklist: string;
          planItem: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            itemText?: string;
            itemDone?: boolean;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["PlanItem"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/custom-fields/extended-types": {
    /**
     * Get all extended types 
     * @deprecated 
     * @description {
     *   "text": "Get all types that support custom fields"
     * }
     */
    get: {
      /**
       * Get all extended types 
       * @deprecated 
       * @description {
       *   "text": "Get all types that support custom fields"
       * }
       */
      parameters?: {
        query?: {
          scope?: components["schemas"]["ExtendedTypeScopeType"];
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["ExtendedType"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/custom-fields/{typeKey}/all-values": {
    /**
     * Get all values 
     * @deprecated 
     * @description {
     *   "text": "Get all custom field values for a type. Optionally, extendedEntityIds can be used to get data for one or more entity IDs."
     * }
     */
    get: {
      /**
       * Get all values 
       * @deprecated 
       * @description {
       *   "text": "Get all custom field values for a type. Optionally, extendedEntityIds can be used to get data for one or more entity IDs."
       * }
       */
      parameters: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          extendedEntityIds?: (string)[] | null;
          scope?: string;
          $fields?: string;
        };
        path: {
          typeKey: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["CustomFieldsRecord"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/custom-fields/{typeKey}/enum-values/{customFieldId}": {
    /**
     * Get all enum values 
     * @deprecated 
     * @description {
     *   "text": "Get a page of options for custom field of `Select from options` type with `Open-ended` flag set"
     * }
     */
    get: {
      /**
       * Get all enum values 
       * @deprecated 
       * @description {
       *   "text": "Get a page of options for custom field of `Select from options` type with `Open-ended` flag set"
       * }
       */
      parameters: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          query?: string | null;
          ordering?: components["schemas"]["EnumValueOrdering"];
          countRecords?: boolean | null;
          addedByProfileId?: string | null;
          scope?: string;
          $fields?: string;
        };
        path: {
          typeKey: string;
          customFieldId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["EnumValueData"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Create enum value 
     * @deprecated 
     * @description {
     *   "text": "Add new option to custom field of `Select from options` type. Options can only be added via this API call if custom field has the `Open-ended` flag set. Returns saved records."
     * }
     */
    post: {
      /**
       * Create enum value 
       * @deprecated 
       * @description {
       *   "text": "Add new option to custom field of `Select from options` type. Options can only be added via this API call if custom field has the `Open-ended` flag set. Returns saved records."
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          typeKey: string;
          customFieldId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            valuesToAdd: (components["schemas"]["EnumValueData"])[];
            scope: components["schemas"]["ExtendedTypeScope"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["EnumValueData"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/custom-fields/{typeKey}/fields": {
    /**
     * Get all fields 
     * @deprecated 
     * @description {
     *   "text": "Get custom fields for a type"
     * }
     */
    get: {
      /**
       * Get all fields 
       * @deprecated 
       * @description {
       *   "text": "Get custom fields for a type"
       * }
       */
      parameters: {
        query?: {
          withArchived?: boolean;
          scope?: string;
          $fields?: string;
        };
        path: {
          typeKey: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["CustomField"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Create field 
     * @deprecated 
     * @description {
     *   "text": "Create custom field for a type"
     * }
     */
    post: {
      /**
       * Create field 
       * @deprecated 
       * @description {
       *   "text": "Create custom field for a type"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          typeKey: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name: string;
            description?: string | null;
            type: components["schemas"]["CFType"];
            constraint?: components["schemas"]["CFConstraint"];
            required: boolean;
            private: boolean;
            access?: components["schemas"]["AccessType"];
            defaultValue: components["schemas"]["CFInputValue"];
            openEnumValuesModification?: components["schemas"]["CFEnumValuesModification"];
            cfParameters?: components["schemas"]["CFCreateParameters"];
            scope: components["schemas"]["ExtendedTypeScope"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["CustomField"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/custom-fields/{typeKey}/fields/reorder": {
    /**
     * Reorder fields 
     * @deprecated 
     * @description {
     *   "text": "Re-order custom fields. Pass IDs of the custom fields in the order you wish the custom fields to be."
     * }
     */
    post: {
      /**
       * Reorder fields 
       * @deprecated 
       * @description {
       *   "text": "Re-order custom fields. Pass IDs of the custom fields in the order you wish the custom fields to be."
       * }
       */
      parameters: {
        path: {
          typeKey: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            customFieldOrder: (string)[];
            scope: components["schemas"]["ExtendedTypeScope"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/custom-fields/{typeKey}/fields/{id}/archive": {
    /**
     * Archive field 
     * @deprecated 
     * @description {
     *   "text": "Archive a custom field for a type"
     * }
     */
    post: {
      /**
       * Archive field 
       * @deprecated 
       * @description {
       *   "text": "Archive a custom field for a type"
       * }
       */
      parameters: {
        path: {
          typeKey: string;
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            scope: components["schemas"]["ExtendedTypeScope"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/custom-fields/{typeKey}/fields/{id}/restore": {
    /**
     * Restore field 
     * @deprecated 
     * @description {
     *   "text": "Restore custom field for a type"
     * }
     */
    post: {
      /**
       * Restore field 
       * @deprecated 
       * @description {
       *   "text": "Restore custom field for a type"
       * }
       */
      parameters: {
        path: {
          typeKey: string;
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            scope: components["schemas"]["ExtendedTypeScope"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/custom-fields/{typeKey}/fields/{id}": {
    /**
     * Delete field 
     * @deprecated 
     * @description {
     *   "text": "Remove custom field for a type"
     * }
     */
    delete: {
      /**
       * Delete field 
       * @deprecated 
       * @description {
       *   "text": "Remove custom field for a type"
       * }
       */
      parameters: {
        query: {
          scope: string;
        };
        path: {
          typeKey: string;
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Update field 
     * @deprecated 
     * @description {
     *   "text": "Update custom field for a type. Optional parameters will be ignored when not specified and updated otherwise."
     * }
     */
    patch: {
      /**
       * Update field 
       * @deprecated 
       * @description {
       *   "text": "Update custom field for a type. Optional parameters will be ignored when not specified and updated otherwise."
       * }
       */
      parameters: {
        path: {
          typeKey: string;
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name?: string | null;
            description?: string | null;
            constraint?: components["schemas"]["CFConstraint"];
            required?: boolean | null;
            private?: boolean | null;
            access?: components["schemas"]["AccessType"];
            defaultValue?: components["schemas"]["CFInputValue"];
            enumValues?: (components["schemas"]["EnumValueData"])[] | null;
            openEnumValuesModification?: components["schemas"]["CFEnumValuesModification"];
            cfParameters?: components["schemas"]["CFUpdateParameters"];
            scope: components["schemas"]["ExtendedTypeScope"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/custom-fields/{typeKey}/fields/{id}/filter-values": {
    /**
     * Get all filter values 
     * @deprecated
     */
    get: {
      /**
       * Get all filter values 
       * @deprecated
       */
      parameters: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          scope?: string;
          calculateTotal?: boolean;
          $fields?: string;
        };
        path: {
          typeKey: string;
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["CFValue"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/custom-fields/{typeKey}/{entityId}/values": {
    /**
     * Get value 
     * @deprecated 
     * @description {
     *   "text": "Get custom field value for a type and entity ID"
     * }
     */
    get: {
      /**
       * Get value 
       * @deprecated 
       * @description {
       *   "text": "Get custom field value for a type and entity ID"
       * }
       */
      parameters: {
        query?: {
          scope?: string;
          $fields?: string;
        };
        path: {
          typeKey: string;
          entityId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["CustomFieldsRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Update value 
     * @deprecated 
     * @description {
     *   "text": "Update custom field value(s) for a type and entity ID"
     * }
     */
    patch: {
      /**
       * Update value 
       * @deprecated 
       * @description {
       *   "text": "Update custom field value(s) for a type and entity ID"
       * }
       */
      parameters: {
        path: {
          entityId: string;
          typeKey: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            values: (components["schemas"]["CustomFieldInputValue"])[];
            scope: components["schemas"]["ExtendedTypeScope"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/custom-fields-v2/values/{entity}": {
    /** Get all values for entity */
    get: {
      /** Get all values for entity */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          entity: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["CustomFieldValueData"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /** Set values for entity */
    post: {
      /** Set values for entity */
      parameters: {
        path: {
          entity: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            customFieldValues: (components["schemas"]["CustomFieldValueUpdate"])[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/custom-fields-v2/values/{entity}/{customField}": {
    /** Get single value */
    get: {
      /** Get single value */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          entity: string;
          customField: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["CustomFieldValueData"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /** Set single value */
    post: {
      /** Set single value */
      parameters: {
        path: {
          entity: string;
          customField: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            newValue: components["schemas"]["CFInputValue"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/custom-fields-v2/{entityType}/fields": {
    /**
     * Get custom fields 
     * @description {
     *   "text": "Get all configured custom fields for an entity type"
     * }
     */
    get: {
      /**
       * Get custom fields 
       * @description {
       *   "text": "Get all configured custom fields for an entity type"
       * }
       */
      parameters: {
        query?: {
          withArchived?: boolean;
          $fields?: string;
        };
        path: {
          entityType: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["CustomFieldData"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /** Create custom field */
    post: {
      /** Create custom field */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          entityType: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name: string;
            type: components["schemas"]["CustomFieldType"];
            /** @default false */
            multivalued?: boolean;
            parameters?: components["schemas"]["CFCreateParameters"];
            /** @default false */
            required?: boolean;
            defaultValue?: components["schemas"]["CFInputValue"];
            constraint?: components["schemas"]["CFConstraint"];
            description?: string | null;
            /** Format: int32 */
            order?: number | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["CustomFieldData"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/custom-fields-v2/{entityType}/fields/reorder": {
    /**
     * Reorder custom fields 
     * @description {
     *   "text": "Re-order custom fields. Pass identifiers of the custom fields in the order you wish the custom fields to be."
     * }
     */
    post: {
      /**
       * Reorder custom fields 
       * @description {
       *   "text": "Re-order custom fields. Pass identifiers of the custom fields in the order you wish the custom fields to be."
       * }
       */
      parameters: {
        path: {
          entityType: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            customFields: (components["schemas"]["CFIdentifier"])[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/custom-fields-v2/{entityType}/fields/{customField}/archive": {
    /** Archive custom field */
    post: {
      /** Archive custom field */
      parameters: {
        path: {
          entityType: string;
          customField: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/custom-fields-v2/{entityType}/fields/{customField}/restore": {
    /** Restore custom field */
    post: {
      /** Restore custom field */
      parameters: {
        path: {
          entityType: string;
          customField: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/custom-fields-v2/{entityType}/fields/{customField}": {
    /**
     * Get single custom field 
     * @description {
     *   "text": "Get configured custom field"
     * }
     */
    get: {
      /**
       * Get single custom field 
       * @description {
       *   "text": "Get configured custom field"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          entityType: string;
          customField: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["CustomFieldData"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /** Delete custom field */
    delete: {
      /** Delete custom field */
      parameters: {
        path: {
          entityType: string;
          customField: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /** Update custom field */
    patch: {
      /** Update custom field */
      parameters: {
        path: {
          entityType: string;
          customField: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            name?: string | null;
            parameters?: components["schemas"]["CFUpdateParameters"];
            required?: boolean | null;
            defaultValue?: components["schemas"]["CFInputValue"];
            constraint?: components["schemas"]["CFConstraint"];
            description?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/custom-fields-v2/{entityType}/fields/{customField}/enum-values": {
    /**
     * Get enum values 
     * @description {
     *   "text": ""
     * }
     */
    get: {
      /**
       * Get enum values 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          query?: string | null;
          ordering?: components["schemas"]["EnumValueOrdering"];
          addedByProfileId?: string | null;
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
        path: {
          entityType: string;
          customField: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["CFEnumValue"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
    /** Create enum value */
    post: {
      /** Create enum value */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          entityType: string;
          customField: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            enumValueToAdd: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["CFEnumValue"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /** Update enum value */
    patch: {
      /** Update enum value */
      parameters: {
        path: {
          entityType: string;
          customField: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            enumValueToUpdate: components["schemas"]["CFEnumValueIdentifier"];
            newName: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/custom-fields-v2/{entityType}/fields/{customField}/enum-values/bulk-update": {
    /**
     * Bulk update enum values 
     * @description {
     *   "text": ""
     * }
     */
    post: {
      /**
       * Bulk update enum values 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        path: {
          entityType: string;
          customField: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            enumValueModifications: (components["schemas"]["CFEnumValueModification"])[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/custom-fields-v2/{entityType}/fields/{customField}/enum-values/{enumValueToRemove}": {
    /** Delete enum value */
    delete: {
      /** Delete enum value */
      parameters: {
        path: {
          entityType: string;
          customField: string;
          enumValueToRemove: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/emojis/add": {
    /**
     * Add emoji 
     * @description {
     *   "text": "Add custom emoji"
     * }
     */
    post: {
      /**
       * Add emoji 
       * @description {
       *   "text": "Add custom emoji"
       * }
       */
      requestBody: {
        content: {
          "application/json": {
            emoji: string;
            attachmentId: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/emojis/delete": {
    /**
     * Delete emoji 
     * @description {
     *   "text": "Delete an emoji by name"
     * }
     */
    post: {
      /**
       * Delete emoji 
       * @description {
       *   "text": "Delete an emoji by name"
       * }
       */
      requestBody: {
        content: {
          "application/json": {
            emoji: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/emojis/record-usage": {
    /**
     * Record emojis usage 
     * @description {
     *   "text": "Record emojis usage and update frequently used list"
     * }
     */
    post: {
      /**
       * Record emojis usage 
       * @description {
       *   "text": "Record emojis usage and update frequently used list"
       * }
       */
      requestBody: {
        content: {
          "application/json": {
            emojis: (string)[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/emojis/exists": {
    /**
     * Check if emoji exists 
     * @description {
     *   "text": "Check whether a given emoji name exists"
     * }
     */
    get: {
      /**
       * Check if emoji exists 
       * @description {
       *   "text": "Check whether a given emoji name exists"
       * }
       */
      parameters: {
        query: {
          emoji: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": boolean;
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/emojis/frequently-used": {
    /**
     * Get frequently used emojis 
     * @description {
     *   "text": "List frequently used emojis"
     * }
     */
    get: {
      /**
       * Get frequently used emojis 
       * @description {
       *   "text": "List frequently used emojis"
       * }
       */
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (string)[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/emojis/search": {
    /**
     * Search emoji 
     * @description {
     *   "text": "Search for emoji"
     * }
     */
    get: {
      /**
       * Search emoji 
       * @description {
       *   "text": "Search for emoji"
       * }
       */
      parameters: {
        query: {
          $skip?: string | null;
          $top?: number | null;
          query: string;
          version?: string | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["EmojiSearchMatchData"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/emojis/sync-batch": {
    /**
     * Get sync batch 
     * @description {
     *   "text": "Get custom emojis for synchronization with third-party system. Custom emojis with etag greater than specified value are returned. Read more in the [documentation](https://www.jetbrains.com/help/space/sync-api.html)."
     * }
     */
    get: {
      /**
       * Get sync batch 
       * @description {
       *   "text": "Get custom emojis for synchronization with third-party system. Custom emojis with etag greater than specified value are returned. Read more in the [documentation](https://www.jetbrains.com/help/space/sync-api.html)."
       * }
       */
      parameters: {
        query: {
          batchInfo: string;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              etag: string;
              data: (components["schemas"]["CustomEmojiInfo"])[];
              hasMore: boolean;
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/external-issues/default-issue-status-for-mr-merge": {
    /**
     * Set default target issue status for merge request merge 
     * @description {
     *   "text": "Set default status to move external issues to when linked merge request is merged in Space"
     * }
     */
    post: {
      /**
       * Set default target issue status for merge request merge 
       * @description {
       *   "text": "Set default status to move external issues to when linked merge request is merged in Space"
       * }
       */
      requestBody: {
        content: {
          "application/json": {
            application: components["schemas"]["ApplicationIdentifier"];
            project: components["schemas"]["ProjectIdentifier"];
            issuePrefix: string;
            targetStatusForMergeRequestMerge?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/external-issues/issue-content": {
    /**
     * Post external issue data 
     * @description {
     *   "text": "Provide information about an issue from external issue tracker"
     * }
     */
    post: {
      /**
       * Post external issue data 
       * @description {
       *   "text": "Provide information about an issue from external issue tracker"
       * }
       */
      requestBody: {
        content: {
          "application/json": {
            issuePrefix: string;
            issues: (components["schemas"]["ExternalIssueDataIn"])[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/external-issues/issue-statuses": {
    /**
     * Provide all possible statuses for external issues 
     * @description {
     *   "text": "Provide Space with all possible statuses for external issues for a given project"
     * }
     */
    post: {
      /**
       * Provide all possible statuses for external issues 
       * @description {
       *   "text": "Provide Space with all possible statuses for external issues for a given project"
       * }
       */
      requestBody: {
        content: {
          "application/json": {
            issuePrefix: string;
            statuses: (components["schemas"]["ExternalIssueStatusIn"])[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/external-issues/mark-issues-as-deleted": {
    /**
     * Mark external issues as deleted 
     * @description {
     *   "text": "Notify Space about issues that were deleted in external issue tracker"
     * }
     */
    post: {
      /**
       * Mark external issues as deleted 
       * @description {
       *   "text": "Notify Space about issues that were deleted in external issue tracker"
       * }
       */
      requestBody: {
        content: {
          "application/json": {
            issuePrefix: string;
            issueIds: (string)[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/external-issues/events-queue": {
    /**
     * Get external issue event queue items 
     * @description {
     *   "text": "Fetch events about external issues from Space"
     * }
     */
    get: {
      /**
       * Get external issue event queue items 
       * @description {
       *   "text": "Fetch events about external issues from Space"
       * }
       */
      parameters: {
        query: {
          fromEtag?: number | null;
          batchSize: number;
          issueCodeLinkingEventsShape?: components["schemas"]["ExternalIssueCodeLinkingEventsShape"];
          includeCommitChanges?: boolean;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["ExternalIssueEventQueueItemsBatch"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/external-issues/external-tracker-projects": {
    /** Get all connected external issue tracker projects */
    get: {
      /** Get all connected external issue tracker projects */
      parameters: {
        query: {
          application: string;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["ExternalIssueTrackerProjectApi"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /** Connect external issue tracker projects */
    post: {
      /** Connect external issue tracker projects */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            projects: (components["schemas"]["ExternalIssueTrackerProjectIn"])[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["CreateExternalIssueProjectResult"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /** Disconnect external issue tracker project */
    delete: {
      /** Disconnect external issue tracker project */
      parameters: {
        query: {
          issuePrefix: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/external-issues/issues/{issuePrefix}/{issueId}/code-reviews": {
    /**
     * Link code reviews to external issue 
     * @description {
     *   "text": "Add code review links to an existing issue in a project"
     * }
     */
    post: {
      /**
       * Link code reviews to external issue 
       * @description {
       *   "text": "Add code review links to an existing issue in a project"
       * }
       */
      parameters: {
        path: {
          issuePrefix: string;
          issueId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            project: components["schemas"]["ProjectIdentifier"];
            codeReviewIds: (components["schemas"]["ReviewIdentifier"])[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Unlink code reviews from external issue 
     * @description {
     *   "text": "Remove code review links from an existing issue in a project"
     * }
     */
    delete: {
      /**
       * Unlink code reviews from external issue 
       * @description {
       *   "text": "Remove code review links from an existing issue in a project"
       * }
       */
      parameters: {
        query: {
          project: string;
          codeReviewIds: (string)[];
        };
        path: {
          issuePrefix: string;
          issueId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/external-issues/issues/{issuePrefix}/{issueId}/commits": {
    /**
     * Link commits to external issue 
     * @description {
     *   "text": "Add commit links to an existing issue in a project"
     * }
     */
    post: {
      /**
       * Link commits to external issue 
       * @description {
       *   "text": "Add commit links to an existing issue in a project"
       * }
       */
      parameters: {
        path: {
          issuePrefix: string;
          issueId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            project: components["schemas"]["ProjectIdentifier"];
            repository: string;
            commitIds: (string)[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Unlink commits from external issue 
     * @description {
     *   "text": "Remove commit links from an existing issue in a project"
     * }
     */
    delete: {
      /**
       * Unlink commits from external issue 
       * @description {
       *   "text": "Remove commit links from an existing issue in a project"
       * }
       */
      parameters: {
        query: {
          project: string;
          repository: string;
          commitIds: (string)[];
        };
        path: {
          issuePrefix: string;
          issueId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/external-link-patterns": {
    /**
     * Get all external link patterns 
     * @description {
     *   "text": "List all prefixes to be automatically expanded to external links",
     *   "helpTopic": "external-links.html"
     * }
     */
    get: {
      /**
       * Get all external link patterns 
       * @description {
       *   "text": "List all prefixes to be automatically expanded to external links",
       *   "helpTopic": "external-links.html"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["ExternalLinkPattern"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Create external link pattern 
     * @description {
     *   "text": "Add a prefix to be expanded to external links",
     *   "helpTopic": "external-links.html"
     * }
     */
    post: {
      /**
       * Create external link pattern 
       * @description {
       *   "text": "Add a prefix to be expanded to external links",
       *   "helpTopic": "external-links.html"
       * }
       */
      requestBody: {
        content: {
          "application/json": {
            pattern: string;
            linkReplacement: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Delete external link pattern 
     * @description {
     *   "text": "Delete prefix for expanding to external links",
     *   "helpTopic": "external-links.html"
     * }
     */
    delete: {
      /**
       * Delete external link pattern 
       * @description {
       *   "text": "Delete prefix for expanding to external links",
       *   "helpTopic": "external-links.html"
       * }
       */
      parameters: {
        query: {
          pattern: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/http-api-model": {
    /**
     * Get HTTP API model 
     * @description {
     *   "text": "Get the HTTP API model that describes the available HTTP APIs"
     * }
     */
    get: {
      /**
       * Get HTTP API model 
       * @description {
       *   "text": "Get the HTTP API model that describes the available HTTP APIs"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["HA_Model"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/issues/get-by-ids": {
    /**
     * Get issues by identifiers 
     * @description {
     *   "text": "Retrieve list of issues by identifiers. Issues can belong to different projects. Up to 100 issues can be retrieved within a single request. See also [Get all issues](/extensions/httpApiPlayground?resource=projects_xxx_planning_issues&endpoint=rest_query) (`/projects/{project}/planning/issues`)"
     * }
     */
    post: {
      /**
       * Get issues by identifiers 
       * @description {
       *   "text": "Retrieve list of issues by identifiers. Issues can belong to different projects. Up to 100 issues can be retrieved within a single request. See also [Get all issues](/extensions/httpApiPlayground?resource=projects_xxx_planning_issues&endpoint=rest_query) (`/projects/{project}/planning/issues`)"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            issueIdentifiers: (components["schemas"]["IssueIdentifier"])[];
            withDeleted?: boolean | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["Issue"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/issues": {
    /**
     * Get issue 
     * @description {
     *   "text": "Retrieve an issue by its identifier"
     * }
     */
    get: {
      /**
       * Get issue 
       * @description {
       *   "text": "Retrieve an issue by its identifier"
       * }
       */
      parameters: {
        query: {
          issueId: string;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Issue"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/notifications": {
    /**
     * Get all notifications 
     * @description {
     *   "text": "List all subscription subjects"
     * }
     */
    get: {
      /**
       * Get all notifications 
       * @description {
       *   "text": "List all subscription subjects"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["EventSubjectInfoDTO"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/notifications/channel-subscriptions": {
    /**
     * Get all channel subscriptions 
     * @description {
     *   "text": "List subscriptions for a channel"
     * }
     */
    get: {
      /**
       * Get all channel subscriptions 
       * @description {
       *   "text": "List subscriptions for a channel"
       * }
       */
      parameters: {
        query: {
          channel: string;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["SubscriptionDTO"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Create channel subscription 
     * @description {
     *   "text": "Add subscription for a channel"
     * }
     */
    post: {
      /**
       * Create channel subscription 
       * @description {
       *   "text": "Add subscription for a channel"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            channel: components["schemas"]["ChatChannel"];
            name: string;
            subscription: components["schemas"]["CustomGenericSubscriptionIn"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["SubscriptionDTO"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/notifications/channel-subscriptions/{id}/request-missing-rights": {
    /**
     * Request Missing Rights 
     * @description {
     *   "text": "Ensures that all permissions required for this subscription are requested in the corresponding permission role"
     * }
     */
    post: {
      /**
       * Request Missing Rights 
       * @description {
       *   "text": "Ensures that all permissions required for this subscription are requested in the corresponding permission role"
       * }
       */
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/notifications/channel-subscriptions/{id}": {
    /**
     * Delete channel subscription 
     * @description {
     *   "text": "Delete channel subscription"
     * }
     */
    delete: {
      /**
       * Delete channel subscription 
       * @description {
       *   "text": "Delete channel subscription"
       * }
       */
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Update channel subscription 
     * @description {
     *   "text": "Update subscription for a channel"
     * }
     */
    patch: {
      /**
       * Update channel subscription 
       * @description {
       *   "text": "Update subscription for a channel"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            name?: string | null;
            enabled?: boolean | null;
            subscription?: components["schemas"]["CustomGenericSubscriptionIn"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["SubscriptionDTO"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/notifications/personal-custom-subscriptions": {
    /**
     * Get all personal custom subscriptions 
     * @description {
     *   "text": "List personal custom subscriptions"
     * }
     */
    get: {
      /**
       * Get all personal custom subscriptions 
       * @description {
       *   "text": "List personal custom subscriptions"
       * }
       */
      parameters: {
        query: {
          profile: string;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["SubscriptionDTO"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Create personal custom subscription 
     * @description {
     *   "text": "Create personal custom subscription"
     * }
     */
    post: {
      /**
       * Create personal custom subscription 
       * @description {
       *   "text": "Create personal custom subscription"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            profile: components["schemas"]["ProfileIdentifier"];
            name: string;
            feed: string;
            subscription: components["schemas"]["CustomGenericSubscriptionIn"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["SubscriptionDTO"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/notifications/personal-custom-subscriptions/{id}": {
    /**
     * Delete personal custom subscription 
     * @description {
     *   "text": "Delete personal custom subscription"
     * }
     */
    delete: {
      /**
       * Delete personal custom subscription 
       * @description {
       *   "text": "Delete personal custom subscription"
       * }
       */
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Update personal custom subscription 
     * @description {
     *   "text": "Create personal custom subscription"
     * }
     */
    patch: {
      /**
       * Update personal custom subscription 
       * @description {
       *   "text": "Create personal custom subscription"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            name?: string | null;
            enabled?: boolean | null;
            feed?: string | null;
            subscription?: components["schemas"]["CustomGenericSubscriptionIn"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["SubscriptionDTO"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/notifications/personal-subscriptions/update-personal-subscription-subject": {
    /**
     * Update personal subscription subject 
     * @description {
     *   "text": "Update personal subscription settings for a member"
     * }
     */
    post: {
      /**
       * Update personal subscription subject 
       * @description {
       *   "text": "Update personal subscription settings for a member"
       * }
       */
      requestBody: {
        content: {
          "application/json": {
            profile: components["schemas"]["ProfileIdentifier"];
            subjectCode: string;
            feed: string;
            enabled: boolean;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/notifications/personal-subscriptions/update-personal-subscription-target": {
    /**
     * Update personal subscription target 
     * @description {
     *   "text": "Update personal subscription settings for a member"
     * }
     */
    post: {
      /**
       * Update personal subscription target 
       * @description {
       *   "text": "Update personal subscription settings for a member"
       * }
       */
      requestBody: {
        content: {
          "application/json": {
            profile: components["schemas"]["ProfileIdentifier"];
            targetCode: string;
            feed: string;
            eventCodes: (string)[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/notifications/personal-subscriptions/all-personal-subscription-targets": {
    /**
     * All personal subscription targets 
     * @description {
     *   "text": "List all personal subscription targets"
     * }
     */
    get: {
      /**
       * All personal subscription targets 
       * @description {
       *   "text": "List all personal subscription targets"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["PersonalSubscriptionTarget"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/notifications/personal-subscriptions/personal-subscription-settings": {
    /**
     * Get personal subscription settings 
     * @description {
     *   "text": "Get personal subscription settings for a member"
     * }
     */
    get: {
      /**
       * Get personal subscription settings 
       * @description {
       *   "text": "Get personal subscription settings for a member"
       * }
       */
      parameters: {
        query: {
          profile: string;
          feed: string;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["PersonalSubscriptionSettings"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/notifications/private-feeds": {
    /**
     * Get all private feeds 
     * @description {
     *   "text": "List personal feeds for a member"
     * }
     */
    get: {
      /**
       * Get all private feeds 
       * @description {
       *   "text": "List personal feeds for a member"
       * }
       */
      parameters: {
        query: {
          profile: string;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["PrivateFeed"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Create private feed 
     * @description {
     *   "text": "Create personal feed for member"
     * }
     */
    post: {
      /**
       * Create private feed 
       * @description {
       *   "text": "Create personal feed for member"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            profile: components["schemas"]["ProfileIdentifier"];
            name: string;
            icon: string;
            color: components["schemas"]["PrivateFeedColor"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["PrivateFeed"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/notifications/private-feeds/{id}": {
    /**
     * Delete private feed 
     * @description {
     *   "text": "Delete personal feed for member"
     * }
     */
    delete: {
      /**
       * Delete private feed 
       * @description {
       *   "text": "Delete personal feed for member"
       * }
       */
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Update private feed 
     * @description {
     *   "text": "Update personal feed for a member"
     * }
     */
    patch: {
      /**
       * Update private feed 
       * @description {
       *   "text": "Update personal feed for a member"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            name?: string | null;
            icon?: string | null;
            color?: components["schemas"]["PrivateFeedColor"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["PrivateFeed"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/organization": {
    /** Get organization */
    get: {
      /** Get organization */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["OrganizationRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /** Update organization */
    patch: {
      /** Update organization */
      requestBody: {
        content: {
          "application/json": {
            orgData: components["schemas"]["OrganizationForUpdateDTO"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/organization/domains": {
    /** Get all domains */
    get: {
      /** Get all domains */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["OrgDomainDTO"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /** Update organization domain */
    patch: {
      /** Update organization domain */
      requestBody: {
        content: {
          "application/json": {
            domain: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/organization/domains/check": {
    /** Check domain availability */
    get: {
      /** Check domain availability */
      parameters: {
        query: {
          domain: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["CDomainStatus"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/organization/jet-sales/license-activation-url": {
    /** Get license activation url */
    get: {
      /** Get license activation url */
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": string | null;
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/organization/jet-sales/url": {
    /** Get JetSales URL */
    get: {
      /** Get JetSales URL */
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": string | null;
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/permission-roles/create": {
    /**
     * Create role 
     * @description {
     *   "text": "Create new custom permission role in specified permission context"
     * }
     */
    post: {
      /**
       * Create role 
       * @description {
       *   "text": "Create new custom permission role in specified permission context"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            contextIdentifier: components["schemas"]["PermissionContextIdentifier"];
            name: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["RoleDTO"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/permission-roles/get": {
    /**
     * Get roles 
     * @description {
     *   "text": "List all permission roles in permission context"
     * }
     */
    post: {
      /**
       * Get roles 
       * @description {
       *   "text": "List all permission roles in permission context"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            contextIdentifier: components["schemas"]["PermissionContextIdentifier"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["RoleDTO"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/permission-roles/{roleId}/reset-role-permissions-to-default": {
    /**
     * Reset role permissions to default 
     * @description {
     *   "text": "Reset permissions for the role to the standard ones. Only applicable to roles with PermissionRoleType = PREDEFINED, not applicable to custom roles."
     * }
     */
    post: {
      /**
       * Reset role permissions to default 
       * @description {
       *   "text": "Reset permissions for the role to the standard ones. Only applicable to roles with PermissionRoleType = PREDEFINED, not applicable to custom roles."
       * }
       */
      parameters: {
        path: {
          roleId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/permission-roles/{roleId}": {
    /**
     * Delete role 
     * @description {
     *   "text": "Delete custom permission role"
     * }
     */
    delete: {
      /**
       * Delete role 
       * @description {
       *   "text": "Delete custom permission role"
       * }
       */
      parameters: {
        path: {
          roleId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Update role 
     * @description {
     *   "text": "Update custom permission role name"
     * }
     */
    patch: {
      /**
       * Update role 
       * @description {
       *   "text": "Update custom permission role name"
       * }
       */
      parameters: {
        path: {
          roleId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/permission-roles/{roleId}/2-fa-requirement": {
    /**
     * Get 2FA requirement 
     * @description {
     *   "text": "Get 2FA requirement for permission role"
     * }
     */
    get: {
      /**
       * Get 2FA requirement 
       * @description {
       *   "text": "Get 2FA requirement for permission role"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          roleId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TwoFactorAuthenticationRequirement"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Set 2FA requirement 
     * @description {
     *   "text": "Set 2FA requirement for permission role"
     * }
     */
    patch: {
      /**
       * Set 2FA requirement 
       * @description {
       *   "text": "Set 2FA requirement for permission role"
       * }
       */
      parameters: {
        path: {
          roleId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            required?: boolean | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/permission-roles/{roleId}/permissions": {
    /**
     * Get role permissions 
     * @description {
     *   "text": "Get role permissions"
     * }
     */
    get: {
      /**
       * Get role permissions 
       * @description {
       *   "text": "Get role permissions"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          roleId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["RightDTO"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Grant role permissions 
     * @description {
     *   "text": "Grant permissions to the specified role. You can get the list of all permissions applicable to the role using \"Get all\" method."
     * }
     */
    post: {
      /**
       * Grant role permissions 
       * @description {
       *   "text": "Grant permissions to the specified role. You can get the list of all permissions applicable to the role using \"Get all\" method."
       * }
       */
      parameters: {
        path: {
          roleId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            rightCodes: (string)[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Revoke role permissions 
     * @description {
     *   "text": "Revoke permissions from the specified role."
     * }
     */
    delete: {
      /**
       * Revoke role permissions 
       * @description {
       *   "text": "Revoke permissions from the specified role."
       * }
       */
      parameters: {
        query: {
          rightCodes: (string)[];
        };
        path: {
          roleId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/permission-roles/{roleId}/profiles/{profile}": {
    /**
     * Add role member 
     * @description {
     *   "text": "Assign permission role to the profile"
     * }
     */
    post: {
      /**
       * Add role member 
       * @description {
       *   "text": "Assign permission role to the profile"
       * }
       */
      parameters: {
        path: {
          roleId: string;
          profile: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Remove role member 
     * @description {
     *   "text": "Remove permission role from the profile"
     * }
     */
    delete: {
      /**
       * Remove role member 
       * @description {
       *   "text": "Remove permission role from the profile"
       * }
       */
      parameters: {
        path: {
          roleId: string;
          profile: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/permission-roles/{roleId}/profiles": {
    /**
     * Get role members 
     * @description {
     *   "text": "Get list of profiles with the specified role"
     * }
     */
    get: {
      /**
       * Get role members 
       * @description {
       *   "text": "Get list of profiles with the specified role"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          roleId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["TD_MemberProfile"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/permission-roles/{roleId}/teams/{team}": {
    /**
     * Add role team 
     * @description {
     *   "text": "Assign permission role to the team"
     * }
     */
    post: {
      /**
       * Add role team 
       * @description {
       *   "text": "Assign permission role to the team"
       * }
       */
      parameters: {
        path: {
          roleId: string;
          team: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Remove role team 
     * @description {
     *   "text": "Remove permission role from the team"
     * }
     */
    delete: {
      /**
       * Remove role team 
       * @description {
       *   "text": "Remove permission role from the team"
       * }
       */
      parameters: {
        path: {
          roleId: string;
          team: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/permission-roles/{roleId}/teams": {
    /**
     * Get role teams 
     * @description {
     *   "text": "Get list of teams with the specified role"
     * }
     */
    get: {
      /**
       * Get role teams 
       * @description {
       *   "text": "Get list of teams with the specified role"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          roleId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["TD_Team"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/permissions/check-permission": {
    /** Check permission */
    post: {
      /** Check permission */
      requestBody: {
        content: {
          "application/json": {
            principal: components["schemas"]["PrincipalIn"];
            uniqueRightCode: components["schemas"]["PermissionIdentifier"];
            target: components["schemas"]["PermissionTarget"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": boolean;
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/permissions": {
    /**
     * Get all permissions 
     * @description {
     *   "text": ""
     * }
     */
    get: {
      /**
       * Get all permissions 
       * @description {
       *   "text": ""
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["DTO_RightsWithHierarchy"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects": {
    /**
     * Get all projects 
     * @description {
     *   "text": "Get/search all projects. Parameters are applied as 'AND' filters."
     * }
     */
    get: {
      /**
       * Get all projects 
       * @description {
       *   "text": "Get/search all projects. Parameters are applied as 'AND' filters."
       * }
       */
      parameters?: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          term?: string | null;
          tag?: string | null;
          starred?: boolean | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["PR_Project"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Create project 
     * @description {
     *   "text": "Create a new project"
     * }
     */
    post: {
      /**
       * Create project 
       * @description {
       *   "text": "Create a new project"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            key: components["schemas"]["ProjectKey"];
            name: string;
            description?: string | null;
            /** @default false */
            private?: boolean;
            /** @default [] */
            tags?: (string)[];
            icon?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["PR_Project"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/collaborator:{profile}": {
    /**
     * Get all projects by collaborator 
     * @deprecated 
     * @description {
     *   "text": "Get all projects in which given user is a collaborator"
     * }
     */
    get: {
      /**
       * Get all projects by collaborator 
       * @deprecated 
       * @description {
       *   "text": "Get all projects in which given user is a collaborator"
       * }
       */
      parameters: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
        path: {
          profile: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["PR_Project"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/member:{member}": {
    /**
     * Get all projects by member 
     * @description {
     *   "text": "Get all projects for a member"
     * }
     */
    get: {
      /**
       * Get all projects by member 
       * @description {
       *   "text": "Get all projects for a member"
       * }
       */
      parameters: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
        path: {
          member: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["PR_Project"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/right-code:{rightCode}": {
    /**
     * Get all projects with right 
     * @description {
     *   "text": ""
     * }
     */
    get: {
      /**
       * Get all projects with right 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          term?: string | null;
          path?: string | null;
          starred?: boolean | null;
          $fields?: string;
        };
        path: {
          rightCode: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["PR_Project"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/right-unique-code:{right}": {
    /**
     * Get all projects with right code 
     * @description {
     *   "text": ""
     * }
     */
    get: {
      /**
       * Get all projects with right code 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          term?: string | null;
          path?: string | null;
          starred?: boolean | null;
          private?: boolean | null;
          $fields?: string;
        };
        path: {
          right: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["PR_Project"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/team:{team}": {
    /**
     * Get all projects by team 
     * @description {
     *   "text": "Get all projects for a team"
     * }
     */
    get: {
      /**
       * Get all projects by team 
       * @description {
       *   "text": "Get all projects for a team"
       * }
       */
      parameters: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
        path: {
          team: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["PR_Project"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}": {
    /**
     * Get project 
     * @description {
     *   "text": "Get project by ID or project key"
     * }
     */
    get: {
      /**
       * Get project 
       * @description {
       *   "text": "Get project by ID or project key"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["PR_Project"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Delete project 
     * @description {
     *   "text": "Delete a project"
     * }
     */
    delete: {
      /**
       * Delete project 
       * @description {
       *   "text": "Delete a project"
       * }
       */
      parameters: {
        path: {
          project: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Update project 
     * @description {
     *   "text": "Update an existing project. Optional parameters will be ignored when not specified and updated otherwise."
     * }
     */
    patch: {
      /**
       * Update project 
       * @description {
       *   "text": "Update an existing project. Optional parameters will be ignored when not specified and updated otherwise."
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            key?: components["schemas"]["ProjectKey"];
            name?: string | null;
            description?: string | null;
            private?: boolean | null;
            tags?: (string)[] | null;
            icon?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["PR_Project"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/automation/deployment-targets/search": {
    /** search */
    post: {
      /** search */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            expression: components["schemas"]["DeployTargetsSearchExpression"];
            batchInfo?: components["schemas"]["BatchInfo"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["DeployTargetRecord"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/automation/deployment-targets": {
    /** Get all deployment targets */
    get: {
      /** Get all deployment targets */
      parameters?: {
        query?: {
          project?: string | null;
          search?: string | null;
          customFilters?: (string)[] | null;
          sortBy?: string | null;
          sortOrder?: components["schemas"]["ColumnSortOrder"];
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["DeployTargetRecord"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/automation/deployment-targets/{fullNumberId}": {
    /** Get deployment target by full number id */
    get: {
      /** Get deployment target by full number id */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          fullNumberId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["DeployTargetRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/automation/deployment-targets/audit-log": {
    /** Get audit messages */
    get: {
      /** Get audit messages */
      parameters: {
        query: {
          targetIdentifier: string;
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["DeployTargetAuditLogEntry"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/automation/dsl-evaluations/config": {
    /** Get DSL evaluation configuration */
    get: {
      /** Get DSL evaluation configuration */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["DslEvaluationConfig"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/automation/graph-executions/{id}/stop": {
    /**
     * Stop execution 
     * @description {
     *   "text": "Stop execution by ExecutionId"
     * }
     */
    post: {
      /**
       * Stop execution 
       * @description {
       *   "text": "Stop execution by ExecutionId"
       * }
       */
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/automation/graph-executions/{id}": {
    /** Get graph execution */
    get: {
      /** Get graph execution */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["JobExecutionDTO"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/automation/job-executions/current": {
    /**
     * Get current 
     * @deprecated 
     * @description {
     *   "text": "Returns the job execution associated to the currently authenticated principal. This endpoint can only be used with the credentials provided to an Automation job."
     * }
     */
    get: {
      /**
       * Get current 
       * @deprecated 
       * @description {
       *   "text": "Returns the job execution associated to the currently authenticated principal. This endpoint can only be used with the credentials provided to an Automation job."
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["JobExecutionDTO"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/automation/jobs/{jobId}": {
    /** Get job */
    get: {
      /** Get job */
      parameters: {
        query: {
          project: string;
          $fields?: string;
        };
        path: {
          jobId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["JobDTO"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/automation/step-executions/used-parameters/param/{parameterId}": {
    /** Get param */
    get: {
      /** Get param */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          parameterId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["ParameterLastUsageDTO"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/automation/step-executions/used-parameters/secret/{secretId}": {
    /** Get secret */
    get: {
      /** Get secret */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          secretId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["ParameterLastUsageDTO"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/automation/step-executions/{stepExecId}/parameters/{key}": {
    /** Get parameter */
    get: {
      /** Get parameter */
      parameters: {
        path: {
          stepExecId: string;
          key: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": string | null;
          };
        };
        default: components["responses"]["default"];
      };
    };
    /** Update parameter */
    patch: {
      /** Update parameter */
      parameters: {
        path: {
          stepExecId: string;
          key: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            value: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/automation/step-executions/{stepExecId}/secrets/{key}/set-reference": {
    /** Update set reference */
    patch: {
      /** Update set reference */
      parameters: {
        path: {
          stepExecId: string;
          key: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            reference: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/automation/subscriptions/legacy-channels": {
    /**
     * Delete legacy channels 
     * @description {
     *   "text": "Delete the legacy subscription channels matching the given filters (applied as AND). If no filter is provided, all subscription channels corresponding to unsubscribed jobs for the logged in user are deleted."
     * }
     */
    delete: {
      /**
       * Delete legacy channels 
       * @description {
       *   "text": "Delete the legacy subscription channels matching the given filters (applied as AND). If no filter is provided, all subscription channels corresponding to unsubscribed jobs for the logged in user are deleted."
       * }
       */
      parameters?: {
        query?: {
          project?: string | null;
          jobId?: string | null;
          unsubscribedOnly?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/params/{id}": {
    /**
     * Delete param 
     * @description {
     *   "text": "Delete a project parameter"
     * }
     */
    delete: {
      /**
       * Delete param 
       * @description {
       *   "text": "Delete a project parameter"
       * }
       */
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Update param 
     * @description {
     *   "text": "Update a project parameter"
     * }
     */
    patch: {
      /**
       * Update param 
       * @description {
       *   "text": "Update a project parameter"
       * }
       */
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            value: string;
            description?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/params/default-bundle": {
    /**
     * Get all default bundle 
     * @description {
     *   "text": "List project parameters in a parameter bundle"
     * }
     */
    get: {
      /**
       * Get all default bundle 
       * @description {
       *   "text": "List project parameters in a parameter bundle"
       * }
       */
      parameters: {
        query: {
          project: string;
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["PlainParameterRecord"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Create default bundle 
     * @description {
     *   "text": "Create a new project parameter in the default parameter bundle"
     * }
     */
    post: {
      /**
       * Create default bundle 
       * @description {
       *   "text": "Create a new project parameter in the default parameter bundle"
       * }
       */
      requestBody: {
        content: {
          "application/json": {
            project: components["schemas"]["ProjectIdentifier"];
            key: string;
            value: string;
            description?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": string;
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/params/in-default-bundle": {
    /**
     * Get all in default bundle 
     * @deprecated 
     * @description {
     *   "text": "List project parameters in a parameter bundle"
     * }
     */
    get: {
      /**
       * Get all in default bundle 
       * @deprecated 
       * @description {
       *   "text": "List project parameters in a parameter bundle"
       * }
       */
      parameters: {
        query: {
          projectId: string;
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["PlainParameterRecord"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Create in default bundle 
     * @deprecated
     */
    post: {
      /**
       * Create in default bundle 
       * @deprecated
       */
      requestBody: {
        content: {
          "application/json": {
            projectId: string;
            key: string;
            value: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": string;
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/planning/boards/{board}": {
    /**
     * Get board 
     * @description {
     *   "text": "Get a board by identifier"
     * }
     */
    get: {
      /**
       * Get board 
       * @description {
       *   "text": "Get a board by identifier"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          board: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["BoardRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Delete board 
     * @description {
     *   "text": "Delete an existing board. This operation can be performed by board owners or other members who are granted permission to manage boards in a project."
     * }
     */
    delete: {
      /**
       * Delete board 
       * @description {
       *   "text": "Delete an existing board. This operation can be performed by board owners or other members who are granted permission to manage boards in a project."
       * }
       */
      parameters: {
        path: {
          board: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Update board 
     * @description {
     *   "text": "Update an existing board. This operation can be performed by board owners or other members who are granted permission to manage boards in a project."
     * }
     */
    patch: {
      /**
       * Update board 
       * @description {
       *   "text": "Update an existing board. This operation can be performed by board owners or other members who are granted permission to manage boards in a project."
       * }
       */
      parameters: {
        path: {
          board: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            name?: string | null;
            description?: string | null;
            swimlaneKey?: string | null;
            columns?: components["schemas"]["BoardColumns"];
            issueFields?: (components["schemas"]["BoardIssueInputField"])[] | null;
            memberOwners?: (string)[] | null;
            teamOwners?: (string)[] | null;
            backlogType?: components["schemas"]["BacklogTypeIn"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/planning/boards/sprints": {
    /**
     * Create sprint 
     * @description {
     *   "text": "Create a new sprint in a board. This operation can be performed by board owners or other members who are granted permission to manage boards in a project."
     * }
     */
    post: {
      /**
       * Create sprint 
       * @description {
       *   "text": "Create a new sprint in a board. This operation can be performed by board owners or other members who are granted permission to manage boards in a project."
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            board: components["schemas"]["BoardIdentifier"];
            name: string;
            description?: string | null;
            /** Format: full-date */
            from: string;
            /** Format: full-date */
            to: string;
            launch?: components["schemas"]["SprintLaunch"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["SprintRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/planning/boards/sprints/{sprint}/launch": {
    /**
     * Launch planned sprint 
     * @description {
     *   "text": "Launch a planned sprint. This operation can be performed by board owners or other members who are granted permission to manage boards in a project."
     * }
     */
    post: {
      /**
       * Launch planned sprint 
       * @description {
       *   "text": "Launch a planned sprint. This operation can be performed by board owners or other members who are granted permission to manage boards in a project."
       * }
       */
      parameters: {
        path: {
          sprint: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            moveUnresolvedIssuesFromCurrentSprint: boolean;
            /** @default true */
            notifySubscribers?: boolean;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/planning/boards/sprints/{sprint}": {
    /**
     * Update sprint 
     * @description {
     *   "text": "Update an existing sprint in a board. This operation can be performed by board owners or other members who are granted permission to manage boards in a project."
     * }
     */
    patch: {
      /**
       * Update sprint 
       * @description {
       *   "text": "Update an existing sprint in a board. This operation can be performed by board owners or other members who are granted permission to manage boards in a project."
       * }
       */
      parameters: {
        path: {
          sprint: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            name?: string | null;
            description?: string | null;
            /** Format: full-date */
            from?: string | null;
            /** Format: full-date */
            to?: string | null;
            launch?: components["schemas"]["SprintLaunch"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/planning/boards/sprints/{sprint}/archive": {
    /**
     * Archive sprint 
     * @description {
     *   "text": "Archive closed or planned sprint. This operation can be performed by board owners or other members who are granted permission to manage boards in a project."
     * }
     */
    delete: {
      /**
       * Archive sprint 
       * @description {
       *   "text": "Archive closed or planned sprint. This operation can be performed by board owners or other members who are granted permission to manage boards in a project."
       * }
       */
      parameters: {
        path: {
          sprint: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/planning/boards/sprints/{sprint}/issues/{issue}": {
    /**
     * Add issue to sprint 
     * @description {
     *   "text": "Add an existing issue in a project to a sprint"
     * }
     */
    post: {
      /**
       * Add issue to sprint 
       * @description {
       *   "text": "Add an existing issue in a project to a sprint"
       * }
       */
      parameters: {
        path: {
          issue: string;
          sprint: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Remove issue from sprint 
     * @description {
     *   "text": "Remove an existing issue in a project from a sprint."
     * }
     */
    delete: {
      /**
       * Remove issue from sprint 
       * @description {
       *   "text": "Remove an existing issue in a project from a sprint."
       * }
       */
      parameters: {
        path: {
          issue: string;
          sprint: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/planning/boards/sprints/{sprint}/issues": {
    /**
     * Get all issues in sprint 
     * @description {
     *   "text": "Fetch issues from an existing non-archived sprint"
     * }
     */
    get: {
      /**
       * Get all issues in sprint 
       * @description {
       *   "text": "Fetch issues from an existing non-archived sprint"
       * }
       */
      parameters: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          unresolvedOnly?: boolean;
          $fields?: string;
        };
        path: {
          sprint: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["Issue"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/planning/boards/{board}/issues/{issue}": {
    /**
     * Add issue to board 
     * @description {
     *   "text": "Add an existing issue in a project to a board or its current sprint"
     * }
     */
    post: {
      /**
       * Add issue to board 
       * @description {
       *   "text": "Add an existing issue in a project to a board or its current sprint"
       * }
       */
      parameters: {
        path: {
          issue: string;
          board: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Remove issue from board 
     * @description {
     *   "text": "Remove an existing issue in a project from a board or all of its sprints"
     * }
     */
    delete: {
      /**
       * Remove issue from board 
       * @description {
       *   "text": "Remove an existing issue in a project from a board or all of its sprints"
       * }
       */
      parameters: {
        path: {
          issue: string;
          board: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/planning/boards/{board}/issues": {
    /**
     * Get all issues on board 
     * @description {
     *   "text": "Fetch issues from the board across all its non-archived sprints"
     * }
     */
    get: {
      /**
       * Get all issues on board 
       * @description {
       *   "text": "Fetch issues from the board across all its non-archived sprints"
       * }
       */
      parameters: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
        path: {
          board: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["Issue"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/private-projects/{project}/request-access": {
    /**
     * Request access to project 
     * @description {
     *   "text": "Request access to a project"
     * }
     */
    post: {
      /**
       * Request access to project 
       * @description {
       *   "text": "Request access to a project"
       * }
       */
      parameters: {
        path: {
          project: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/private-projects": {
    /**
     * Get all private projects 
     * @description {
     *   "text": "List private projects in the current organization"
     * }
     */
    get: {
      /**
       * Get all private projects 
       * @description {
       *   "text": "List private projects in the current organization"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["PR_PrivateProject"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/repositories/find": {
    /**
     * Find Repositories 
     * @description {
     *   "text": "Find repositories by name substring."
     * }
     */
    get: {
      /**
       * Find Repositories 
       * @description {
       *   "text": "Find repositories by name substring."
       * }
       */
      parameters: {
        query: {
          $skip?: string | null;
          $top?: number | null;
          term: string;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["RepositoryDetails"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/responsibilities": {
    /**
     * Add responsibility 
     * @description {
     *   "text": "Add a responsibility for a given subject ID"
     * }
     */
    post: {
      /**
       * Add responsibility 
       * @description {
       *   "text": "Add a responsibility for a given subject ID"
       * }
       */
      requestBody: {
        content: {
          "application/json": {
            subjectId: string;
            summary: string;
            notes?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": string;
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/responsibilities/{responsibilityId}": {
    /**
     * Delete responsibility 
     * @description {
     *   "text": "Delete an existing responsibility"
     * }
     */
    delete: {
      /**
       * Delete responsibility 
       * @description {
       *   "text": "Delete an existing responsibility"
       * }
       */
      parameters: {
        path: {
          responsibilityId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Update responsibility 
     * @description {
     *   "text": "Edit an existing responsibility"
     * }
     */
    patch: {
      /**
       * Update responsibility 
       * @description {
       *   "text": "Edit an existing responsibility"
       * }
       */
      parameters: {
        path: {
          responsibilityId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            summary: string;
            notes?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/responsibilities/subjects/{subjectId}": {
    /**
     * Delete responsibility subject 
     * @description {
     *   "text": "Delete an existing responsibility subject for a given project ID"
     * }
     */
    delete: {
      /**
       * Delete responsibility subject 
       * @description {
       *   "text": "Delete an existing responsibility subject for a given project ID"
       * }
       */
      parameters: {
        query?: {
          project?: string | null;
        };
        path: {
          subjectId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/secrets/{id}": {
    /**
     * Delete secret 
     * @description {
     *   "text": "Delete an existing project secret"
     * }
     */
    delete: {
      /**
       * Delete secret 
       * @description {
       *   "text": "Delete an existing project secret"
       * }
       */
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Update secret 
     * @description {
     *   "text": "Update an existing project secret"
     * }
     */
    patch: {
      /**
       * Update secret 
       * @description {
       *   "text": "Update an existing project secret"
       * }
       */
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            valueBase64?: string | null;
            publicKeyId?: string | null;
            description?: string | null;
            secretReference?: string | null;
            protected?: boolean | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/secrets/default-bundle": {
    /**
     * Get all default bundle 
     * @description {
     *   "text": "List project secrets in a parameter bundle"
     * }
     */
    get: {
      /**
       * Get all default bundle 
       * @description {
       *   "text": "List project secrets in a parameter bundle"
       * }
       */
      parameters: {
        query: {
          project: string;
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["SecretParameterRecord"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Create default bundle 
     * @description {
     *   "text": "Create a new project secret. The secret value should be provided either as a base64-encoded value in [valueBase64], or as a reference to another secret in [secretReference]."
     * }
     */
    post: {
      /**
       * Create default bundle 
       * @description {
       *   "text": "Create a new project secret. The secret value should be provided either as a base64-encoded value in [valueBase64], or as a reference to another secret in [secretReference]."
       * }
       */
      requestBody: {
        content: {
          "application/json": {
            project: components["schemas"]["ProjectIdentifier"];
            key: string;
            valueBase64?: string | null;
            publicKeyId?: string | null;
            description?: string | null;
            secretReference?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": string;
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/secrets/in-default-bundle": {
    /**
     * Get all in default bundle 
     * @deprecated
     */
    get: {
      /**
       * Get all in default bundle 
       * @deprecated
       */
      parameters: {
        query: {
          projectId: string;
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["SecretParameterRecord"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Create in default bundle 
     * @deprecated
     */
    post: {
      /**
       * Create in default bundle 
       * @deprecated
       */
      requestBody: {
        content: {
          "application/json": {
            projectId: string;
            key: string;
            valueBase64: string;
            publicKeyId?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": string;
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/tags/track-access": {
    /**
     * Track tag access 
     * @description {
     *   "text": "Track a tag has been accessed"
     * }
     */
    post: {
      /**
       * Track tag access 
       * @description {
       *   "text": "Track a tag has been accessed"
       * }
       */
      requestBody: {
        content: {
          "application/json": {
            tag: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/tags": {
    /**
     * Get all tags 
     * @description {
     *   "text": "List all tags, mapped to the number of projects they are used in"
     * }
     */
    get: {
      /**
       * Get all tags 
       * @description {
       *   "text": "List all tags, mapped to the number of projects they are used in"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["PR_Tag"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/vault": {
    /**
     * Get vault 
     * @description {
     *   "text": "Get an existing Vault connections for project"
     * }
     */
    get: {
      /**
       * Get vault 
       * @description {
       *   "text": "Get an existing Vault connections for project"
       * }
       */
      parameters: {
        query: {
          project: string;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["VaultConnectionRecord"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Create vault 
     * @description {
     *   "text": "Create a new Vault connection for the project. Vault's AppRole Secret Id must be provided as base64 encoded string"
     * }
     */
    post: {
      /**
       * Create vault 
       * @description {
       *   "text": "Create a new Vault connection for the project. Vault's AppRole Secret Id must be provided as base64 encoded string"
       * }
       */
      requestBody: {
        content: {
          "application/json": {
            project: components["schemas"]["ProjectIdentifier"];
            url: string;
            name: string;
            namespace?: string | null;
            vaultNamespace?: string | null;
            appRoleEndpointPath: string;
            appRoleId: string;
            appRoleSecretIdBase64: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": string;
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/vault/{id}": {
    /**
     * Delete vault 
     * @description {
     *   "text": "Delete an existing Vault connection"
     * }
     */
    delete: {
      /**
       * Delete vault 
       * @description {
       *   "text": "Delete an existing Vault connection"
       * }
       */
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Update vault 
     * @description {
     *   "text": "Update an existing Vault connection"
     * }
     */
    patch: {
      /**
       * Update vault 
       * @description {
       *   "text": "Update an existing Vault connection"
       * }
       */
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            url: string;
            name: string;
            namespace?: string | null;
            vaultNamespace?: string | null;
            appRoleEndpointPath: string;
            appRoleId: string;
            appRoleSecretIdBase64?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/access/admins": {
    /**
     * Get all admins 
     * @description {
     *   "text": "Returns the list of all project administrators"
     * }
     */
    get: {
      /**
       * Get all admins 
       * @description {
       *   "text": "Returns the list of all project administrators"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["TD_MemberProfile"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/access/admins/profiles": {
    /**
     * Add administrator 
     * @description {
     *   "text": "Add a member as administrator to a project"
     * }
     */
    post: {
      /**
       * Add administrator 
       * @description {
       *   "text": "Add a member as administrator to a project"
       * }
       */
      parameters: {
        path: {
          project: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            profile: components["schemas"]["ProfileIdentifier"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/access/admins/profiles/{profile}": {
    /**
     * Remove administrator 
     * @description {
     *   "text": "Remove a member as administrator from a project"
     * }
     */
    delete: {
      /**
       * Remove administrator 
       * @description {
       *   "text": "Remove a member as administrator from a project"
       * }
       */
      parameters: {
        path: {
          project: string;
          profile: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/access/admins/teams": {
    /**
     * Add Administrators team 
     * @description {
     *   "text": "Add a team as administrators to a project"
     * }
     */
    post: {
      /**
       * Add Administrators team 
       * @description {
       *   "text": "Add a team as administrators to a project"
       * }
       */
      parameters: {
        path: {
          project: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            teamId: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/access/admins/teams/{teamId}": {
    /**
     * Remove Administrators team 
     * @description {
     *   "text": "Remove a team as administrators from a project"
     * }
     */
    delete: {
      /**
       * Remove Administrators team 
       * @description {
       *   "text": "Remove a team as administrators from a project"
       * }
       */
      parameters: {
        path: {
          project: string;
          teamId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/access/collaborators": {
    /**
     * Get all collaborators' profiles 
     * @deprecated
     */
    get: {
      /**
       * Get all collaborators' profiles 
       * @deprecated
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["TD_MemberProfile"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/access/collaborators/profiles": {
    /**
     * Get all individual collaborators 
     * @deprecated
     */
    get: {
      /**
       * Get all individual collaborators 
       * @deprecated
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["TD_MemberProfile"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Add a collaborator 
     * @deprecated
     */
    post: {
      /**
       * Add a collaborator 
       * @deprecated
       */
      parameters: {
        path: {
          project: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            profile: components["schemas"]["ProfileIdentifier"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Remove a collaborator 
     * @deprecated
     */
    delete: {
      /**
       * Remove a collaborator 
       * @deprecated
       */
      parameters: {
        query: {
          profile: string;
        };
        path: {
          project: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/access/collaborators/teams": {
    /**
     * Get all collaborators' teams 
     * @deprecated
     */
    get: {
      /**
       * Get all collaborators' teams 
       * @deprecated
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["TD_Team"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Add a collaborators' team 
     * @deprecated
     */
    post: {
      /**
       * Add a collaborators' team 
       * @deprecated
       */
      parameters: {
        path: {
          project: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            teamId: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Remove a collaborators' team 
     * @deprecated
     */
    delete: {
      /**
       * Remove a collaborators' team 
       * @deprecated
       */
      parameters: {
        query: {
          teamId: string;
        };
        path: {
          project: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/access/member-profiles": {
    /**
     * Get all member profiles 
     * @description {
     *   "text": "Get project members for a given project key"
     * }
     */
    get: {
      /**
       * Get all member profiles 
       * @description {
       *   "text": "Get project members for a given project key"
       * }
       */
      parameters: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          query?: string;
          includingAdmins?: boolean;
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["TD_MemberProfile"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/access/members/profiles": {
    /**
     * Add member 
     * @description {
     *   "text": "Add a member to a project"
     * }
     */
    post: {
      /**
       * Add member 
       * @description {
       *   "text": "Add a member to a project"
       * }
       */
      parameters: {
        path: {
          project: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            profile: components["schemas"]["ProfileIdentifier"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/access/members/profiles/{profile}": {
    /**
     * Remove member 
     * @description {
     *   "text": "Remove a member from a project"
     * }
     */
    delete: {
      /**
       * Remove member 
       * @description {
       *   "text": "Remove a member from a project"
       * }
       */
      parameters: {
        path: {
          project: string;
          profile: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/access/members/teams/{teamId}": {
    /**
     * Remove team 
     * @description {
     *   "text": "Remove a team from a project"
     * }
     */
    delete: {
      /**
       * Remove team 
       * @description {
       *   "text": "Remove a team from a project"
       * }
       */
      parameters: {
        path: {
          project: string;
          teamId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/access/viewers": {
    /**
     * Organization profiles that can view the project 
     * @description {
     *   "text": "Get organization members who can view a project"
     * }
     */
    get: {
      /**
       * Organization profiles that can view the project 
       * @description {
       *   "text": "Get organization members who can view a project"
       * }
       */
      parameters: {
        query: {
          $skip?: string | null;
          $top?: number | null;
          term: string;
          meOnTop?: boolean;
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["TD_MemberProfile"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/automation/deployment-targets": {
    /**
     * Get all deployment targets 
     * @deprecated
     */
    get: {
      /**
       * Get all deployment targets 
       * @deprecated
       */
      parameters: {
        query?: {
          search?: string | null;
          customFilters?: (string)[] | null;
          showArchived?: boolean | null;
          sortBy?: string | null;
          sortOrder?: components["schemas"]["ColumnSortOrder"];
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["DeployTargetRecord"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
    /** Create deployment target */
    post: {
      /** Create deployment target */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            key: string;
            name: string;
            description: string;
            /** @default [] */
            repositories?: (components["schemas"]["DeployTargetRepositoryDTO"])[];
            manualControl?: boolean | null;
            singleScheduled?: boolean | null;
            /** Format: int32 */
            hangTimeoutMinutes?: number | null;
            /** Format: int32 */
            failTimeoutMinutes?: number | null;
            responsibleUsers?: (string)[] | null;
            responsibleTeams?: (string)[] | null;
            links?: (components["schemas"]["DeployTargetLink"])[] | null;
            customFields?: (components["schemas"]["CustomFieldInputValue"])[] | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["DeployTargetRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/automation/deployment-targets/favorites": {
    /** List Favorites */
    get: {
      /** List Favorites */
      parameters: {
        query?: {
          sortBy?: string | null;
          sortOrder?: components["schemas"]["ColumnSortOrder"];
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["DeployTargetRecord"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/automation/deployment-targets/{target}": {
    /** Get deployment target */
    get: {
      /** Get deployment target */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
          target: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["DeployTargetRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /** Delete deployment target */
    delete: {
      /** Delete deployment target */
      parameters: {
        path: {
          project: string;
          target: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /** Update deployment target */
    patch: {
      /** Update deployment target */
      parameters: {
        path: {
          project: string;
          target: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            name?: string | null;
            description?: string | null;
            repositories?: (components["schemas"]["DeployTargetRepositoryDTO"])[] | null;
            manualControl?: boolean | null;
            singleScheduled?: boolean | null;
            /** Format: int32 */
            hangTimeoutMinutes?: number | null;
            /** Format: int32 */
            failTimeoutMinutes?: number | null;
            responsibleUsers?: (string)[] | null;
            responsibleTeams?: (string)[] | null;
            links?: (components["schemas"]["DeployTargetLink"])[] | null;
            customFields?: (components["schemas"]["CustomFieldInputValue"])[] | null;
            key?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/automation/deployments/fail": {
    /** Fail deployment */
    post: {
      /** Fail deployment */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            targetIdentifier: components["schemas"]["TargetIdentifier"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["DeploymentRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/automation/deployments/finish": {
    /** Finish deployment */
    post: {
      /** Finish deployment */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            targetIdentifier: components["schemas"]["TargetIdentifier"];
            deploymentIdentifier?: components["schemas"]["DeploymentIdentifier"];
            version?: string | null;
            description?: string | null;
            commitRefs?: (components["schemas"]["DeploymentCommitReference"])[] | null;
            externalLink?: components["schemas"]["ExternalLink"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["DeploymentRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/automation/deployments/schedule": {
    /** Schedule deployment */
    post: {
      /** Schedule deployment */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            targetIdentifier: components["schemas"]["TargetIdentifier"];
            version?: string | null;
            /** Format: date-time */
            scheduledStart?: string | null;
            description?: string | null;
            commitRefs?: (components["schemas"]["DeploymentCommitReference"])[] | null;
            externalLink?: components["schemas"]["ExternalLink"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["DeploymentRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/automation/deployments/start": {
    /** Start deployment */
    post: {
      /** Start deployment */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            targetIdentifier: components["schemas"]["TargetIdentifier"];
            deploymentIdentifier?: components["schemas"]["DeploymentIdentifier"];
            version?: string | null;
            description?: string | null;
            commitRefs?: (components["schemas"]["DeploymentCommitReference"])[] | null;
            externalLink?: components["schemas"]["ExternalLink"];
            /** @default false */
            syncWithAutomationJob?: boolean;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["DeploymentRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/automation/deployments": {
    /** Get all deployments */
    get: {
      /** Get all deployments */
      parameters: {
        query?: {
          targetIdentifier?: string | null;
          jobExecutionId?: string | null;
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["DeploymentRecord"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
    /** Update deployment */
    patch: {
      /** Update deployment */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            targetIdentifier: components["schemas"]["TargetIdentifier"];
            deploymentIdentifier: components["schemas"]["DeploymentIdentifier"];
            version?: string | null;
            /** Format: date-time */
            scheduledStart?: string | null;
            description?: string | null;
            commitRefs?: (components["schemas"]["DeploymentCommitReference"])[] | null;
            externalLink?: components["schemas"]["ExternalLink"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["DeploymentRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/automation/deployments/{targetIdentifier}/{deploymentIdentifier}": {
    /** Get deployment */
    get: {
      /** Get deployment */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
          targetIdentifier: string;
          deploymentIdentifier: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["DeploymentRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /** Delete deployment */
    delete: {
      /** Delete deployment */
      parameters: {
        path: {
          project: string;
          targetIdentifier: string;
          deploymentIdentifier: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/automation/graph-executions": {
    /**
     * Get all graph executions 
     * @description {
     *   "text": "Search executions. Parameters are applied as 'AND' filters."
     * }
     */
    get: {
      /**
       * Get all graph executions 
       * @description {
       *   "text": "Search executions. Parameters are applied as 'AND' filters."
       * }
       */
      parameters: {
        query: {
          jobId: string;
          branchFilter?: string | null;
          statusFilter?: components["schemas"]["ExecutionStatus"];
          jobTriggerFilter?: components["schemas"]["JobTriggerType"];
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["JobExecutionDTO"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/automation/jobs/{jobId}/start": {
    /**
     * Start job 
     * @description {
     *   "text": "Start job. Returns ExecutionId, see projects/automation/graph-executions/{id}."
     * }
     */
    post: {
      /**
       * Start job 
       * @description {
       *   "text": "Start job. Returns ExecutionId, see projects/automation/graph-executions/{id}."
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
          jobId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            branch: components["schemas"]["Branch"];
            parameters?: (components["schemas"]["JobParameter"])[] | null;
            checkoutRevisions?: (components["schemas"]["CheckoutRevisionDTO"])[] | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["LaunchResult"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/automation/jobs": {
    /**
     * Get all jobs 
     * @description {
     *   "text": "List jobs. Parameters are applied as 'AND' filters."
     * }
     */
    get: {
      /**
       * Get all jobs 
       * @description {
       *   "text": "List jobs. Parameters are applied as 'AND' filters."
       * }
       */
      parameters: {
        query: {
          repoFilter: string;
          branchFilter: string;
          trigger?: components["schemas"]["JobTriggerType"];
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["JobDTO"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/code-reviews/code-issues-feedback": {
    /** Get user feedback on code issues */
    post: {
      /** Get user feedback on code issues */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            reviewId?: components["schemas"]["ReviewIdentifier"];
            tool: string;
            batchInfo: components["schemas"]["BatchInfo"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["CodeIssueFeedback"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/code-reviews/commit-set-review": {
    /** Create review based on commit set */
    post: {
      /** Create review based on commit set */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            repository: string;
            revisions: (string)[];
            title?: string | null;
            authorProfileIds?: (string)[] | null;
            files?: components["schemas"]["FileSetInReview"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["CommitSetReviewRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/code-reviews/merge-requests": {
    /**
     * Create merge request 
     * @description {
     *   "text": ""
     * }
     */
    post: {
      /**
       * Create merge request 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            repository: string;
            sourceBranch: string;
            targetBranch: string;
            title: string;
            description?: string | null;
            reviewers?: (components["schemas"]["ReviewerParam"])[] | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["MergeRequestRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/code-reviews": {
    /**
     * Get all code reviews 
     * @description {
     *   "text": ""
     * }
     */
    get: {
      /**
       * Get all code reviews 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          state?: components["schemas"]["CodeReviewStateFilter"];
          text?: string | null;
          author?: string | null;
          from?: string | null;
          to?: string | null;
          sort?: components["schemas"]["ReviewSorting"];
          reviewer?: string | null;
          type?: components["schemas"]["ReviewType"];
          repository?: string | null;
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["CodeReviewWithCount"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/code-reviews/{reviewId}": {
    /**
     * Get code review 
     * @description {
     *   "text": ""
     * }
     */
    get: {
      /**
       * Get code review 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
          reviewId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["CodeReviewRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/code-reviews/{reviewId}/details": {
    /**
     * Get review details 
     * @description {
     *   "text": ""
     * }
     */
    get: {
      /**
       * Get review details 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
          reviewId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["CodeReviewDetailedInfo"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/code-reviews/{reviewId}/files": {
    /**
     * Get the modified files in code review 
     * @description {
     *   "text": "List files changed in commits under code review"
     * }
     */
    get: {
      /**
       * Get the modified files in code review 
       * @description {
       *   "text": "List files changed in commits under code review"
       * }
       */
      parameters: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
        path: {
          project: string;
          reviewId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["ChangeInReview"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/code-reviews/{reviewId}/merge-files": {
    /**
     * Get the Merge Request files 
     * @description {
     *   "text": "List files in merge request which will be merged into target branch"
     * }
     */
    get: {
      /**
       * Get the Merge Request files 
       * @description {
       *   "text": "List files in merge request which will be merged into target branch"
       * }
       */
      parameters: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
        path: {
          project: string;
          reviewId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["GitMergedFile"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/code-reviews/{reviewId}/suggested-reviewers": {
    /**
     * Get suggested reviewers 
     * @description {
     *   "text": ""
     * }
     */
    get: {
      /**
       * Get suggested reviewers 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
          reviewId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["TD_MemberProfile"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/code-reviews/{reviewId}/description": {
    /**
     * Edit review description 
     * @description {
     *   "text": ""
     * }
     */
    patch: {
      /**
       * Edit review description 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        path: {
          project: string;
          reviewId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            description: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/code-reviews/{reviewId}/make-read-only": {
    /**
     * Make review read-only 
     * @description {
     *   "text": ""
     * }
     */
    patch: {
      /**
       * Make review read-only 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        path: {
          project: string;
          reviewId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/code-reviews/{reviewId}/state": {
    /**
     * Edit review state 
     * @description {
     *   "text": ""
     * }
     */
    patch: {
      /**
       * Edit review state 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        path: {
          project: string;
          reviewId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            state: components["schemas"]["CodeReviewState"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/code-reviews/{reviewId}/title": {
    /**
     * Edit review title 
     * @description {
     *   "text": ""
     * }
     */
    patch: {
      /**
       * Edit review title 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        path: {
          project: string;
          reviewId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            title: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/code-reviews/{reviewId}/merge": {
    /** Merge a merge request */
    put: {
      /** Merge a merge request */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
          reviewId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            deleteSourceBranch: boolean;
            mergeMode: components["schemas"]["GitMergeMode"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GitMergeResultHttp"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/code-reviews/{reviewId}/rebase": {
    /** Rebase a merge request */
    put: {
      /** Rebase a merge request */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
          reviewId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            deleteSourceBranch: boolean;
            rebaseMode: components["schemas"]["GitRebaseMode"];
            squash: boolean;
            squashedCommitMessage?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GitRebaseResultHttp"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/code-reviews/code-discussions": {
    /**
     * Create code discussion 
     * @description {
     *   "text": ""
     * }
     */
    post: {
      /**
       * Create code discussion 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            text: string;
            attachments?: (components["schemas"]["AttachmentIn"])[] | null;
            diffContext?: components["schemas"]["DiffContext"];
            repository: string;
            revision?: string | null;
            filename?: string | null;
            /** Format: int32 */
            line?: number | null;
            /** Format: int32 */
            oldLine?: number | null;
            anchor?: components["schemas"]["LocalCodeDiscussionAnchorIn"];
            endAnchor?: components["schemas"]["LocalCodeDiscussionAnchorIn"];
            /** @default false */
            pending?: boolean;
            reviewId: components["schemas"]["ReviewIdentifier"];
            suggestedEdit?: components["schemas"]["CodeDiscussionSuggestedEditRequest"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["CodeDiscussionRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/code-reviews/code-discussions/{discussionId}/accept-suggested-edit": {
    /** Accept suggested edit */
    post: {
      /** Accept suggested edit */
      parameters: {
        path: {
          project: string;
          discussionId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            commitMessage: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/code-reviews/code-discussions/{discussionId}/reject-suggested-edit": {
    /** Reject suggested edit */
    post: {
      /** Reject suggested edit */
      parameters: {
        path: {
          project: string;
          discussionId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/code-reviews/code-discussions/{discussionId}/reopen-suggested-edit": {
    /** Reopen suggested edit */
    post: {
      /** Reopen suggested edit */
      parameters: {
        path: {
          project: string;
          discussionId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/code-reviews/code-discussions/{discussionId}/suggested-edit": {
    /** Alter suggested edit */
    patch: {
      /** Alter suggested edit */
      parameters: {
        path: {
          project: string;
          discussionId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            text: string;
            attachments: (components["schemas"]["AttachmentIn"])[];
            snippetContent?: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/code-reviews/safe-merge": {
    /** Get Safe Merge execution status */
    get: {
      /** Get Safe Merge execution status */
      parameters: {
        query: {
          mergeRequestId: string;
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["SafeMerge"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /** Start Safe Merge execution status */
    post: {
      /** Start Safe Merge execution status */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            mergeRequestId: components["schemas"]["ReviewIdentifier"];
            mergeOptions: components["schemas"]["MergeSelectOptions"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["SafeMergeMessage"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /** Stop Safe Merge execution */
    delete: {
      /** Stop Safe Merge execution */
      parameters: {
        query: {
          mergeRequestId: string;
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["SafeMergeMessage"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/code-reviews/{reviewId}/participants/{user}": {
    /**
     * Add review participant 
     * @description {
     *   "text": ""
     * }
     */
    post: {
      /**
       * Add review participant 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        path: {
          project: string;
          reviewId: string;
          user: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            role: components["schemas"]["CodeReviewParticipantRole"];
            isCodeOwner?: boolean | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Remove review participant 
     * @description {
     *   "text": ""
     * }
     */
    delete: {
      /**
       * Remove review participant 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query: {
          role: components["schemas"]["CodeReviewParticipantRole"];
        };
        path: {
          project: string;
          reviewId: string;
          user: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/code-reviews/{reviewId}/revisions": {
    /**
     * Add revisions to review 
     * @description {
     *   "text": ""
     * }
     */
    post: {
      /**
       * Add revisions to review 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        path: {
          project: string;
          reviewId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            revisions: (components["schemas"]["ReviewCommitIn"])[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Remove revisions from review 
     * @description {
     *   "text": ""
     * }
     */
    delete: {
      /**
       * Remove revisions from review 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query: {
          revisions: (string)[];
        };
        path: {
          project: string;
          reviewId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/code-reviews/{reviewId}/unbound-discussions": {
    /** Get all unbound discussions */
    get: {
      /** Get all unbound discussions */
      parameters: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
        path: {
          project: string;
          reviewId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["CodeReviewUnboundDiscussionRecord"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
    /** Create unbound discussion */
    post: {
      /** Create unbound discussion */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
          reviewId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            channelItemId: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["CodeReviewUnboundDiscussionRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/code-reviews/{reviewId}/unbound-discussions/{discussionId}/toggle": {
    /** Toggle unbound discussion resolution */
    patch: {
      /** Toggle unbound discussion resolution */
      parameters: {
        path: {
          project: string;
          reviewId: string;
          discussionId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            resolved?: boolean | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/documents": {
    /**
     * Create document 
     * @description {
     *   "text": ""
     * }
     */
    post: {
      /**
       * Create document 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name: string;
            folder: components["schemas"]["FolderIdentifier"];
            bodyIn: components["schemas"]["DocumentBodyCreateIn"];
            publicationDetailsIn?: components["schemas"]["PublicationDetailsIn"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Document"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/documents/{documentId}": {
    /**
     * Get document 
     * @description {
     *   "text": ""
     * }
     */
    get: {
      /**
       * Get document 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
          documentId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Document"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Archive document 
     * @description {
     *   "text": ""
     * }
     */
    delete: {
      /**
       * Archive document 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        path: {
          project: string;
          documentId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Update document 
     * @description {
     *   "text": ""
     * }
     */
    patch: {
      /**
       * Update document 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
          documentId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            name?: string | null;
            updateIn?: components["schemas"]["DocumentBodyUpdateIn"];
            publicationDetailsIn?: components["schemas"]["PublicationDetailsIn"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Document"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/documents/folders": {
    /**
     * Create folder 
     * @description {
     *   "text": ""
     * }
     */
    post: {
      /**
       * Create folder 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name: string;
            parentFolder: components["schemas"]["FolderIdentifier"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["DocumentFolder"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/documents/folders/{folder}": {
    /**
     * Get folder 
     * @description {
     *   "text": ""
     * }
     */
    get: {
      /**
       * Get folder 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
          folder: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["DocumentFolder"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Archive folder 
     * @description {
     *   "text": ""
     * }
     */
    delete: {
      /**
       * Archive folder 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        path: {
          project: string;
          folder: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Rename folder 
     * @description {
     *   "text": ""
     * }
     */
    patch: {
      /**
       * Rename folder 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        path: {
          project: string;
          folder: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/documents/folders/{folder}/access": {
    /**
     * Folder own access permissions 
     * @description {
     *   "text": ""
     * }
     */
    get: {
      /**
       * Folder own access permissions 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
          folder: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["FolderAccess"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Update folder access permissions 
     * @description {
     *   "text": ""
     * }
     */
    patch: {
      /**
       * Update folder access permissions 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        path: {
          project: string;
          folder: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            accessChange: components["schemas"]["UpdateFolderAccessIn"];
            /** @default false */
            silent?: boolean;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/documents/folders/{folder}/documents": {
    /**
     * List documents in folder 
     * @description {
     *   "text": ""
     * }
     */
    get: {
      /**
       * List documents in folder 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          withArchived?: boolean;
          sortBy?: string | null;
          order?: components["schemas"]["ColumnSortOrder"];
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
        path: {
          project: string;
          folder: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["Document"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/documents/folders/{folder}/introduction/{documentId}": {
    /**
     * Add folder introduction 
     * @description {
     *   "text": ""
     * }
     */
    patch: {
      /**
       * Add folder introduction 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        path: {
          project: string;
          folder: string;
          documentId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/documents/folders/{folder}/introduction": {
    /**
     * Remove folder introduction 
     * @description {
     *   "text": ""
     * }
     */
    delete: {
      /**
       * Remove folder introduction 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        path: {
          project: string;
          folder: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/documents/folders/{folder}/move": {
    /**
     * Move folder 
     * @description {
     *   "text": ""
     * }
     */
    patch: {
      /**
       * Move folder 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
          folder: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            parentFolder: components["schemas"]["FolderIdentifier"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["DocumentFolder"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/documents/folders/{folder}/search": {
    /**
     * Search documents and folders 
     * @description {
     *   "text": "Executes search for project documents and folders in specified folder"
     * }
     */
    get: {
      /**
       * Search documents and folders 
       * @description {
       *   "text": "Executes search for project documents and folders in specified folder"
       * }
       */
      parameters: {
        query: {
          query: string;
          includeBody?: boolean | null;
          foldersOnly?: boolean | null;
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
        path: {
          project: string;
          folder: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["DocumentFolderItem"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/documents/folders/{folder}/subfolders": {
    /**
     * List subfolders 
     * @description {
     *   "text": ""
     * }
     */
    get: {
      /**
       * List subfolders 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          withArchived?: boolean;
          sortBy?: string | null;
          order?: components["schemas"]["ColumnSortOrder"];
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
        path: {
          project: string;
          folder: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["DocumentFolder"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/documents/{documentId}/access": {
    /**
     * Document own access permissions 
     * @description {
     *   "text": ""
     * }
     */
    get: {
      /**
       * Document own access permissions 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
          documentId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["DocumentAccess"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Update document access permissions 
     * @description {
     *   "text": ""
     * }
     */
    patch: {
      /**
       * Update document access permissions 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        path: {
          project: string;
          documentId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            accessChange: components["schemas"]["UpdateDocumentAccessIn"];
            /** @default false */
            silent?: boolean;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/documents/{documentId}/copy": {
    /**
     * Copy document 
     * @description {
     *   "text": ""
     * }
     */
    post: {
      /**
       * Copy document 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
          documentId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name: string;
            folder: components["schemas"]["FolderIdentifier"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Document"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/documents/{documentId}/delete-forever": {
    /**
     * Delete document forever 
     * @description {
     *   "text": ""
     * }
     */
    delete: {
      /**
       * Delete document forever 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        path: {
          project: string;
          documentId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/documents/{documentId}/move": {
    /**
     * Move document 
     * @description {
     *   "text": ""
     * }
     */
    patch: {
      /**
       * Move document 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
          documentId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            folder: components["schemas"]["FolderIdentifier"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Document"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/documents/{documentId}/unarchive": {
    /**
     * Unarchive document 
     * @description {
     *   "text": ""
     * }
     */
    patch: {
      /**
       * Unarchive document 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
          documentId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Document"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/feature-pins": {
    /**
     * Update feature pin 
     * @description {
     *   "text": "Update list of project items pinned for the project by default"
     * }
     */
    patch: {
      /**
       * Update feature pin 
       * @description {
       *   "text": "Update list of project items pinned for the project by default"
       * }
       */
      parameters: {
        path: {
          project: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            featurePins: (components["schemas"]["ProjectFeaturePinsIn"])[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/packages/repositories": {
    /**
     * Get repositories 
     * @description {
     *   "text": "Gets a list of package repositories for a given project ID"
     * }
     */
    get: {
      /**
       * Get repositories 
       * @description {
       *   "text": "Gets a list of package repositories for a given project ID"
       * }
       */
      parameters: {
        query?: {
          type?: string | null;
          query?: string | null;
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["ProjectPackageRepository"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Create new repository 
     * @description {
     *   "text": "Creates a new package repository for a given project ID"
     * }
     */
    post: {
      /**
       * Create new repository 
       * @description {
       *   "text": "Creates a new package repository for a given project ID"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            type: string;
            name: string;
            description?: string | null;
            /** @default false */
            public?: boolean;
            settings?: components["schemas"]["ES_PackageRepositorySettings"];
            /** @default HOSTING */
            mode?: components["schemas"]["PackageRepositoryMode"];
            connection?: components["schemas"]["PackageRepositoryConnection"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["ProjectPackageRepository"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/packages/repositories/{repository}": {
    /**
     * Get repository 
     * @description {
     *   "text": "Gets a package repository for a given project ID by type and name"
     * }
     */
    get: {
      /**
       * Get repository 
       * @description {
       *   "text": "Gets a package repository for a given project ID by type and name"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
          repository: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["ProjectPackageRepository"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Delete repository 
     * @description {
     *   "text": "Removes package repository for a given project ID"
     * }
     */
    delete: {
      /**
       * Delete repository 
       * @description {
       *   "text": "Removes package repository for a given project ID"
       * }
       */
      parameters: {
        path: {
          project: string;
          repository: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Update repository 
     * @description {
     *   "text": "Updates package repository settings for a given project ID"
     * }
     */
    patch: {
      /**
       * Update repository 
       * @description {
       *   "text": "Updates package repository settings for a given project ID"
       * }
       */
      parameters: {
        path: {
          project: string;
          repository: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            name?: string | null;
            description?: string | null;
            public?: boolean | null;
            cleanupEnabled?: boolean | null;
            settings?: components["schemas"]["ES_PackageRepositorySettings"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/packages/repositories/{repository}/access": {
    /**
     * Get repository own access 
     * @description {
     *   "text": "Updates package repository settings for a given project ID"
     * }
     */
    get: {
      /**
       * Get repository own access 
       * @description {
       *   "text": "Updates package repository settings for a given project ID"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
          repository: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["PackagesAccess"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Update repository own access 
     * @description {
     *   "text": "Updates package repository settings for a given project ID"
     * }
     */
    patch: {
      /**
       * Update repository own access 
       * @description {
       *   "text": "Updates package repository settings for a given project ID"
       * }
       */
      parameters: {
        path: {
          project: string;
          repository: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            accessChange: components["schemas"]["UpdatePackageRepositoryAccessIn"];
            silent: boolean;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/packages/repositories/{repository}/cleanup": {
    /**
     * Cleanup repository 
     * @description {
     *   "text": "Cleanup specified package repository"
     * }
     */
    post: {
      /**
       * Cleanup repository 
       * @description {
       *   "text": "Cleanup specified package repository"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
          repository: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            retentionPolicyParams?: components["schemas"]["RetentionPolicyParams"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["PackagesExecutionResult"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/packages/repositories/{repository}/cleanup/dry": {
    /**
     * Dry run repository cleanup 
     * @description {
     *   "text": "Dry run of cleanup for specified package repository"
     * }
     */
    post: {
      /**
       * Dry run repository cleanup 
       * @description {
       *   "text": "Dry run of cleanup for specified package repository"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
          repository: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            retentionParams: components["schemas"]["RetentionPolicyParams"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["DryCleanupResults"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/packages/repositories/{repository}/connections": {
    /**
     * Get all remote repositories 
     * @description {
     *   "text": "Gets a list of remote package repositories for given project"
     * }
     */
    get: {
      /**
       * Get all remote repositories 
       * @description {
       *   "text": "Gets a list of remote package repositories for given project"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
          repository: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["PackageRepositoryConnection"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/packages/repositories/{repository}/connections/{connectionId}/publish": {
    /**
     * Get list of publishing to remote repository 
     * @description {
     *   "text": "Get list of publishing to remote repository"
     * }
     */
    get: {
      /**
       * Get list of publishing to remote repository 
       * @description {
       *   "text": "Get list of publishing to remote repository"
       * }
       */
      parameters: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
        path: {
          project: string;
          repository: string;
          connectionId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["PackagesPublishing"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Publish packages to remote repository 
     * @description {
     *   "text": "Publishes packages to remote repository"
     * }
     */
    post: {
      /**
       * Publish packages to remote repository 
       * @description {
       *   "text": "Publishes packages to remote repository"
       * }
       */
      parameters: {
        path: {
          project: string;
          repository: string;
          connectionId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            source: components["schemas"]["PublishingSource"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": string;
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/packages/repositories/{repository}/files": {
    /**
     * Get list of files 
     * @description {
     *   "text": "Gets a list of repository files for a given project ID in parent folder"
     * }
     */
    get: {
      /**
       * Get list of files 
       * @description {
       *   "text": "Gets a list of repository files for a given project ID in parent folder"
       * }
       */
      parameters: {
        query?: {
          parentPath?: string | null;
          $fields?: string;
        };
        path: {
          project: string;
          repository: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["FileData"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/packages/repositories/{repository}/files/name:{filePath}": {
    /**
     * Get file details 
     * @description {
     *   "text": "Gets a details for repository file for a given project ID"
     * }
     */
    get: {
      /**
       * Get file details 
       * @description {
       *   "text": "Gets a details for repository file for a given project ID"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
          repository: string;
          filePath: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["FileDetails"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Delete file 
     * @description {
     *   "text": "Removes a file in repository for a given project ID"
     * }
     */
    delete: {
      /**
       * Delete file 
       * @description {
       *   "text": "Removes a file in repository for a given project ID"
       * }
       */
      parameters: {
        path: {
          project: string;
          repository: string;
          filePath: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/packages/repositories/{repository}/files/folder:{folderPath}": {
    /**
     * Delete folder 
     * @description {
     *   "text": "Removes a folder in repository for a given project ID"
     * }
     */
    delete: {
      /**
       * Delete folder 
       * @description {
       *   "text": "Removes a folder in repository for a given project ID"
       * }
       */
      parameters: {
        path: {
          project: string;
          repository: string;
          folderPath: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/packages/repositories/{repository}/packages": {
    /**
     * Get all packages 
     * @description {
     *   "text": "Gets a list of repository packages for a given project ID"
     * }
     */
    get: {
      /**
       * Get all packages 
       * @description {
       *   "text": "Gets a list of repository packages for a given project ID"
       * }
       */
      parameters: {
        query: {
          query: string;
          connectionId?: string | null;
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
        path: {
          project: string;
          repository: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["PackageData"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/packages/repositories/{repository}/packages/name:{packageName}": {
    /**
     * Delete package 
     * @description {
     *   "text": "Removes all package versions in repository for a given project ID"
     * }
     */
    delete: {
      /**
       * Delete package 
       * @description {
       *   "text": "Removes all package versions in repository for a given project ID"
       * }
       */
      parameters: {
        path: {
          project: string;
          repository: string;
          packageName: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/packages/repositories/{repository}/packages/name:{packageName}/metadata": {
    /**
     * Get package metadata 
     * @description {
     *   "text": "Get package metadata in repository for a given project ID"
     * }
     */
    get: {
      /**
       * Get package metadata 
       * @description {
       *   "text": "Get package metadata in repository for a given project ID"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
          repository: string;
          packageName: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["PackageMetadata"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Report package  metadata 
     * @description {
     *   "text": "Update a package metadata in repository for a given project ID"
     * }
     */
    put: {
      /**
       * Report package  metadata 
       * @description {
       *   "text": "Update a package metadata in repository for a given project ID"
       * }
       */
      parameters: {
        path: {
          project: string;
          repository: string;
          packageName: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            connectionId?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/packages/repositories/{repository}/packages/name:{packageName}/metadata/version:{packageVersion}": {
    /**
     * Report package version metadata 
     * @description {
     *   "text": "Report a package version metadata in repository for a given project ID"
     * }
     */
    put: {
      /**
       * Report package version metadata 
       * @description {
       *   "text": "Report a package version metadata in repository for a given project ID"
       * }
       */
      parameters: {
        path: {
          project: string;
          repository: string;
          packageName: string;
          packageVersion: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            pin: boolean;
            comment?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/packages/repositories/{repository}/packages/name:{packageName}/versions": {
    /**
     * Get all package versions 
     * @description {
     *   "text": "Gets a list of repository package versions for a given project ID"
     * }
     */
    get: {
      /**
       * Get all package versions 
       * @description {
       *   "text": "Gets a list of repository package versions for a given project ID"
       * }
       */
      parameters: {
        query: {
          query: string;
          connectionId?: string | null;
          pinned?: boolean | null;
          $skip?: string | null;
          $top?: number | null;
          sortColumn: components["schemas"]["PackagesSortColumn"];
          sortOrder: components["schemas"]["ColumnSortOrder"];
          $fields?: string;
        };
        path: {
          project: string;
          repository: string;
          packageName: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["PackageVersionData"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/packages/repositories/{repository}/packages/name:{packageName}/versions/version:{packageVersion}": {
    /**
     * Get package version details 
     * @description {
     *   "text": "Gets a details for repository package version for a given project ID"
     * }
     */
    get: {
      /**
       * Get package version details 
       * @description {
       *   "text": "Gets a details for repository package version for a given project ID"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
          repository: string;
          packageName: string;
          packageVersion: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["PackageVersionDetails"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Delete package version 
     * @description {
     *   "text": "Removes a package version in repository for a given project ID"
     * }
     */
    delete: {
      /**
       * Delete package version 
       * @description {
       *   "text": "Removes a package version in repository for a given project ID"
       * }
       */
      parameters: {
        path: {
          project: string;
          repository: string;
          packageName: string;
          packageVersion: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/packages/repositories/{repository}/url": {
    /**
     * Get repository URL 
     * @description {
     *   "text": "Gets a package repository URL for a given project ID"
     * }
     */
    get: {
      /**
       * Get repository URL 
       * @description {
       *   "text": "Gets a package repository URL for a given project ID"
       * }
       */
      parameters: {
        path: {
          project: string;
          repository: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": string;
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/packages/repositories/type:{type}/repository:{repositoryName}/packages": {
    /**
     * Get all packages 
     * @deprecated 
     * @description {
     *   "text": "Gets a list of repository packages for a given project ID"
     * }
     */
    get: {
      /**
       * Get all packages 
       * @deprecated 
       * @description {
       *   "text": "Gets a list of repository packages for a given project ID"
       * }
       */
      parameters: {
        query: {
          query: string;
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
        path: {
          project: string;
          type: string;
          repositoryName: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["PackageData"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/packages/repositories/type:{type}/repository:{repositoryName}/packages/name:{packageName}/versions": {
    /**
     * Get all package versions 
     * @deprecated 
     * @description {
     *   "text": "Gets a list of repository package versions for a given project ID"
     * }
     */
    get: {
      /**
       * Get all package versions 
       * @deprecated 
       * @description {
       *   "text": "Gets a list of repository package versions for a given project ID"
       * }
       */
      parameters: {
        query: {
          query: string;
          $skip?: string | null;
          $top?: number | null;
          sortColumn: components["schemas"]["PackagesSortColumn"];
          sortOrder: components["schemas"]["ColumnSortOrder"];
          $fields?: string;
        };
        path: {
          project: string;
          type: string;
          repositoryName: string;
          packageName: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["PackageVersionData"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/packages/repositories/type:{type}/repository:{repositoryName}/packages/name:{packageName}/versions/version:{packageVersion}": {
    /**
     * Get package version details 
     * @deprecated 
     * @description {
     *   "text": "Gets a details for repository package version for a given project ID"
     * }
     */
    get: {
      /**
       * Get package version details 
       * @deprecated 
       * @description {
       *   "text": "Gets a details for repository package version for a given project ID"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
          type: string;
          repositoryName: string;
          packageName: string;
          packageVersion: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["PackageVersionDetails"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Delete package version 
     * @deprecated 
     * @description {
     *   "text": "Removes a package version in repository for a given project ID"
     * }
     */
    delete: {
      /**
       * Delete package version 
       * @deprecated 
       * @description {
       *   "text": "Removes a package version in repository for a given project ID"
       * }
       */
      parameters: {
        path: {
          project: string;
          type: string;
          repositoryName: string;
          packageName: string;
          packageVersion: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/packages/search": {
    /**
     * Find packages in repository 
     * @description {
     *   "text": "Executes a package search for a given project ID"
     * }
     */
    get: {
      /**
       * Find packages in repository 
       * @description {
       *   "text": "Executes a package search for a given project ID"
       * }
       */
      parameters: {
        query: {
          type: string;
          query: string;
          connectionId?: string | null;
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["PackageVersionData"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/packages/types": {
    /**
     * Get all types 
     * @description {
     *   "text": "Returns a list of available repository types."
     * }
     */
    get: {
      /**
       * Get all types 
       * @description {
       *   "text": "Returns a list of available repository types."
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["PackageType"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/people/members/update": {
    /**
     * Update participant roles 
     * @description {
     *   "text": "Adds or removes project participant roles"
     * }
     */
    post: {
      /**
       * Update participant roles 
       * @description {
       *   "text": "Adds or removes project participant roles"
       * }
       */
      parameters: {
        path: {
          project: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            profile: components["schemas"]["ProfileIdentifier"];
            addRoles: (components["schemas"]["ProjectRoleIn"])[];
            removeRoles: (components["schemas"]["ProjectRoleIn"])[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/people/members": {
    /**
     * Get all participants 
     * @description {
     *   "text": "Returns all project participants"
     * }
     */
    get: {
      /**
       * Get all participants 
       * @description {
       *   "text": "Returns all project participants"
       * }
       */
      parameters: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          role?: string | null;
          query?: string | null;
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["ParticipantOnProject"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/people/members/by-ids": {
    /**
     * Get participants by profiles 
     * @description {
     *   "text": "Returns project participants by provided profiles"
     * }
     */
    get: {
      /**
       * Get participants by profiles 
       * @description {
       *   "text": "Returns project participants by provided profiles"
       * }
       */
      parameters: {
        query: {
          profiles: (string)[];
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["ParticipantOnProject"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/people/members/{profile}": {
    /**
     * Remove participant 
     * @description {
     *   "text": "Removes participant"
     * }
     */
    delete: {
      /**
       * Remove participant 
       * @description {
       *   "text": "Removes participant"
       * }
       */
      parameters: {
        path: {
          project: string;
          profile: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/people/teams/update": {
    /**
     * Update participant roles 
     * @description {
     *   "text": "Adds or removes project team participant roles"
     * }
     */
    post: {
      /**
       * Update participant roles 
       * @description {
       *   "text": "Adds or removes project team participant roles"
       * }
       */
      parameters: {
        path: {
          project: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            team: components["schemas"]["TeamIdentifier"];
            addRoles: (components["schemas"]["ProjectRoleIn"])[];
            removeRoles: (components["schemas"]["ProjectRoleIn"])[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/people/teams": {
    /**
     * Get all participants 
     * @description {
     *   "text": "Returns all project participant teams"
     * }
     */
    get: {
      /**
       * Get all participants 
       * @description {
       *   "text": "Returns all project participant teams"
       * }
       */
      parameters: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          role?: string | null;
          query?: string | null;
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["ParticipantTeamOnProject"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/people/teams/by-ids": {
    /**
     * Get participants by teams 
     * @description {
     *   "text": "Returns project participant teams by provided teams"
     * }
     */
    get: {
      /**
       * Get participants by teams 
       * @description {
       *   "text": "Returns project participant teams by provided teams"
       * }
       */
      parameters: {
        query: {
          teams: (string)[];
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["ParticipantTeamOnProject"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/people/teams/{team}": {
    /**
     * Remove participant 
     * @description {
     *   "text": "Removes participant"
     * }
     */
    delete: {
      /**
       * Remove participant 
       * @description {
       *   "text": "Removes participant"
       * }
       */
      parameters: {
        path: {
          project: string;
          team: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/personal-feature-pins": {
    /**
     * Update personal feature pin 
     * @description {
     *   "text": "Update list of project items pinned for the project personally for you"
     * }
     */
    patch: {
      /**
       * Update personal feature pin 
       * @description {
       *   "text": "Update list of project items pinned for the project personally for you"
       * }
       */
      parameters: {
        path: {
          project: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            featurePins: (components["schemas"]["ToggleableProjectFeaturePins"])[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/planning/boards": {
    /**
     * Get all boards 
     * @description {
     *   "text": "Search existing boards in a project"
     * }
     */
    get: {
      /**
       * Get all boards 
       * @description {
       *   "text": "Search existing boards in a project"
       * }
       */
      parameters: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          query?: string | null;
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["BoardRecord"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Create board 
     * @description {
     *   "text": "Create a new issue board in a project. The user will become the owner of the board."
     * }
     */
    post: {
      /**
       * Create board 
       * @description {
       *   "text": "Create a new issue board in a project. The user will become the owner of the board."
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name: string;
            description?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["BoardRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/planning/boards/sprints": {
    /**
     * Get all sprints 
     * @description {
     *   "text": "Search existing sprints in a project"
     * }
     */
    get: {
      /**
       * Get all sprints 
       * @description {
       *   "text": "Search existing sprints in a project"
       * }
       */
      parameters: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          board?: string | null;
          query?: string | null;
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["SprintRecord"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/planning/boards/starred": {
    /**
     * Get all starred boards 
     * @description {
     *   "text": "Get all starred boards in a project"
     * }
     */
    get: {
      /**
       * Get all starred boards 
       * @description {
       *   "text": "Get all starred boards in a project"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["BoardRecord"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/planning/boards/{board}/archive": {
    /**
     * Archive board 
     * @deprecated 
     * @description {
     *   "text": "Archive an existing board. This operation can be performed by board owners or other members who are granted permission to manage boards in a project."
     * }
     */
    delete: {
      /**
       * Archive board 
       * @deprecated 
       * @description {
       *   "text": "Archive an existing board. This operation can be performed by board owners or other members who are granted permission to manage boards in a project."
       * }
       */
      parameters: {
        path: {
          project: string;
          board: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/planning/checklists": {
    /**
     * Get all checklists 
     * @deprecated 
     * @description {
     *   "text": "Search existing checklists in a project"
     * }
     */
    get: {
      /**
       * Get all checklists 
       * @deprecated 
       * @description {
       *   "text": "Search existing checklists in a project"
       * }
       */
      parameters: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          query?: string | null;
          sorting?: components["schemas"]["ChecklistSorting"];
          descending?: boolean;
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["Checklist"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Create checklist 
     * @deprecated 
     * @description {
     *   "text": "Create a new checklist in a project"
     * }
     */
    post: {
      /**
       * Create checklist 
       * @deprecated 
       * @description {
       *   "text": "Create a new checklist in a project"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Checklist"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/planning/checklists/import": {
    /**
     * Import checklist 
     * @deprecated 
     * @description {
     *   "text": "Create a new checklist in a project using tab indented lines as checkable items.\nThe items with the same indent level will be placed one under the other.\nAn issue URL will be converted into the corresponding issue."
     * }
     */
    post: {
      /**
       * Import checklist 
       * @deprecated 
       * @description {
       *   "text": "Create a new checklist in a project using tab indented lines as checkable items.\nThe items with the same indent level will be placed one under the other.\nAn issue URL will be converted into the corresponding issue."
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name: string;
            tabIndentedLines: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Checklist"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/planning/checklists/{checklistId}/import": {
    /**
     * Import checklist lines 
     * @description {
     *   "text": "Tab indented lines are converted into checkable items following the same rules as in Import Checklist.\nThe result is placed inside of the specified project checklist."
     * }
     */
    post: {
      /**
       * Import checklist lines 
       * @description {
       *   "text": "Tab indented lines are converted into checkable items following the same rules as in Import Checklist.\nThe result is placed inside of the specified project checklist."
       * }
       */
      parameters: {
        path: {
          project: string;
          checklistId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            targetParentId: string;
            afterItemId?: string | null;
            tabIndentedLines: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/planning/checklists/{checklistId}": {
    /**
     * Delete checklist 
     * @deprecated 
     * @description {
     *   "text": "Delete an existing checklist in a project"
     * }
     */
    delete: {
      /**
       * Delete checklist 
       * @deprecated 
       * @description {
       *   "text": "Delete an existing checklist in a project"
       * }
       */
      parameters: {
        path: {
          project: string;
          checklistId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Update checklist 
     * @deprecated 
     * @description {
     *   "text": "Update an existing checklist in a project"
     * }
     */
    patch: {
      /**
       * Update checklist 
       * @deprecated 
       * @description {
       *   "text": "Update an existing checklist in a project"
       * }
       */
      parameters: {
        path: {
          project: string;
          checklistId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            name?: string;
            description?: string | null;
            owner?: string | null;
            tag?: string | null;
            topics?: (string)[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/planning/checklists/starred": {
    /**
     * Get all starred checklists 
     * @deprecated 
     * @description {
     *   "text": "Get all starred checklists in a project"
     * }
     */
    get: {
      /**
       * Get all starred checklists 
       * @deprecated 
       * @description {
       *   "text": "Get all starred checklists in a project"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["Checklist"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/planning/checklists/{checklistId}/full-checklist-tree": {
    /**
     * Get full checklist tree 
     * @description {
     *   "text": "Get the content of a checklist in a project"
     * }
     */
    get: {
      /**
       * Get full checklist tree 
       * @description {
       *   "text": "Get the content of a checklist in a project"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
          checklistId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["PlanItemChildren"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/planning/issues": {
    /**
     * Get all issues 
     * @description {
     *   "text": "Search existing issues in a project. Parameters are applied as 'AND' filters."
     * }
     */
    get: {
      /**
       * Get all issues 
       * @description {
       *   "text": "Search existing issues in a project. Parameters are applied as 'AND' filters."
       * }
       */
      parameters: {
          /** @deprecated */
          /** @deprecated */
        query: {
          $skip?: string | null;
          $top?: number | null;
          assigneeId?: (string | null)[];
          createdByProfileId?: string | null;
          createdBy?: (string)[];
          statuses?: (string)[];
          tagId?: string | null;
          query?: string | null;
          sorting: components["schemas"]["IssuesSorting"];
          descending: boolean;
          tags?: (string | null)[];
          sprints?: (string | null)[];
          boards?: (string | null)[];
          customFields?: (string)[] | null;
          importTransaction?: string | null;
          creationTimeFrom?: string | null;
          creationTimeTo?: string | null;
          dueDateFrom?: string | null;
          dueDateTo?: string | null;
          topics?: (string)[] | null;
          grouping?: components["schemas"]["IssueListGrouping"];
          deployment?: string | null;
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["Issue"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Create issue 
     * @description {
     *   "text": "Create a new issue in a project"
     * }
     */
    post: {
      /**
       * Create issue 
       * @description {
       *   "text": "Create a new issue in a project"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            title: string;
            description?: string | null;
            assignee?: components["schemas"]["ProfileIdentifier"];
            status: string;
            /** Format: full-date */
            dueDate?: string | null;
            /** @default [] */
            tags?: (string)[];
            /** @default [] */
            checklists?: (string)[];
            /** @default [] */
            sprints?: (components["schemas"]["SprintIdentifier"])[];
            /** @default [] */
            attachments?: (components["schemas"]["AttachmentIn"])[] | null;
            fromMessage?: components["schemas"]["MessageLink"];
            customFields?: (components["schemas"]["CustomFieldInputValue"])[] | null;
            parents?: (components["schemas"]["IssueIdentifier"])[] | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Issue"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/planning/issues/import": {
    /**
     * Import issues 
     * @description {
     *   "text": "Import issues in a project"
     * }
     */
    post: {
      /**
       * Import issues 
       * @description {
       *   "text": "Import issues in a project"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            metadata: components["schemas"]["ImportMetadata"];
            issues: (components["schemas"]["ImportIssue"])[];
            assigneeMissingPolicy?: components["schemas"]["ImportMissingPolicy"];
            statusMissingPolicy?: components["schemas"]["ImportMissingPolicy"];
            onExistsPolicy?: components["schemas"]["ImportExistsPolicy"];
            dryRun: boolean;
            /** @default false */
            notifySubscribers?: boolean;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["IssueImportResult"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/planning/issues/{issueId}/restore": {
    /**
     * Restore issue 
     * @description {
     *   "text": "Restore an issue in a project"
     * }
     */
    post: {
      /**
       * Restore issue 
       * @description {
       *   "text": "Restore an issue in a project"
       * }
       */
      parameters: {
        path: {
          project: string;
          issueId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/planning/issues/{issueId}/toggle-resolved": {
    /**
     * Toggle issue resolved status 
     * @description {
     *   "text": "Toggle status of an existing issue between resolved and unresolved"
     * }
     */
    post: {
      /**
       * Toggle issue resolved status 
       * @description {
       *   "text": "Toggle status of an existing issue between resolved and unresolved"
       * }
       */
      parameters: {
        path: {
          project: string;
          issueId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            resolved: boolean;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/planning/issues/sync-batch": {
    /**
     * Get sync batch 
     * @description {
     *   "text": "Get issues in specified project for synchronization with third-party system. Issues with etag greater than specified value are returned. Read more in the [documentation](https://www.jetbrains.com/help/space/sync-api.html)."
     * }
     */
    get: {
      /**
       * Get sync batch 
       * @description {
       *   "text": "Get issues in specified project for synchronization with third-party system. Issues with etag greater than specified value are returned. Read more in the [documentation](https://www.jetbrains.com/help/space/sync-api.html)."
       * }
       */
      parameters: {
        query: {
          batchInfo: string;
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              etag: string;
              data: (components["schemas"]["Issue"])[];
              hasMore: boolean;
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/planning/issues/number:{number}": {
    /**
     * Get issue by number 
     * @description {
     *   "text": "Find an existing issue by a given number in a project"
     * }
     */
    get: {
      /**
       * Get issue by number 
       * @description {
       *   "text": "Find an existing issue by a given number in a project"
       * }
       */
      parameters: {
        query?: {
          resolveAlias?: boolean;
          withDeleted?: boolean | null;
          $fields?: string;
        };
        path: {
          project: string;
          number: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Issue"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/planning/issues/{issueId}": {
    /**
     * Get issue 
     * @description {
     *   "text": "Retrieve issue by identifier. To retrieve multiple issues at once, use [Get issues by identifiers](/extensions/httpApiPlayground?resource=issues&parent-resource=issues&endpoint=http_post_get-by-ids) (`/issues/get-by-ids`)"
     * }
     */
    get: {
      /**
       * Get issue 
       * @description {
       *   "text": "Retrieve issue by identifier. To retrieve multiple issues at once, use [Get issues by identifiers](/extensions/httpApiPlayground?resource=issues&parent-resource=issues&endpoint=http_post_get-by-ids) (`/issues/get-by-ids`)"
       * }
       */
      parameters: {
        query?: {
          withDeleted?: boolean | null;
          $fields?: string;
        };
        path: {
          project: string;
          issueId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Issue"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Delete issue 
     * @description {
     *   "text": "Delete an issue from a project"
     * }
     */
    delete: {
      /**
       * Delete issue 
       * @description {
       *   "text": "Delete an issue from a project"
       * }
       */
      parameters: {
        path: {
          project: string;
          issueId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Update issue 
     * @description {
     *   "text": "Update an existing issue in a project"
     * }
     */
    patch: {
      /**
       * Update issue 
       * @description {
       *   "text": "Update an existing issue in a project"
       * }
       */
      parameters: {
        path: {
          project: string;
          issueId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            title?: string;
            description?: string | null;
            assignee?: string | null;
            status?: string;
            /** Format: full-date */
            dueDate?: string | null;
            /** @default [] */
            customFields?: (components["schemas"]["CustomFieldInputValue"])[];
            /** @default true */
            notifySubscribers?: boolean;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/planning/issues/fields/order": {
    /**
     * Get issue field order 
     * @description {
     *   "text": "Query order for built-in issue fields"
     * }
     */
    get: {
      /**
       * Get issue field order 
       * @description {
       *   "text": "Query order for built-in issue fields"
       * }
       */
      parameters: {
        query?: {
          onlyVisible?: boolean;
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TrackerIssueFieldOrder"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Set issue field order 
     * @description {
     *   "text": "Query order for built-in issue fields"
     * }
     */
    patch: {
      /**
       * Set issue field order 
       * @description {
       *   "text": "Query order for built-in issue fields"
       * }
       */
      parameters: {
        path: {
          project: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            fieldOrder: (components["schemas"]["IssueFieldOrderIn"])[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/planning/issues/fields/visibility": {
    /**
     * Get issue field visibility 
     * @description {
     *   "text": "Query visibility for built-in issue fields"
     * }
     */
    get: {
      /**
       * Get issue field visibility 
       * @description {
       *   "text": "Query visibility for built-in issue fields"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TrackerIssueFieldVisibility"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Update issue field visibility 
     * @description {
     *   "text": "Set visibility for a built-in issue field"
     * }
     */
    patch: {
      /**
       * Update issue field visibility 
       * @description {
       *   "text": "Set visibility for a built-in issue field"
       * }
       */
      parameters: {
        path: {
          project: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            field: components["schemas"]["IssueSystemFieldEnum"];
            visible: boolean;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/planning/issues/statuses": {
    /**
     * Get all issue statuses 
     * @description {
     *   "text": "Get all existing issue statuses in a project"
     * }
     */
    get: {
      /**
       * Get all issue statuses 
       * @description {
       *   "text": "Get all existing issue statuses in a project"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["IssueStatus"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Update issue statuses list 
     * @description {
     *   "text": "Configure issue statuses in a project. The list must contain at least one resolved and one unresolved status."
     * }
     */
    patch: {
      /**
       * Update issue statuses list 
       * @description {
       *   "text": "Configure issue statuses in a project. The list must contain at least one resolved and one unresolved status."
       * }
       */
      parameters: {
        path: {
          project: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            statuses: (components["schemas"]["IssueStatusData"])[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/planning/issues/statuses/auto-update-on-merge-request-merge": {
    /**
     * Get auto update target issue status for merge request merge 
     * @description {
     *   "text": "Get target issue status for auto updating issues on linked merge request merge"
     * }
     */
    get: {
      /**
       * Get auto update target issue status for merge request merge 
       * @description {
       *   "text": "Get target issue status for auto updating issues on linked merge request merge"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["IssueStatus"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Set auto update target issue status for merge request merge 
     * @description {
     *   "text": "Set target issue status for auto updating issues on linked merge request merge"
     * }
     */
    patch: {
      /**
       * Set auto update target issue status for merge request merge 
       * @description {
       *   "text": "Set target issue status for auto updating issues on linked merge request merge"
       * }
       */
      parameters: {
        path: {
          project: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            statusId?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/planning/issues/statuses/distribution": {
    /**
     * Get issue status distribution 
     * @description {
     *   "text": "Get all existing issue statuses with their usage, number of existing issues, in a project"
     * }
     */
    get: {
      /**
       * Get issue status distribution 
       * @description {
       *   "text": "Get all existing issue statuses with their usage, number of existing issues, in a project"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["IssueStatusWithUsages"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/planning/issues/{issueId}/attachment": {
    /**
     * Add attachment 
     * @description {
     *   "text": "Add attachment to an existing issue in a project"
     * }
     */
    post: {
      /**
       * Add attachment 
       * @description {
       *   "text": "Add attachment to an existing issue in a project"
       * }
       */
      parameters: {
        path: {
          project: string;
          issueId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            attachment: components["schemas"]["AttachmentIn"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/planning/issues/{issueId}/attachment/{attachmentId}": {
    /**
     * Remove attachment 
     * @description {
     *   "text": "Remove attachment from an existing issue in a project"
     * }
     */
    delete: {
      /**
       * Remove attachment 
       * @description {
       *   "text": "Remove attachment from an existing issue in a project"
       * }
       */
      parameters: {
        path: {
          project: string;
          issueId: string;
          attachmentId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/planning/issues/{issueId}/attachments": {
    /**
     * Add attachments 
     * @description {
     *   "text": "Add attachments to an existing issue in a project"
     * }
     */
    post: {
      /**
       * Add attachments 
       * @description {
       *   "text": "Add attachments to an existing issue in a project"
       * }
       */
      parameters: {
        path: {
          project: string;
          issueId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            attachments: (components["schemas"]["AttachmentIn"])[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Remove attachments 
     * @description {
     *   "text": "Remove attachments from an existing issue in a project"
     * }
     */
    delete: {
      /**
       * Remove attachments 
       * @description {
       *   "text": "Remove attachments from an existing issue in a project"
       * }
       */
      parameters: {
        query: {
          identities: (string)[];
        };
        path: {
          project: string;
          issueId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/planning/issues/{issueId}/branches": {
    /**
     * Add branch links 
     * @description {
     *   "text": "Add branch links to an existing issue in a project"
     * }
     */
    post: {
      /**
       * Add branch links 
       * @description {
       *   "text": "Add branch links to an existing issue in a project"
       * }
       */
      parameters: {
        path: {
          project: string;
          issueId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            repository: string;
            branches: (string)[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Remove branch links 
     * @description {
     *   "text": "Remove branch links from an existing issue in a project"
     * }
     */
    delete: {
      /**
       * Remove branch links 
       * @description {
       *   "text": "Remove branch links from an existing issue in a project"
       * }
       */
      parameters: {
        query: {
          repository: string;
          branchHeads: (string)[];
        };
        path: {
          project: string;
          issueId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/planning/issues/{issueId}/checklists/{checklistId}": {
    /**
     * Add issue checklist 
     * @description {
     *   "text": "Add the checklist to an existing issue in a project"
     * }
     */
    post: {
      /**
       * Add issue checklist 
       * @description {
       *   "text": "Add the checklist to an existing issue in a project"
       * }
       */
      parameters: {
        path: {
          project: string;
          issueId: string;
          checklistId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Remove issue checklist 
     * @description {
     *   "text": "Remove the checklist from an existing issue in a project"
     * }
     */
    delete: {
      /**
       * Remove issue checklist 
       * @description {
       *   "text": "Remove the checklist from an existing issue in a project"
       * }
       */
      parameters: {
        path: {
          project: string;
          issueId: string;
          checklistId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/planning/issues/{issueId}/code-reviews": {
    /**
     * Add code review links 
     * @description {
     *   "text": "Add code review links to an existing issue in a project"
     * }
     */
    post: {
      /**
       * Add code review links 
       * @description {
       *   "text": "Add code review links to an existing issue in a project"
       * }
       */
      parameters: {
        path: {
          project: string;
          issueId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            codeReviewIds: (components["schemas"]["ReviewIdentifier"])[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Remove code review links 
     * @description {
     *   "text": "Remove code review links from an existing issue in a project"
     * }
     */
    delete: {
      /**
       * Remove code review links 
       * @description {
       *   "text": "Remove code review links from an existing issue in a project"
       * }
       */
      parameters: {
        query: {
          codeReviewIds: (string)[];
        };
        path: {
          project: string;
          issueId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/planning/issues/{issueId}/comments/import": {
    /**
     * Import issue comment history 
     * @deprecated 
     * @description {
     *   "text": ""
     * }
     */
    post: {
      /**
       * Import issue comment history 
       * @deprecated 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        path: {
          project: string;
          issueId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            comments: (components["schemas"]["MessageForImport"])[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (string)[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/planning/issues/{issueId}/commits": {
    /**
     * Add commit links 
     * @description {
     *   "text": "Add commit links to an existing issue in a project"
     * }
     */
    post: {
      /**
       * Add commit links 
       * @description {
       *   "text": "Add commit links to an existing issue in a project"
       * }
       */
      parameters: {
        path: {
          project: string;
          issueId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            repository: string;
            commitIds: (string)[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Remove commit links 
     * @description {
     *   "text": "Remove commit links from an existing issue in a project"
     * }
     */
    delete: {
      /**
       * Remove commit links 
       * @description {
       *   "text": "Remove commit links from an existing issue in a project"
       * }
       */
      parameters: {
        query: {
          repository: string;
          commitIds: (string)[];
        };
        path: {
          project: string;
          issueId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/planning/issues/{issueId}/tags/{tagId}": {
    /**
     * Add issue tag 
     * @description {
     *   "text": "Add an existing tag to an issue in a project"
     * }
     */
    post: {
      /**
       * Add issue tag 
       * @description {
       *   "text": "Add an existing tag to an issue in a project"
       * }
       */
      parameters: {
        path: {
          project: string;
          issueId: string;
          tagId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Remove issue tag 
     * @description {
     *   "text": "Remove an existing tag from an issue in a project"
     * }
     */
    delete: {
      /**
       * Remove issue tag 
       * @description {
       *   "text": "Remove an existing tag from an issue in a project"
       * }
       */
      parameters: {
        path: {
          project: string;
          issueId: string;
          tagId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/planning/tags": {
    /**
     * Get all hierarchical tags 
     * @description {
     *   "text": "Search existing tags in a project"
     * }
     */
    get: {
      /**
       * Get all hierarchical tags 
       * @description {
       *   "text": "Search existing tags in a project"
       * }
       */
      parameters: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          query?: string | null;
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["PlanningTag"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Create hierarchical tag 
     * @description {
     *   "text": "Create a new hierarchical tag in a project"
     * }
     */
    post: {
      /**
       * Create hierarchical tag 
       * @description {
       *   "text": "Create a new hierarchical tag in a project"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            parentTagId?: string | null;
            path: (string)[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["PlanningTag"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/repositories/test-connection": {
    /** Test Remote Connection */
    post: {
      /** Test Remote Connection */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            repository?: string | null;
            remote: components["schemas"]["RemoteRepository"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TestConnectionResult"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/repositories/{repository}": {
    /** Get repository info */
    get: {
      /** Get repository info */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
          repository: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["PR_RepositoryInfo"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /** Create new repository */
    post: {
      /** Create new repository */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
          repository: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            /** @default */
            description?: string;
            defaultBranch?: string | null;
            /** @default true */
            initialize?: boolean;
            /** @default false */
            defaultSetup?: boolean;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["PR_RepositoryInfo"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /** Delete repository */
    delete: {
      /** Delete repository */
      parameters: {
        path: {
          project: string;
          repository: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/repositories/{repository}/cherry-pick-commit": {
    /** Cherry pick commit */
    post: {
      /** Cherry pick commit */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
          repository: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            commit: string;
            targetBranch: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GitCherryPickResult"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/repositories/{repository}/commit": {
    /** Commit changes to repository */
    post: {
      /** Commit changes to repository */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
          repository: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            baseCommit: string;
            targetBranch: string;
            commitMessage: string;
            files: (components["schemas"]["GitCommitFileRequest"])[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GitCommitResult"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/repositories/{repository}/delete-branch": {
    /** Delete branch */
    post: {
      /** Delete branch */
      parameters: {
        path: {
          project: string;
          repository: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            branch: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/repositories/{repository}/description": {
    /** Set repository description */
    post: {
      /** Set repository description */
      parameters: {
        path: {
          project: string;
          repository: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            description: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/repositories/{repository}/gc": {
    /** Invoke garbage collection on repository */
    post: {
      /** Invoke garbage collection on repository */
      parameters: {
        path: {
          project: string;
          repository: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/repositories/{repository}/head": {
    /** Set head to given target commit */
    post: {
      /** Set head to given target commit */
      parameters: {
        path: {
          project: string;
          repository: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            head: string;
            target: string;
            source?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/repositories/{repository}/merge-branch": {
    /** Merge branch */
    post: {
      /** Merge branch */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
          repository: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            sourceBranch: string;
            targetBranch?: string | null;
            commitMessage?: string | null;
            mergeMode: components["schemas"]["GitMergeMode"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GitMergeBranchResult"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/repositories/{repository}/migrate": {
    /** Migrate repository */
    post: {
      /** Migrate repository */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
          repository: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            description: string;
            remote: components["schemas"]["RemoteRepository"];
            mirror?: components["schemas"]["RepositoryMirrorOptions"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["PR_RepositoryInfo"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/repositories/{repository}/rebase-branch": {
    /** Rebase branch */
    post: {
      /** Rebase branch */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
          repository: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            sourceBranch: string;
            targetBranch?: string | null;
            rebaseMode: components["schemas"]["GitRebaseMode"];
            squash: components["schemas"]["GitSquashMode"];
            squashedCommitMessage?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GitRebaseResult"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/repositories/{repository}/additional-info": {
    /** Get additional repository info */
    get: {
      /** Get additional repository info */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
          repository: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["AdditionalRepositoryInfo"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/repositories/{repository}/changes": {
    /** Get commit changes */
    get: {
      /** Get commit changes */
      parameters: {
        query: {
          commit: string;
          limit: number;
          $fields?: string;
        };
        path: {
          project: string;
          repository: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["GitFileChange"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/repositories/{repository}/commit-branches": {
    /** List the heads which contains given commit */
    get: {
      /** List the heads which contains given commit */
      parameters: {
        query: {
          commit: string;
          prefix?: string | null;
          limit?: number | null;
          $fields?: string;
        };
        path: {
          project: string;
          repository: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["BranchInfo"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/repositories/{repository}/commits": {
    /** List commits matching query */
    get: {
      /** List commits matching query */
      parameters: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          query?: string | null;
          $fields?: string;
        };
        path: {
          project: string;
          repository: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["GitCommitInfo"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/repositories/{repository}/files": {
    /** List files in directory */
    get: {
      /** List files in directory */
      parameters: {
        query: {
          commit: string;
          path: string;
          $fields?: string;
        };
        path: {
          project: string;
          repository: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["GitFile"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/repositories/{repository}/heads": {
    /** Get repository heads */
    get: {
      /** Get repository heads */
      parameters: {
        query?: {
          pattern?: (string)[];
          isRegex?: boolean;
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
        path: {
          project: string;
          repository: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["BranchInfo"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/repositories/{repository}/inline-merge-diff": {
    /** Get inline merge diff */
    get: {
      /** Get inline merge diff */
      parameters: {
        query: {
          baseBlobId?: string | null;
          sourceBlobId?: string | null;
          targetBlobId?: string | null;
          entryType: components["schemas"]["GitEntryType"];
          ignoreWhitespaces?: boolean;
          squashSimpleChanges?: boolean;
          $fields?: string;
        };
        path: {
          project: string;
          repository: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["InlineDiff"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/repositories/{repository}/merge-preview": {
    /** List files to be merged on merge branches */
    get: {
      /** List files to be merged on merge branches */
      parameters: {
        query: {
          sourceBranch: string;
          targetBranch: string;
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
        path: {
          project: string;
          repository: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["GitMergedFile"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/repositories/{repository}/merge-preview-status": {
    /**
     * Preview merge branches result 
     * @description {
     *   "text": "Dry run merge source branch into target without modifying the repository. Please note that conflicting status is based on per-file analysis, so it may not be accurate on too diverged branches."
     * }
     */
    get: {
      /**
       * Preview merge branches result 
       * @description {
       *   "text": "Dry run merge source branch into target without modifying the repository. Please note that conflicting status is based on per-file analysis, so it may not be accurate on too diverged branches."
       * }
       */
      parameters: {
        query: {
          sourceBranch: string;
          targetBranch: string;
          $fields?: string;
        };
        path: {
          project: string;
          repository: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GitMergeBranchResult"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/repositories/{repository}/scopes": {
    /** Get declaration scopes for file */
    get: {
      /** Get declaration scopes for file */
      parameters: {
        query: {
          filename: string;
          blobId: string;
          $fields?: string;
        };
        path: {
          project: string;
          repository: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["DeclarationScope"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/repositories/{repository}/url": {
    /** Get remote URL of a Git repository */
    get: {
      /** Get remote URL of a Git repository */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
          repository: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["RepositoryUrls"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/repositories/{repository}/default-branch": {
    /** Get repository default branch */
    get: {
      /** Get repository default branch */
      parameters: {
        path: {
          project: string;
          repository: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": string;
          };
        };
        default: components["responses"]["default"];
      };
    };
    /** Set repository default branch */
    post: {
      /** Set repository default branch */
      parameters: {
        path: {
          project: string;
          repository: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            branch: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/repositories/{repository}/readonly": {
    /** Get repository frozen state */
    get: {
      /** Get repository frozen state */
      parameters: {
        path: {
          project: string;
          repository: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": boolean;
          };
        };
        default: components["responses"]["default"];
      };
    };
    /** Set repository frozen state */
    post: {
      /** Set repository frozen state */
      parameters: {
        path: {
          project: string;
          repository: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            freeze: boolean;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/repositories/{repository}/revisions/{revision}/external-checks": {
    /**
     * Get external checks for a commit 
     * @description {
     *   "text": ""
     * }
     */
    get: {
      /**
       * Get external checks for a commit 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
          repository: string;
          revision: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["ExternalCheckDTO"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Report external check status 
     * @description {
     *   "text": ""
     * }
     */
    post: {
      /**
       * Report external check status 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        path: {
          project: string;
          repository: string;
          revision: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            branch?: string | null;
            changes?: (string)[] | null;
            executionStatus: components["schemas"]["CommitExecutionStatus"];
            url: string;
            externalServiceName: string;
            taskName: string;
            taskId: string;
            taskBuildId?: string | null;
            /** Format: int64 */
            timestamp?: number | null;
            description?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/repositories/{repository}/settings": {
    /** Get repository settings */
    get: {
      /** Get repository settings */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
          repository: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GitRepositorySettings"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /** Set repository settings */
    post: {
      /** Set repository settings */
      parameters: {
        path: {
          project: string;
          repository: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            settings: components["schemas"]["GitRepositorySettings"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/responsibilities/scheme": {
    /**
     * Get project responsibility scheme 
     * @description {
     *   "text": "Get the responsibilities schema for a given project ID"
     * }
     */
    get: {
      /**
       * Get project responsibility scheme 
       * @description {
       *   "text": "Get the responsibilities schema for a given project ID"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          project: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["SubjectResponsibilitiesTable"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/responsibilities/subjects": {
    /**
     * Add responsibility subject 
     * @description {
     *   "text": "Add a responsibility subject for a given project ID"
     * }
     */
    post: {
      /**
       * Add responsibility subject 
       * @description {
       *   "text": "Add a responsibility subject for a given project ID"
       * }
       */
      parameters: {
        path: {
          project: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            name?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": string;
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/responsibilities/subjects/{subjectId}": {
    /**
     * Edit responsibility subject 
     * @description {
     *   "text": "Update an existing responsibility subject for a given project ID"
     * }
     */
    patch: {
      /**
       * Edit responsibility subject 
       * @description {
       *   "text": "Update an existing responsibility subject for a given project ID"
       * }
       */
      parameters: {
        path: {
          project: string;
          subjectId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            name?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/projects/{project}/responsibilities/{responsibilityId}/assignees/{profileId}": {
    /**
     * Assign responsible 
     * @description {
     *   "text": "Assign a responsible person for a given project ID and responsibility ID"
     * }
     */
    post: {
      /**
       * Assign responsible 
       * @description {
       *   "text": "Assign a responsible person for a given project ID and responsibility ID"
       * }
       */
      parameters: {
        path: {
          project: string;
          responsibilityId: string;
          profileId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            role?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Remove responsible 
     * @description {
     *   "text": "Remove a responsible person for a given project ID and responsibility ID"
     * }
     */
    delete: {
      /**
       * Remove responsible 
       * @description {
       *   "text": "Remove a responsible person for a given project ID and responsibility ID"
       * }
       */
      parameters: {
        query?: {
          role?: string | null;
        };
        path: {
          project: string;
          responsibilityId: string;
          profileId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/public-holidays/calendars": {
    /**
     * Get all calendars 
     * @description {
     *   "text": "Get all public holiday calendars"
     * }
     */
    get: {
      /**
       * Get all calendars 
       * @description {
       *   "text": "Get all public holiday calendars"
       * }
       */
      parameters?: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["PublicHolidayCalendarRecord"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Create calendar 
     * @description {
     *   "text": "Create a public holiday calendar for a location"
     * }
     */
    post: {
      /**
       * Create calendar 
       * @description {
       *   "text": "Create a public holiday calendar for a location"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name: string;
            location: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["PublicHolidayCalendarRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/public-holidays/calendars/import": {
    /**
     * Import calendar 
     * @description {
     *   "text": "Import holidays in a public holiday calendar, using an attachment (.ics format) as the source"
     * }
     */
    post: {
      /**
       * Import calendar 
       * @description {
       *   "text": "Import holidays in a public holiday calendar, using an attachment (.ics format) as the source"
       * }
       */
      requestBody: {
        content: {
          "application/json": {
            calendar: string;
            attachmentId: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": string;
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/public-holidays/calendars/{id}": {
    /**
     * Delete calendar 
     * @description {
     *   "text": "Delete a public holiday calendar"
     * }
     */
    delete: {
      /**
       * Delete calendar 
       * @description {
       *   "text": "Delete a public holiday calendar"
       * }
       */
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Update calendar 
     * @description {
     *   "text": "Update an existing public holiday calendar"
     * }
     */
    patch: {
      /**
       * Update calendar 
       * @description {
       *   "text": "Update an existing public holiday calendar"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name: string;
            location: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["PublicHolidayCalendarRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/public-holidays/holidays": {
    /**
     * Get all holidays 
     * @description {
     *   "text": "Get/search all holidays in a public holiday calendar. Parameters are applied as 'AND' filters."
     * }
     */
    get: {
      /**
       * Get all holidays 
       * @description {
       *   "text": "Get/search all holidays in a public holiday calendar. Parameters are applied as 'AND' filters."
       * }
       */
      parameters?: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          calendar?: string | null;
          location?: string | null;
          startDate?: string | null;
          endDate?: string | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["PublicHoliday"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Create holiday 
     * @description {
     *   "text": "Add a holiday to a public holiday calendar and specify if it is a working day or not"
     * }
     */
    post: {
      /**
       * Create holiday 
       * @description {
       *   "text": "Add a holiday to a public holiday calendar and specify if it is a working day or not"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            calendar: string;
            name: string;
            /** Format: full-date */
            date: string;
            workingDay: boolean;
            /** @default false */
            halfDay?: boolean | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["PublicHoliday"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/public-holidays/holidays/{id}": {
    /**
     * Delete holiday 
     * @description {
     *   "text": "Delete a holiday from a public holiday calendar"
     * }
     */
    delete: {
      /**
       * Delete holiday 
       * @description {
       *   "text": "Delete a holiday from a public holiday calendar"
       * }
       */
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Update holiday 
     * @description {
     *   "text": "Update a holiday in a public holiday calendar. Optional parameters will be ignored when not specified and updated otherwise."
     * }
     */
    patch: {
      /**
       * Update holiday 
       * @description {
       *   "text": "Update a holiday in a public holiday calendar. Optional parameters will be ignored when not specified and updated otherwise."
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            calendar?: string | null;
            name?: string | null;
            /** Format: full-date */
            date?: string | null;
            workingDay?: boolean | null;
            halfDay?: boolean | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["PublicHoliday"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/public-holidays/holidays/profile-holidays": {
    /**
     * Get all profile holidays 
     * @description {
     *   "text": "Get holidays observed in the location(s) of the current profile during the selected period"
     * }
     */
    get: {
      /**
       * Get all profile holidays 
       * @description {
       *   "text": "Get holidays observed in the location(s) of the current profile during the selected period"
       * }
       */
      parameters: {
        query: {
          startDate: string;
          endDate: string;
          profile: string;
          workingDays?: boolean | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["PublicHoliday"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/public-holidays/holidays/related-holidays": {
    /**
     * Get all related holidays 
     * @description {
     *   "text": "Search related holidays in all public holiday calendars, during the selected period"
     * }
     */
    get: {
      /**
       * Get all related holidays 
       * @description {
       *   "text": "Search related holidays in all public holiday calendars, during the selected period"
       * }
       */
      parameters?: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          startDate?: string | null;
          endDate?: string | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["PublicHoliday"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/rd/warmups": {
    /** Get available warmup executions */
    get: {
      /** Get available warmup executions */
      parameters: {
        query: {
          $skip?: string | null;
          $top?: number | null;
          projectIdentifier: string;
          repositoryName: string;
          branch?: string | null;
          ideTypeId?: string | null;
          statuses?: (components["schemas"]["WarmupExecutionStatus"])[] | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["Rd_WarmupExec"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/reactions/{item}/{emoji}": {
    /** List reacted users and applications */
    get: {
      /** List reacted users and applications */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          item: string;
          emoji: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["CPrincipal"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /** Add reaction */
    post: {
      /** Add reaction */
      parameters: {
        path: {
          item: string;
          emoji: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /** Remove reaction */
    delete: {
      /** Remove reaction */
      parameters: {
        path: {
          item: string;
          emoji: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/reactions/{item}": {
    /** List reactions */
    get: {
      /** List reactions */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          item: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["EmojiReaction"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/rich-text/parse-markdown": {
    /**
     * Parse Markdown 
     * @description {
     *   "text": "Parses [Space markdown syntax](https://www.jetbrains.com/help/space/markdown-syntax.html) into a tree presentation"
     * }
     */
    post: {
      /**
       * Parse Markdown 
       * @description {
       *   "text": "Parses [Space markdown syntax](https://www.jetbrains.com/help/space/markdown-syntax.html) into a tree presentation"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            text: string;
            schemaVersion?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["RtDocument"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/calendar-events": {
    /**
     * Get all calendar events 
     * @deprecated 
     * @description {
     *   "text": "Get calendar events attached to an article in a specific time period"
     * }
     */
    get: {
      /**
       * Get all calendar events 
       * @deprecated 
       * @description {
       *   "text": "Get calendar events attached to an article in a specific time period"
       * }
       */
      parameters: {
        query: {
          dateFrom: string;
          dateTo: string;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["MeetingRecord"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/calendar-events/{id}": {
    /**
     * Get calendar event 
     * @deprecated 
     * @description {
     *   "text": "Get a calendar event attached to an article"
     * }
     */
    get: {
      /**
       * Get calendar event 
       * @deprecated 
       * @description {
       *   "text": "Get a calendar event attached to an article"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["MeetingRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/calendar-events/absence-events": {
    /**
     * Get all absence events 
     * @deprecated 
     * @description {
     *   "text": "Get/search absences. Parameters are applied as 'AND' filters."
     * }
     */
    get: {
      /**
       * Get all absence events 
       * @deprecated 
       * @description {
       *   "text": "Get/search absences. Parameters are applied as 'AND' filters."
       * }
       */
      parameters: {
        query: {
          dateFrom: string;
          dateTo: string;
          team?: string | null;
          location?: string | null;
          role?: string | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["AbsenceEvent"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/calendar-events/birthday-events": {
    /**
     * Get all birthday events 
     * @deprecated 
     * @description {
     *   "text": "Get/search birthdays. Parameters are applied as 'AND' filters."
     * }
     */
    get: {
      /**
       * Get all birthday events 
       * @deprecated 
       * @description {
       *   "text": "Get/search birthdays. Parameters are applied as 'AND' filters."
       * }
       */
      parameters: {
        query: {
          dateFrom: string;
          dateTo: string;
          team?: string | null;
          location?: string | null;
          role?: string | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["BirthdayEvent"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/calendar-events/birthday-events/starred": {
    /**
     * Get all starred birthday events 
     * @deprecated 
     * @description {
     *   "text": "Get/search birthdays in a specific time period for starred profiles."
     * }
     */
    get: {
      /**
       * Get all starred birthday events 
       * @deprecated 
       * @description {
       *   "text": "Get/search birthdays in a specific time period for starred profiles."
       * }
       */
      parameters: {
        query: {
          dateFrom: string;
          dateTo: string;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["BirthdayEvent"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/calendar-events/holidays": {
    /**
     * Get all holidays 
     * @deprecated 
     * @description {
     *   "text": "Get/search holidays. Parameters are applied as 'AND' filters."
     * }
     */
    get: {
      /**
       * Get all holidays 
       * @deprecated 
       * @description {
       *   "text": "Get/search holidays. Parameters are applied as 'AND' filters."
       * }
       */
      parameters: {
        query: {
          startDate: string;
          endDate: string;
          team?: string | null;
          location?: string | null;
          role?: string | null;
          workingDays?: boolean | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["HolidaysEvent"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/calendar-events/meeting-participations/{id}": {
    /**
     * Update meeting participation 
     * @deprecated 
     * @description {
     *   "text": "Update RSVP / calendar event participation status for a calendar event attached to an article"
     * }
     */
    patch: {
      /**
       * Update meeting participation 
       * @deprecated 
       * @description {
       *   "text": "Update RSVP / calendar event participation status for a calendar event attached to an article"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            newStatus: components["schemas"]["EventParticipationStatus"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["MeetingRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/calendar-events/membership-events": {
    /**
     * Get all membership events 
     * @deprecated 
     * @description {
     *   "text": "Get/search membership events. Parameters are applied as 'AND' filters."
     * }
     */
    get: {
      /**
       * Get all membership events 
       * @deprecated 
       * @description {
       *   "text": "Get/search membership events. Parameters are applied as 'AND' filters."
       * }
       */
      parameters: {
        query: {
          dateFrom: string;
          dateTo: string;
          team?: string | null;
          location?: string | null;
          role?: string | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["MembershipEvent"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/calendar-events/non-working-days-events": {
    /**
     * Get all non working days events 
     * @deprecated 
     * @description {
     *   "text": "Get/search non-working day events. Parameters are applied as 'AND' filters."
     * }
     */
    get: {
      /**
       * Get all non working days events 
       * @deprecated 
       * @description {
       *   "text": "Get/search non-working day events. Parameters are applied as 'AND' filters."
       * }
       */
      parameters: {
        query: {
          dateFrom: string;
          dateTo: string;
          member?: string | null;
          team?: string | null;
          location?: string | null;
          role?: string | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["NonWorkingDaysEvent"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/invitation-links": {
    /**
     * Get all invitation links 
     * @description {
     *   "text": "Get organization-wide invitation links"
     * }
     */
    get: {
      /**
       * Get all invitation links 
       * @description {
       *   "text": "Get organization-wide invitation links"
       * }
       */
      parameters?: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          withDeleted?: boolean;
          projects?: (string)[] | null;
          teams?: (string)[] | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["InvitationLink"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Create invitation link 
     * @description {
     *   "text": "Create an organization-wide invitation link"
     * }
     */
    post: {
      /**
       * Create invitation link 
       * @description {
       *   "text": "Create an organization-wide invitation link"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name: string;
            /** Format: date-time */
            expiresAt: string;
            /** Format: int32 */
            inviteeLimit: number;
            team?: string | null;
            role?: string | null;
            project?: components["schemas"]["ProjectIdentifier"];
            projectRole?: components["schemas"]["ProjectTeamRole"];
            globalRole?: components["schemas"]["GlobalRole"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              first: string;
              second: components["schemas"]["InvitationLink"];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/invitation-links/{invitationLinkId}": {
    /**
     * Delete invitation link 
     * @description {
     *   "text": "Delete currently active organization-wide invitation link"
     * }
     */
    delete: {
      /**
       * Delete invitation link 
       * @description {
       *   "text": "Delete currently active organization-wide invitation link"
       * }
       */
      parameters: {
        path: {
          invitationLinkId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Update invitation link 
     * @description {
     *   "text": "Update an organization-wide invitation link"
     * }
     */
    patch: {
      /**
       * Update invitation link 
       * @description {
       *   "text": "Update an organization-wide invitation link"
       * }
       */
      parameters: {
        path: {
          invitationLinkId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            name?: string | null;
            /** Format: date-time */
            expiresAt?: string | null;
            /** Format: int32 */
            inviteeLimit?: number | null;
            team?: string | null;
            position?: string | null;
            project?: components["schemas"]["ProjectIdentifier"];
            projectRole?: components["schemas"]["ProjectTeamRole"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/invitations": {
    /**
     * Get all invitations 
     * @description {
     *   "text": "Get a list of invitations"
     * }
     */
    get: {
      /**
       * Get all invitations 
       * @description {
       *   "text": "Get a list of invitations"
       * }
       */
      parameters?: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          withDeleted?: boolean;
          projects?: (string)[] | null;
          teams?: (string)[] | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["Invitation"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Create invitation 
     * @description {
     *   "text": "Create an invitation to join the current organization. Optionally, the team and/or role to join when accepting the invitation can be specified."
     * }
     */
    post: {
      /**
       * Create invitation 
       * @description {
       *   "text": "Create an invitation to join the current organization. Optionally, the team and/or role to join when accepting the invitation can be specified."
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            inviteeEmail: string;
            inviteeFirstName?: string | null;
            inviteeLastName?: string | null;
            team?: string | null;
            role?: string | null;
            project?: components["schemas"]["ProjectIdentifier"];
            projectRole?: components["schemas"]["ProjectTeamRole"];
            globalRole?: components["schemas"]["GlobalRole"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Invitation"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/invitations/{id}": {
    /**
     * Delete invitation 
     * @description {
     *   "text": "Delete an invitation. Deleted invitations can no longer be used to join the organization."
     * }
     */
    delete: {
      /**
       * Delete invitation 
       * @description {
       *   "text": "Delete an invitation. Deleted invitations can no longer be used to join the organization."
       * }
       */
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Update invitation 
     * @description {
     *   "text": "Update an invitation. Optional parameters will be ignored when not specified and updated otherwise."
     * }
     */
    patch: {
      /**
       * Update invitation 
       * @description {
       *   "text": "Update an invitation. Optional parameters will be ignored when not specified and updated otherwise."
       * }
       */
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            inviteeEmail?: string | null;
            inviteeFirstName?: string | null;
            inviteeLastName?: string | null;
            team?: string | null;
            role?: string | null;
            project?: components["schemas"]["ProjectIdentifier"];
            projectRole?: components["schemas"]["ProjectTeamRole"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/languages": {
    /**
     * Get all languages 
     * @description {
     *   "text": "Get all languages"
     * }
     */
    get: {
      /**
       * Get all languages 
       * @description {
       *   "text": "Get all languages"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["TD_Language"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/location-equipment-types": {
    /**
     * Get all location equipment types 
     * @description {
     *   "text": "Get all equipment types"
     * }
     */
    get: {
      /**
       * Get all location equipment types 
       * @description {
       *   "text": "Get all equipment types"
       * }
       */
      parameters?: {
        query?: {
          withArchived?: boolean;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["TD_LocationEquipmentType"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/location-equipment-types/name:{name}": {
    /**
     * Delete location equipment type by name 
     * @description {
     *   "text": "Archive/restore location equipment type. Setting delete to true will archive the equipment type, false will restore it."
     * }
     */
    delete: {
      /**
       * Delete location equipment type by name 
       * @description {
       *   "text": "Archive/restore location equipment type. Setting delete to true will archive the equipment type, false will restore it."
       * }
       */
      parameters: {
        query: {
          delete: boolean;
        };
        path: {
          name: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/location-map-member-points": {
    /**
     * Get all location map member points 
     * @description {
     *   "text": "Get members on a map for a location ID"
     * }
     */
    get: {
      /**
       * Get all location map member points 
       * @description {
       *   "text": "Get members on a map for a location ID"
       * }
       */
      parameters: {
        query: {
          $skip?: string | null;
          $top?: number | null;
          locationId: string;
          includeUnmarked?: boolean;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["TD_MemberInLocationMap"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Create location map member point 
     * @description {
     *   "text": "Mark member location on a map"
     * }
     */
    post: {
      /**
       * Create location map member point 
       * @description {
       *   "text": "Mark member location on a map"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            memberLocationId: string;
            /** Format: int32 */
            x: number;
            /** Format: int32 */
            y: number;
            mapId: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TD_LocationMapPoint"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/location-map-member-points/{locationPointId}": {
    /**
     * Delete location map member point 
     * @description {
     *   "text": "Delete member location from a map"
     * }
     */
    delete: {
      /**
       * Delete location map member point 
       * @description {
       *   "text": "Delete member location from a map"
       * }
       */
      parameters: {
        query: {
          delete: boolean;
        };
        path: {
          locationPointId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Update location map member point 
     * @description {
     *   "text": "Update member location on a map"
     * }
     */
    patch: {
      /**
       * Update location map member point 
       * @description {
       *   "text": "Update member location on a map"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          locationPointId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            /** Format: int32 */
            x?: number | null;
            /** Format: int32 */
            y?: number | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TD_LocationMapPoint"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/locations": {
    /**
     * Get all locations 
     * @description {
     *   "text": "Get/search all locations. Parameters are applied as 'AND' filters."
     * }
     */
    get: {
      /**
       * Get all locations 
       * @description {
       *   "text": "Get/search all locations. Parameters are applied as 'AND' filters."
       * }
       */
      parameters?: {
        query?: {
          query?: string;
          type?: string | null;
          withArchived?: boolean;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["TD_Location"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Create location 
     * @description {
     *   "text": "Create a location"
     * }
     */
    post: {
      /**
       * Create location 
       * @description {
       *   "text": "Create a location"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name: string;
            timezone?: string | null;
            workdays?: (number)[] | null;
            phones?: (string)[] | null;
            emails?: (string)[] | null;
            equipment?: (string)[] | null;
            description?: string | null;
            address?: string | null;
            type?: string | null;
            parentId?: string | null;
            /** Format: int32 */
            capacity?: number | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TD_Location"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/locations/restore": {
    /**
     * Restore multiple locations 
     * @description {
     *   "text": "Restore one or more archived locations"
     * }
     */
    post: {
      /**
       * Restore multiple locations 
       * @description {
       *   "text": "Restore one or more archived locations"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            ids: (string)[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["TD_Location"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/locations/{id}/restore": {
    /**
     * Restore location 
     * @description {
     *   "text": "Restore an archived location"
     * }
     */
    post: {
      /**
       * Restore location 
       * @description {
       *   "text": "Restore an archived location"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TD_Location"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/locations/{id}": {
    /**
     * Get location 
     * @description {
     *   "text": "Get a location by ID"
     * }
     */
    get: {
      /**
       * Get location 
       * @description {
       *   "text": "Get a location by ID"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TD_Location"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Archive location 
     * @description {
     *   "text": "Archive a location"
     * }
     */
    delete: {
      /**
       * Archive location 
       * @description {
       *   "text": "Archive a location"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["TD_Location"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Update location 
     * @description {
     *   "text": "Update a location. Optional parameters will be ignored when null and updated otherwise."
     * }
     */
    patch: {
      /**
       * Update location 
       * @description {
       *   "text": "Update a location. Optional parameters will be ignored when null and updated otherwise."
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            name?: string | null;
            timezone?: string | null;
            customWorkdays?: boolean | null;
            workdays?: (number)[] | null;
            phones?: (string)[] | null;
            emails?: (string)[] | null;
            equipment?: (string)[] | null;
            description?: string | null;
            address?: string | null;
            type?: string | null;
            parentId?: string | null;
            mapId?: string | null;
            /** Format: int32 */
            capacity?: number | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TD_Location"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/locations/{id}/map": {
    /**
     * Get map 
     * @description {
     *   "text": "Get map for a location ID"
     * }
     */
    get: {
      /**
       * Get map 
       * @description {
       *   "text": "Get map for a location ID"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TD_LocationMap"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Update map 
     * @description {
     *   "text": "Update the map for a location"
     * }
     */
    patch: {
      /**
       * Update map 
       * @description {
       *   "text": "Update the map for a location"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            mapPictureId: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TD_LocationMap"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/locations-with-timezone": {
    /**
     * Get all locations with timezone 
     * @description {
     *   "text": "Get all locations with their time zone"
     * }
     */
    get: {
      /**
       * Get all locations with timezone 
       * @description {
       *   "text": "Get all locations with their time zone"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["TD_LocationWithTimeZone"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/member-locations": {
    /**
     * Get all member locations 
     * @description {
     *   "text": "Get/search member locations. Parameters are applied as 'AND' filters."
     * }
     */
    get: {
      /**
       * Get all member locations 
       * @description {
       *   "text": "Get/search member locations. Parameters are applied as 'AND' filters."
       * }
       */
      parameters?: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          profiles?: (string)[] | null;
          locations?: (string)[] | null;
          since?: string | null;
          till?: string | null;
          withArchived?: boolean;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["TD_MemberLocation"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Create member location 
     * @description {
     *   "text": "Add a member location, optionally from/until a given date"
     * }
     */
    post: {
      /**
       * Create member location 
       * @description {
       *   "text": "Add a member location, optionally from/until a given date"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            member: components["schemas"]["ProfileIdentifier"];
            location: string;
            /** Format: full-date */
            since?: string | null;
            /** Format: full-date */
            till?: string | null;
            previousLocation?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TD_MemberLocation"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/member-locations/{memberLocationId}": {
    /**
     * Get member location 
     * @description {
     *   "text": "Get a member location by its ID"
     * }
     */
    get: {
      /**
       * Get member location 
       * @description {
       *   "text": "Get a member location by its ID"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          memberLocationId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TD_MemberLocation"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Delete member location 
     * @description {
     *   "text": "Archive/unarchive a member location. Setting delete to true will archive the member location, false will restore it."
     * }
     */
    delete: {
      /**
       * Delete member location 
       * @description {
       *   "text": "Archive/unarchive a member location. Setting delete to true will archive the member location, false will restore it."
       * }
       */
      parameters: {
        query?: {
          delete?: boolean;
        };
        path: {
          memberLocationId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Update member location 
     * @description {
     *   "text": "Update member location. Optional parameters will be ignored when null and updated otherwise."
     * }
     */
    patch: {
      /**
       * Update member location 
       * @description {
       *   "text": "Update member location. Optional parameters will be ignored when null and updated otherwise."
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          memberLocationId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            location?: string | null;
            /** Format: full-date */
            since?: string | null;
            /** Format: full-date */
            till?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TD_MemberLocation"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/membership-events": {
    /**
     * Get all membership events 
     * @description {
     *   "text": "Get/search membership events. Parameters are applied as 'AND' filters."
     * }
     */
    get: {
      /**
       * Get all membership events 
       * @description {
       *   "text": "Get/search membership events. Parameters are applied as 'AND' filters."
       * }
       */
      parameters?: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          teamId?: string | null;
          locationId?: string | null;
          roleId?: string | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["TD_MergedEvent"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/memberships": {
    /**
     * Get all memberships 
     * @description {
     *   "text": "Get/search team memberships. Parameters are applied as 'AND' filters."
     * }
     */
    get: {
      /**
       * Get all memberships 
       * @description {
       *   "text": "Get/search team memberships. Parameters are applied as 'AND' filters."
       * }
       */
      parameters?: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          identifiers?: (string)[] | null;
          profiles?: (string)[] | null;
          teams?: (string)[] | null;
          directTeams?: boolean;
          roles?: (string)[] | null;
          directRoles?: boolean;
          since?: string | null;
          till?: string | null;
          requiresApproval?: boolean | null;
          withArchived?: boolean;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["TD_Membership"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Create membership 
     * @description {
     *   "text": "Create a team membership"
     * }
     */
    post: {
      /**
       * Create membership 
       * @description {
       *   "text": "Create a team membership"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            member: components["schemas"]["ProfileIdentifier"];
            teamId: string;
            roleId: string;
            /** @default false */
            lead?: boolean;
            manager?: components["schemas"]["ProfileIdentifier"];
            /** Format: date-time */
            activeSince?: string | null;
            /** Format: date-time */
            activeTill?: string | null;
            previousMembershipId?: string | null;
            /** @default false */
            requiresApproval?: boolean;
            customFieldValues?: (components["schemas"]["CustomFieldInputValue"])[] | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TD_Membership"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/memberships/sync-batch": {
    /**
     * Get sync batch 
     * @description {
     *   "text": "Get memberships for synchronization with third-party system. Memberships with etag greater than specified value are returned. Read more in the [documentation](https://www.jetbrains.com/help/space/sync-api.html)."
     * }
     */
    get: {
      /**
       * Get sync batch 
       * @description {
       *   "text": "Get memberships for synchronization with third-party system. Memberships with etag greater than specified value are returned. Read more in the [documentation](https://www.jetbrains.com/help/space/sync-api.html)."
       * }
       */
      parameters: {
        query: {
          batchInfo: string;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              etag: string;
              data: (components["schemas"]["TD_Membership"])[];
              hasMore: boolean;
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/memberships/{membershipId}": {
    /**
     * Get membership 
     * @description {
     *   "text": "Get a single membership by its identifier"
     * }
     */
    get: {
      /**
       * Get membership 
       * @description {
       *   "text": "Get a single membership by its identifier"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          membershipId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TD_Membership"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Delete membership 
     * @description {
     *   "text": "Archive/unarchive a team membership. Setting delete to true will archive the membership, false will restore it."
     * }
     */
    delete: {
      /**
       * Delete membership 
       * @description {
       *   "text": "Archive/unarchive a team membership. Setting delete to true will archive the membership, false will restore it."
       * }
       */
      parameters: {
        query?: {
          delete?: boolean;
        };
        path: {
          membershipId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Update membership 
     * @description {
     *   "text": "Update a team membership. Optional parameters will be ignored when null and updated otherwise."
     * }
     */
    patch: {
      /**
       * Update membership 
       * @description {
       *   "text": "Update a team membership. Optional parameters will be ignored when null and updated otherwise."
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          membershipId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            teamId?: string | null;
            roleId?: string | null;
            lead?: boolean | null;
            manager?: components["schemas"]["ProfileIdentifier"];
            /** Format: date-time */
            activeSince?: string | null;
            /** Format: date-time */
            activeTill?: string | null;
            /** @default false */
            requiresApproval?: boolean;
            customFieldValues?: (components["schemas"]["CustomFieldInputValue"])[] | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TD_Membership"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/memberships/{membershipId}/revoke": {
    /**
     * Revoke membership 
     * @description {
     *   "text": "Revoke a team membership to end at a given date/time"
     * }
     */
    delete: {
      /**
       * Revoke membership 
       * @description {
       *   "text": "Revoke a team membership to end at a given date/time"
       * }
       */
      parameters: {
        query?: {
          till?: string | null;
        };
        path: {
          membershipId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/memberships/manager-candidates": {
    /**
     * Get manager candidate 
     * @description {
     *   "text": "Query profiles that can be a manager"
     * }
     */
    get: {
      /**
       * Get manager candidate 
       * @description {
       *   "text": "Query profiles that can be a manager"
       * }
       */
      parameters: {
        query: {
          $skip?: string | null;
          $top?: number | null;
          term: string;
          teamId?: string | null;
          excludedMemberId?: string | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["TD_MemberProfile"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/memberships/requests": {
    /**
     * Get all requests 
     * @description {
     *   "text": "Get/search all membership requests. Parameters are applied as 'AND' filters."
     * }
     */
    get: {
      /**
       * Get all requests 
       * @description {
       *   "text": "Get/search all membership requests. Parameters are applied as 'AND' filters."
       * }
       */
      parameters?: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          teamId?: string | null;
          direct?: boolean | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: ({
                  first: components["schemas"]["TD_MemberProfile"];
                  second: components["schemas"]["TD_Membership"];
                })[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/memberships/requests/{membershipRequestId}": {
    /**
     * Delete request 
     * @description {
     *   "text": "Delete a team membership request"
     * }
     */
    delete: {
      /**
       * Delete request 
       * @description {
       *   "text": "Delete a team membership request"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          membershipRequestId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TD_Membership"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Update request 
     * @description {
     *   "text": "Approve/reject a team membership request. Setting approved to true will approve the membership request, false will reject it."
     * }
     */
    patch: {
      /**
       * Update request 
       * @description {
       *   "text": "Approve/reject a team membership request. Setting approved to true will approve the membership request, false will reject it."
       * }
       */
      parameters: {
        path: {
          membershipRequestId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            approved: boolean;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/memberships/{membershipId}/request-revoke": {
    /**
     * Request membership revocation 
     * @description {
     *   "text": "Request a team membership to end at a given date/time. Will need approval."
     * }
     */
    patch: {
      /**
       * Request membership revocation 
       * @description {
       *   "text": "Request a team membership to end at a given date/time. Will need approval."
       * }
       */
      parameters: {
        path: {
          membershipId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: date-time */
            till: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles": {
    /**
     * Get all profiles 
     * @description {
     *   "text": "Get/search all profiles. Parameters are applied as 'AND' filters."
     * }
     */
    get: {
      /**
       * Get all profiles 
       * @description {
       *   "text": "Get/search all profiles. Parameters are applied as 'AND' filters."
       * }
       */
      parameters?: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          query?: string;
          reportPastMembers?: boolean;
          reportFutureMembers?: boolean | null;
          reportCurrentMembers?: boolean | null;
          teamId?: string | null;
          locationId?: string | null;
          roleId?: string | null;
          meOnTop?: boolean;
          order?: components["schemas"]["ProfileOrder"];
          orgRelation?: components["schemas"]["ProfileOrgRelation"];
          profiles?: (string)[] | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["TD_MemberProfile"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Create profile 
     * @description {
     *   "text": "Create a profile"
     * }
     */
    post: {
      /**
       * Create profile 
       * @description {
       *   "text": "Create a profile"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            username: string;
            firstName: string;
            lastName: string;
            /** @default [] */
            emails?: (string)[];
            /** @default [] */
            phones?: (string)[];
            /** Format: full-date */
            birthday?: string | null;
            about?: string | null;
            /** @default [] */
            messengers?: (string)[];
            /** @default [] */
            links?: (string)[];
            /** @default false */
            notAMember?: boolean;
            /** Format: full-date */
            joined?: string | null;
            /** Format: full-date */
            left?: string | null;
            /** Format: date-time */
            leftAt?: string | null;
            speaksEnglish?: boolean | null;
            pictureAttachmentId?: string | null;
            avatarCropSquare?: components["schemas"]["AvatarCropSquare"];
            /** @default [] */
            customFieldValues?: (components["schemas"]["CustomFieldInputValue"])[];
            externalId?: string | null;
            location?: string | null;
            guest?: boolean | null;
            guestType?: components["schemas"]["GuestType"];
            project?: components["schemas"]["ProjectIdentifier"];
            projectRole?: components["schemas"]["ProjectTeamRole"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TD_MemberProfile"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/email:{email}": {
    /**
     * Get profile by email 
     * @description {
     *   "text": "Get profile information by email address"
     * }
     */
    get: {
      /**
       * Get profile by email 
       * @description {
       *   "text": "Get profile information by email address"
       * }
       */
      parameters: {
        query?: {
          verified?: boolean;
          $fields?: string;
        };
        path: {
          email: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TD_MemberProfile"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}": {
    /**
     * Get profile 
     * @description {
     *   "text": "Get profile information"
     * }
     */
    get: {
      /**
       * Get profile 
       * @description {
       *   "text": "Get profile information"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          profile: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TD_MemberProfile"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Delete profile 
     * @description {
     *   "text": "Delete a profile"
     * }
     */
    delete: {
      /**
       * Delete profile 
       * @description {
       *   "text": "Delete a profile"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          profile: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TD_MemberProfile"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Update profile 
     * @description {
     *   "text": "Update a profile. Optional parameters will be ignored when null and updated otherwise."
     * }
     */
    patch: {
      /**
       * Update profile 
       * @description {
       *   "text": "Update a profile. Optional parameters will be ignored when null and updated otherwise."
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          profile: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            username?: string | null;
            firstName?: string | null;
            lastName?: string | null;
            emails?: (string)[] | null;
            phones?: (string)[] | null;
            /** Format: full-date */
            birthday?: string | null;
            about?: string | null;
            messengers?: (string)[] | null;
            links?: (string)[] | null;
            notAMember?: boolean | null;
            /** Format: full-date */
            joined?: string | null;
            /** Format: full-date */
            left?: string | null;
            /** Format: date-time */
            leftAt?: string | null;
            speaksEnglish?: boolean | null;
            pictureAttachmentId?: string | null;
            avatarCropSquare?: components["schemas"]["AvatarCropSquare"];
            customFieldValues?: (components["schemas"]["CustomFieldInputValue"])[] | null;
            externalId?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TD_MemberProfile"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/is-team-member": {
    /**
     * Check if profile is team member 
     * @description {
     *   "text": "Check if a user profile is a member of one or more teams"
     * }
     */
    get: {
      /**
       * Check if profile is team member 
       * @description {
       *   "text": "Check if a user profile is a member of one or more teams"
       * }
       */
      parameters: {
        query: {
          teamIds: (string)[];
        };
        path: {
          profile: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": boolean;
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/convert-to-guest": {
    /**
     * Convert organization member into guest user 
     * @description {
     *   "text": "Convert to guest profile"
     * }
     */
    patch: {
      /**
       * Convert organization member into guest user 
       * @description {
       *   "text": "Convert to guest profile"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          profile: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            dryrun: boolean;
            guestType?: components["schemas"]["GuestType"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["DryRunResult"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/convert-to-member": {
    /**
     * Convert guest user into organization member 
     * @description {
     *   "text": "Convert to organization member"
     * }
     */
    patch: {
      /**
       * Convert guest user into organization member 
       * @description {
       *   "text": "Convert to organization member"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          profile: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            dryrun: boolean;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["DryRunResult"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/reactivate": {
    /**
     * Reactivate user profile 
     * @description {
     *   "text": "Reactivate a user profile"
     * }
     */
    patch: {
      /**
       * Reactivate user profile 
       * @description {
       *   "text": "Reactivate a user profile"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          profile: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            /** Format: full-date */
            joined?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TD_MemberProfile"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/restore": {
    /**
     * Restore suspended user profile 
     * @description {
     *   "text": "Restore a suspended user profile"
     * }
     */
    patch: {
      /**
       * Restore suspended user profile 
       * @description {
       *   "text": "Restore a suspended user profile"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          profile: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TD_MemberProfile"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/suspend": {
    /**
     * Suspend user profile 
     * @description {
     *   "text": "Suspend a user profile"
     * }
     */
    patch: {
      /**
       * Suspend user profile 
       * @description {
       *   "text": "Suspend a user profile"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          profile: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            /** Format: date-time */
            at?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TD_MemberProfile"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/deactivate": {
    /**
     * Deactivate user profile 
     * @description {
     *   "text": "Deactivate a user profile"
     * }
     */
    delete: {
      /**
       * Deactivate user profile 
       * @description {
       *   "text": "Deactivate a user profile"
       * }
       */
      parameters: {
        query: {
          at: string;
          $fields?: string;
        };
        path: {
          profile: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TD_MemberProfile"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/authentication-sessions/{owner}": {
    /**
     * Get all authentication sessions 
     * @description {
     *   "text": "Get the current authentication sessions for a given profile ID"
     * }
     */
    get: {
      /**
       * Get all authentication sessions 
       * @description {
       *   "text": "Get the current authentication sessions for a given profile ID"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          owner: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["ES_AuthenticationSession"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/authentication-sessions/{owner}/{sessionId}": {
    /**
     * Terminate own authentication session 
     * @description {
     *   "text": "Terminate an existing authentication session. Doing so will close the session and log out."
     * }
     */
    delete: {
      /**
       * Terminate own authentication session 
       * @description {
       *   "text": "Terminate an existing authentication session. Doing so will close the session and log out."
       * }
       */
      parameters: {
        path: {
          owner: string;
          sessionId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/dashboards/{dashboard}": {
    /** Get dashboard */
    get: {
      /** Get dashboard */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          dashboard: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["DashboardPreferencesRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /** Update dashboard */
    patch: {
      /** Update dashboard */
      parameters: {
        path: {
          dashboard: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            data: ((components["schemas"]["DashboardItemData"])[])[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/favorites": {
    /**
     * Add to favorites 
     * @description {
     *   "text": "Add an entity with the given `id` and of the given `kind` to favorites. For profiles this operation is called “follow” in the user interface."
     * }
     */
    post: {
      /**
       * Add to favorites 
       * @description {
       *   "text": "Add an entity with the given `id` and of the given `kind` to favorites. For profiles this operation is called “follow” in the user interface."
       * }
       */
      requestBody: {
        content: {
          "application/json": {
            id: string;
            kind: components["schemas"]["StarredItemKind"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/favorites/deployment-targets": {
    /**
     * Get favorite deployment targets 
     * @description {
     *   "text": "IDs of favorite deployment targets"
     * }
     */
    get: {
      /**
       * Get favorite deployment targets 
       * @description {
       *   "text": "IDs of favorite deployment targets"
       * }
       */
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (string)[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/favorites/documents": {
    /**
     * Get favorite documents 
     * @description {
     *   "text": "IDs of favorite documents"
     * }
     */
    get: {
      /**
       * Get favorite documents 
       * @description {
       *   "text": "IDs of favorite documents"
       * }
       */
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (string)[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/favorites/jobs": {
    /**
     * Get favorite jobs 
     * @description {
     *   "text": "IDs of favorite jobs"
     * }
     */
    get: {
      /**
       * Get favorite jobs 
       * @description {
       *   "text": "IDs of favorite jobs"
       * }
       */
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (string)[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/favorites/locations": {
    /**
     * Get favorite locations 
     * @description {
     *   "text": "Favorite locations"
     * }
     */
    get: {
      /**
       * Get favorite locations 
       * @description {
       *   "text": "Favorite locations"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["TD_Location"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/favorites/profiles": {
    /**
     * Get followed profiles 
     * @description {
     *   "text": "Followed profiles"
     * }
     */
    get: {
      /**
       * Get followed profiles 
       * @description {
       *   "text": "Followed profiles"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["TD_MemberProfile"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/favorites/projects": {
    /**
     * Get favorite projects 
     * @description {
     *   "text": "Favorite projects"
     * }
     */
    get: {
      /**
       * Get favorite projects 
       * @description {
       *   "text": "Favorite projects"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["PR_Project"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/favorites/repositories": {
    /**
     * Get favorite repositories 
     * @description {
     *   "text": "IDs of favorite code repositories"
     * }
     */
    get: {
      /**
       * Get favorite repositories 
       * @description {
       *   "text": "IDs of favorite code repositories"
       * }
       */
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (string)[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/favorites/teams": {
    /**
     * Get favorite teams 
     * @description {
     *   "text": "Favorite teams"
     * }
     */
    get: {
      /**
       * Get favorite teams 
       * @description {
       *   "text": "Favorite teams"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["TD_Team"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/favorites/{id}": {
    /**
     * Remove from favorites 
     * @description {
     *   "text": "Remove an entity with the given `id` and of the given `kind` from favorites. For profiles this operation is called “unfollow” in the user interface."
     * }
     */
    delete: {
      /**
       * Remove from favorites 
       * @description {
       *   "text": "Remove an entity with the given `id` and of the given `kind` from favorites. For profiles this operation is called “unfollow” in the user interface."
       * }
       */
      parameters: {
        query: {
          kind: components["schemas"]["StarredItemKind"];
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/grammar-dictionary": {
    /**
     * Get the personal dictionary entries 
     * @description {
     *   "text": "This endpoint will return user's personal grammar dictionary entries"
     * }
     */
    get: {
      /**
       * Get the personal dictionary entries 
       * @description {
       *   "text": "This endpoint will return user's personal grammar dictionary entries"
       * }
       */
      parameters: {
        query: {
          profileId: string;
          dictionaryType: components["schemas"]["GrammarDictionaryType"];
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["GrammarDictionaryEntry_DTO"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/grammar-dictionary/add": {
    /**
     * Add the entry to the personal dictionary 
     * @description {
     *   "text": "This endpoint will try to add an entry to the user's personal grammar dictionary and return true if the value is valid for dictionary, were not present before and then added and false otherwise."
     * }
     */
    post: {
      /**
       * Add the entry to the personal dictionary 
       * @description {
       *   "text": "This endpoint will try to add an entry to the user's personal grammar dictionary and return true if the value is valid for dictionary, were not present before and then added and false otherwise."
       * }
       */
      requestBody: {
        content: {
          "application/json": {
            profileId: components["schemas"]["ProfileIdentifier"];
            dictionaryType: components["schemas"]["GrammarDictionaryType"];
            entry: components["schemas"]["GrammarDictionaryEntry_DTO"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": boolean;
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/grammar-dictionary/remove": {
    /**
     * Remove the entry from the personal dictionary 
     * @description {
     *   "text": "This endpoint will try to remove an entry from the user's personal grammar dictionary and return true if the value was present and removed and false otherwise."
     * }
     */
    delete: {
      /**
       * Remove the entry from the personal dictionary 
       * @description {
       *   "text": "This endpoint will try to remove an entry from the user's personal grammar dictionary and return true if the value was present and removed and false otherwise."
       * }
       */
      parameters: {
        query: {
          profileId: string;
          dictionaryType: components["schemas"]["GrammarDictionaryType"];
          entryValue: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": boolean;
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/oauth-consents/{owner}": {
    /**
     * Get OAuth consents 
     * @description {
     *   "text": "Get all OAuth consents for a given profile ID"
     * }
     */
    get: {
      /**
       * Get OAuth consents 
       * @description {
       *   "text": "Get all OAuth consents for a given profile ID"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          owner: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["ES_OAuthConsent"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/oauth-consents/me/refresh-tokens/self": {
    /**
     * Delete self 
     * @description {
     *   "text": "Remove caller's own refresh token. This will require the client to re-authenticate."
     * }
     */
    delete: {
      /**
       * Delete self 
       * @description {
       *   "text": "Remove caller's own refresh token. This will require the client to re-authenticate."
       * }
       */
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/oauth-consents/{owner}/applications/{application}": {
    /**
     * Delete application 
     * @description {
     *   "text": "Remove a previously approved application"
     * }
     */
    delete: {
      /**
       * Delete application 
       * @description {
       *   "text": "Remove a previously approved application"
       * }
       */
      parameters: {
        path: {
          owner: string;
          application: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/oauth-consents/{owner}/approved-scopes/{id}": {
    /**
     * Delete approved scope 
     * @description {
     *   "text": "Remove a previously approved scope"
     * }
     */
    delete: {
      /**
       * Delete approved scope 
       * @description {
       *   "text": "Remove a previously approved scope"
       * }
       */
      parameters: {
        path: {
          owner: string;
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/oauth-consents/{owner}/internal-applications/{clientId}": {
    /**
     * Delete internal application 
     * @description {
     *   "text": "Remove a previously approved internal application"
     * }
     */
    delete: {
      /**
       * Delete internal application 
       * @description {
       *   "text": "Remove a previously approved internal application"
       * }
       */
      parameters: {
        path: {
          owner: string;
          clientId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/oauth-consents/{owner}/refresh-tokens/{id}": {
    /**
     * Delete refresh token 
     * @description {
     *   "text": "Remove a refresh token. This will require the client to re-authenticate."
     * }
     */
    delete: {
      /**
       * Delete refresh token 
       * @description {
       *   "text": "Remove a refresh token. This will require the client to re-authenticate."
       * }
       */
      parameters: {
        path: {
          owner: string;
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/widget-settings/{widget}": {
    /** Get widget setting */
    get: {
      /** Get widget setting */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          widget: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["WidgetSettingsRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /** Update widget setting */
    patch: {
      /** Update widget setting */
      parameters: {
        path: {
          widget: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            settings: components["schemas"]["WidgetSettingsDTO"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/working-days": {
    /**
     * Query all working days 
     * @description {
     *   "text": "Returns pairs of profiles and their working days. If several working days settings are defined for the same profile then several pairs are returned."
     * }
     */
    get: {
      /**
       * Query all working days 
       * @description {
       *   "text": "Returns pairs of profiles and their working days. If several working days settings are defined for the same profile then several pairs are returned."
       * }
       */
      parameters?: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          profiles?: (string)[];
          since?: string | null;
          till?: string | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["TD_ProfileWorkingDays"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/2-fa/requirements": {
    /**
     * Two-factor authentication requirements 
     * @description {
     *   "text": "Get two-factor authentication requirements for a given profile ID. The response indicates whether two-factor authentication is required by participation in some permission roles."
     * }
     */
    get: {
      /**
       * Two-factor authentication requirements 
       * @description {
       *   "text": "Get two-factor authentication requirements for a given profile ID. The response indicates whether two-factor authentication is required by participation in some permission roles."
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          profile: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["Profile2FARequirement"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/2-fa/status": {
    /**
     * Two-factor authentication status 
     * @description {
     *   "text": "Get two-factor authentication status for a given profile ID. The response indicates whether two-factor authentication is active, not active, or not set up yet."
     * }
     */
    get: {
      /**
       * Two-factor authentication status 
       * @description {
       *   "text": "Get two-factor authentication status for a given profile ID. The response indicates whether two-factor authentication is active, not active, or not set up yet."
       * }
       */
      parameters: {
        path: {
          profile: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TwoFactorAuthenticationStatus"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/2-fa/totp": {
    /**
     * Set up TOTP two-factor authentication 
     * @description {
     *   "text": "Set up two-factor authentication using TOTP (Time-based One-time Password) for a given profile ID. The response will return a QR code (base64 encoded) that can be scanned with an app to setup two-factor authentication. The code that the app generates has to be confirmed in Space to enable TOTP."
     * }
     */
    post: {
      /**
       * Set up TOTP two-factor authentication 
       * @description {
       *   "text": "Set up two-factor authentication using TOTP (Time-based One-time Password) for a given profile ID. The response will return a QR code (base64 encoded) that can be scanned with an app to setup two-factor authentication. The code that the app generates has to be confirmed in Space to enable TOTP."
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          profile: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TwoFactorAuthenticationSecret"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Delete current TOTP two-factor authentication settings 
     * @description {
     *   "text": "Remove two-factor authentication settings for a given profile ID. Previously generated TOTP (Time-based One-time Password) are rendered invalid."
     * }
     */
    delete: {
      /**
       * Delete current TOTP two-factor authentication settings 
       * @description {
       *   "text": "Remove two-factor authentication settings for a given profile ID. Previously generated TOTP (Time-based One-time Password) are rendered invalid."
       * }
       */
      parameters: {
        query?: {
          code?: number | null;
        };
        path: {
          profile: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Update TOTP two-factor authentication settings 
     * @description {
     *   "text": "Enable/disable two-factor authentication settings for a given profile ID"
     * }
     */
    patch: {
      /**
       * Update TOTP two-factor authentication settings 
       * @description {
       *   "text": "Enable/disable two-factor authentication settings for a given profile ID"
       * }
       */
      parameters: {
        path: {
          profile: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            enabled: boolean;
            /** Format: int32 */
            code?: number | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/2-fa/totp/confirm": {
    /**
     * Confirm TOTP two-factor authentication settings 
     * @description {
     *   "text": "Confirm two-factor authentication for a given profile ID using a TOTP (Time-based One-time Password) code from an app."
     * }
     */
    post: {
      /**
       * Confirm TOTP two-factor authentication settings 
       * @description {
       *   "text": "Confirm two-factor authentication for a given profile ID using a TOTP (Time-based One-time Password) code from an app."
       * }
       */
      parameters: {
        path: {
          profile: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: int32 */
            code: number;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/application-passwords": {
    /** Get all application passwords */
    get: {
      /** Get all application passwords */
      parameters: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
        path: {
          profile: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["ES_ApplicationPassword"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
    /** Create application password */
    post: {
      /** Create application password */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          profile: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name: string;
            scope: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              first: components["schemas"]["ES_ApplicationPassword"];
              second: string;
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/application-passwords/{passwordId}": {
    /** Delete application password */
    delete: {
      /** Delete application password */
      parameters: {
        path: {
          profile: string;
          passwordId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /** Update application password */
    patch: {
      /** Update application password */
      parameters: {
        path: {
          profile: string;
          passwordId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            name?: string | null;
            scope?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/checklists": {
    /**
     * Create checklist 
     * @deprecated 
     * @description {
     *   "text": "Create a new checklist associated with the profile"
     * }
     */
    post: {
      /**
       * Create checklist 
       * @deprecated 
       * @description {
       *   "text": "Create a new checklist associated with the profile"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          profile: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Checklist"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/checklists/import": {
    /**
     * Import checklist 
     * @deprecated 
     * @description {
     *   "text": "Create a new checklist associated with the profile using tab indented lines as checkable items.\nThe items with the same indent level will be placed one under the other.\nAn issue URL will be converted into the corresponding issue."
     * }
     */
    post: {
      /**
       * Import checklist 
       * @deprecated 
       * @description {
       *   "text": "Create a new checklist associated with the profile using tab indented lines as checkable items.\nThe items with the same indent level will be placed one under the other.\nAn issue URL will be converted into the corresponding issue."
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          profile: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name: string;
            tabIndentedLines: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Checklist"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/checklists/{checklistId}/import": {
    /**
     * Import checklist lines 
     * @description {
     *   "text": "Tab indented lines are converted into checkable items following the same rules as in Import Checklist.\nThe result is placed inside of the specified personal checklist."
     * }
     */
    post: {
      /**
       * Import checklist lines 
       * @description {
       *   "text": "Tab indented lines are converted into checkable items following the same rules as in Import Checklist.\nThe result is placed inside of the specified personal checklist."
       * }
       */
      parameters: {
        path: {
          profile: string;
          checklistId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            targetParentId: string;
            afterItemId?: string | null;
            tabIndentedLines: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/checklists/{checklistId}": {
    /**
     * Delete checklist 
     * @deprecated 
     * @description {
     *   "text": "Delete an existing checklist associated with the profile"
     * }
     */
    delete: {
      /**
       * Delete checklist 
       * @deprecated 
       * @description {
       *   "text": "Delete an existing checklist associated with the profile"
       * }
       */
      parameters: {
        path: {
          profile: string;
          checklistId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Update checklist 
     * @deprecated 
     * @description {
     *   "text": "Update an existing checklist associated with the profile"
     * }
     */
    patch: {
      /**
       * Update checklist 
       * @deprecated 
       * @description {
       *   "text": "Update an existing checklist associated with the profile"
       * }
       */
      parameters: {
        path: {
          profile: string;
          checklistId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            name?: string;
            description?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/checklists/{checklistId}/full-checklist-tree": {
    /**
     * Get full checklist tree 
     * @description {
     *   "text": "Get the content of a checklist associated with the profile"
     * }
     */
    get: {
      /**
       * Get full checklist tree 
       * @description {
       *   "text": "Get the content of a checklist associated with the profile"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          profile: string;
          checklistId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["PlanItemChildren"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/documents": {
    /**
     * Create document 
     * @description {
     *   "text": ""
     * }
     */
    post: {
      /**
       * Create document 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          profile: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name: string;
            folder: components["schemas"]["FolderIdentifier"];
            bodyIn: components["schemas"]["DocumentBodyCreateIn"];
            publicationDetailsIn?: components["schemas"]["PublicationDetailsIn"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Document"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/documents/{documentId}": {
    /**
     * Get document 
     * @description {
     *   "text": ""
     * }
     */
    get: {
      /**
       * Get document 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          profile: string;
          documentId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Document"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Archive document 
     * @description {
     *   "text": ""
     * }
     */
    delete: {
      /**
       * Archive document 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        path: {
          profile: string;
          documentId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Update document 
     * @description {
     *   "text": ""
     * }
     */
    patch: {
      /**
       * Update document 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          profile: string;
          documentId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            name?: string | null;
            updateIn?: components["schemas"]["DocumentBodyUpdateIn"];
            publicationDetailsIn?: components["schemas"]["PublicationDetailsIn"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Document"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/documents/folders": {
    /**
     * Create folder 
     * @description {
     *   "text": ""
     * }
     */
    post: {
      /**
       * Create folder 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          profile: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name: string;
            parentFolder: components["schemas"]["FolderIdentifier"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["DocumentFolder"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/documents/folders/{folder}": {
    /**
     * Get folder 
     * @description {
     *   "text": ""
     * }
     */
    get: {
      /**
       * Get folder 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          profile: string;
          folder: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["DocumentFolder"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Archive folder 
     * @description {
     *   "text": ""
     * }
     */
    delete: {
      /**
       * Archive folder 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        path: {
          profile: string;
          folder: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Rename folder 
     * @description {
     *   "text": ""
     * }
     */
    patch: {
      /**
       * Rename folder 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        path: {
          profile: string;
          folder: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/documents/folders/{folder}/access": {
    /**
     * Folder own access permissions 
     * @description {
     *   "text": ""
     * }
     */
    get: {
      /**
       * Folder own access permissions 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          profile: string;
          folder: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["FolderAccess"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Update folder access permissions 
     * @description {
     *   "text": ""
     * }
     */
    patch: {
      /**
       * Update folder access permissions 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        path: {
          profile: string;
          folder: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            accessChange: components["schemas"]["UpdateFolderAccessIn"];
            /** @default false */
            silent?: boolean;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/documents/folders/{folder}/documents": {
    /**
     * List documents in folder 
     * @description {
     *   "text": ""
     * }
     */
    get: {
      /**
       * List documents in folder 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          withArchived?: boolean;
          sortBy?: string | null;
          order?: components["schemas"]["ColumnSortOrder"];
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
        path: {
          profile: string;
          folder: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["Document"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/documents/folders/{folder}/introduction/{documentId}": {
    /**
     * Add folder introduction 
     * @description {
     *   "text": ""
     * }
     */
    patch: {
      /**
       * Add folder introduction 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        path: {
          profile: string;
          folder: string;
          documentId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/documents/folders/{folder}/introduction": {
    /**
     * Remove folder introduction 
     * @description {
     *   "text": ""
     * }
     */
    delete: {
      /**
       * Remove folder introduction 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        path: {
          profile: string;
          folder: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/documents/folders/{folder}/move": {
    /**
     * Move folder 
     * @description {
     *   "text": ""
     * }
     */
    patch: {
      /**
       * Move folder 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          profile: string;
          folder: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            parentFolder: components["schemas"]["FolderIdentifier"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["DocumentFolder"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/documents/folders/{folder}/search": {
    /**
     * Search documents and folders 
     * @description {
     *   "text": "Executes search for personal documents and folders in specified folder"
     * }
     */
    get: {
      /**
       * Search documents and folders 
       * @description {
       *   "text": "Executes search for personal documents and folders in specified folder"
       * }
       */
      parameters: {
        query: {
          query: string;
          includeBody?: boolean | null;
          foldersOnly?: boolean | null;
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
        path: {
          profile: string;
          folder: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["DocumentFolderItem"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/documents/folders/{folder}/subfolders": {
    /**
     * List subfolders 
     * @description {
     *   "text": ""
     * }
     */
    get: {
      /**
       * List subfolders 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          withArchived?: boolean;
          sortBy?: string | null;
          order?: components["schemas"]["ColumnSortOrder"];
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
        path: {
          profile: string;
          folder: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["DocumentFolder"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/documents/{documentId}/access": {
    /**
     * Document own access permissions 
     * @description {
     *   "text": ""
     * }
     */
    get: {
      /**
       * Document own access permissions 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          profile: string;
          documentId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["DocumentAccess"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Update document access permissions 
     * @description {
     *   "text": ""
     * }
     */
    patch: {
      /**
       * Update document access permissions 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        path: {
          profile: string;
          documentId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            accessChange: components["schemas"]["UpdateDocumentAccessIn"];
            /** @default false */
            silent?: boolean;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/documents/{documentId}/copy": {
    /**
     * Copy document 
     * @description {
     *   "text": ""
     * }
     */
    post: {
      /**
       * Copy document 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          profile: string;
          documentId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name: string;
            folder: components["schemas"]["FolderIdentifier"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Document"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/documents/{documentId}/delete-forever": {
    /**
     * Delete document forever 
     * @description {
     *   "text": ""
     * }
     */
    delete: {
      /**
       * Delete document forever 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        path: {
          profile: string;
          documentId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/documents/{documentId}/move": {
    /**
     * Move document 
     * @description {
     *   "text": ""
     * }
     */
    patch: {
      /**
       * Move document 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          profile: string;
          documentId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            folder: components["schemas"]["FolderIdentifier"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Document"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/documents/{documentId}/unarchive": {
    /**
     * Unarchive document 
     * @description {
     *   "text": ""
     * }
     */
    patch: {
      /**
       * Unarchive document 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          profile: string;
          documentId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Document"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/gpg-keys": {
    /**
     * List public GPG keys 
     * @description {
     *   "text": "List GPG public keys associated with a profile"
     * }
     */
    get: {
      /**
       * List public GPG keys 
       * @description {
       *   "text": "List GPG public keys associated with a profile"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          profile: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["GpgKeyData"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /** Add public GPG key */
    post: {
      /** Add public GPG key */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          profile: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            key: string;
            /** @default */
            comment?: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GpgKeyData"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/gpg-keys/{fingerprint}": {
    /** Delete public GPG key */
    delete: {
      /** Delete public GPG key */
      parameters: {
        path: {
          profile: string;
          fingerprint: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /** Revoke public GPG key */
    patch: {
      /** Revoke public GPG key */
      parameters: {
        path: {
          profile: string;
          fingerprint: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            /** @default */
            comment?: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/leads": {
    /**
     * Get all leads 
     * @deprecated 
     * @description {
     *   "text": "Get team leads for a given profile ID"
     * }
     */
    get: {
      /**
       * Get all leads 
       * @deprecated 
       * @description {
       *   "text": "Get team leads for a given profile ID"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          profile: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["TD_MemberProfile"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/nav-bar-menu-items": {
    /** Get all nav bar menu items */
    get: {
      /** Get all nav bar menu items */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          profile: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["NavBarMenuItem"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Update nav bar menu item 
     * @description {
     *   "text": "Toggle visibility for a given navigation bar item"
     * }
     */
    patch: {
      /**
       * Update nav bar menu item 
       * @description {
       *   "text": "Toggle visibility for a given navigation bar item"
       * }
       */
      parameters: {
        path: {
          profile: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            item: string;
            enabled: boolean;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/nav-bar-projects": {
    /**
     * Get all nav bar projects 
     * @description {
     *   "text": "Add a project to the navigation bar"
     * }
     */
    get: {
      /**
       * Get all nav bar projects 
       * @description {
       *   "text": "Add a project to the navigation bar"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          profile: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["PR_Project"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Create nav bar project 
     * @description {
     *   "text": "Add a project to the navigation bar"
     * }
     */
    post: {
      /**
       * Create nav bar project 
       * @description {
       *   "text": "Add a project to the navigation bar"
       * }
       */
      parameters: {
        path: {
          profile: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            project: components["schemas"]["ProjectIdentifier"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/nav-bar-projects/{project}": {
    /**
     * Delete nav bar project 
     * @description {
     *   "text": "Remove a project from the navigation bar"
     * }
     */
    delete: {
      /**
       * Delete nav bar project 
       * @description {
       *   "text": "Remove a project from the navigation bar"
       * }
       */
      parameters: {
        path: {
          profile: string;
          project: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/notification-settings": {
    /**
     * Get Space global notification settings for a profile 
     * @description {
     *   "text": ""
     * }
     */
    get: {
      /**
       * Get Space global notification settings for a profile 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          profile: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GlobalNotificationSettings"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Set Space global notification settings for a profile 
     * @description {
     *   "text": ""
     * }
     */
    patch: {
      /**
       * Set Space global notification settings for a profile 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        path: {
          profile: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            emailNotificationsEnabled?: boolean | null;
            notificationEmail?: string | null;
            pushNotificationEnabled?: boolean | null;
            /** Format: int32 */
            desktopInactivityTimeout?: number | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/permanent-tokens": {
    /**
     * Get all permanent tokens 
     * @description {
     *   "text": "Get personal tokens used to access the current organization for the given profile"
     * }
     */
    get: {
      /**
       * Get all permanent tokens 
       * @description {
       *   "text": "Get personal tokens used to access the current organization for the given profile"
       * }
       */
      parameters: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
        path: {
          profile: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["ES_PersonalToken"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Create permanent token 
     * @description {
     *   "text": "Create a personal token for the given profile that can be used to access the current organization"
     * }
     */
    post: {
      /**
       * Create permanent token 
       * @description {
       *   "text": "Create a personal token for the given profile that can be used to access the current organization"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          profile: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name: string;
            scope: string;
            /** Format: date-time */
            expires?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              first: components["schemas"]["ES_PersonalToken"];
              second: string;
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/permanent-tokens/{tokenId}": {
    /**
     * Delete permanent token 
     * @description {
     *   "text": "Delete a specific personal token used to access the current organization"
     * }
     */
    delete: {
      /**
       * Delete permanent token 
       * @description {
       *   "text": "Delete a specific personal token used to access the current organization"
       * }
       */
      parameters: {
        path: {
          profile: string;
          tokenId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Update permanent token 
     * @description {
     *   "text": "Update an existing personal token used to access the current organization. The name and/or scope of the personal token can be updated."
     * }
     */
    patch: {
      /**
       * Update permanent token 
       * @description {
       *   "text": "Update an existing personal token used to access the current organization. The name and/or scope of the personal token can be updated."
       * }
       */
      parameters: {
        path: {
          profile: string;
          tokenId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            name?: string | null;
            scope?: string | null;
            /** Format: date-time */
            expires?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/permanent-tokens/current": {
    /**
     * Delete current permanent token 
     * @description {
     *   "text": "Delete personal token of the given profile"
     * }
     */
    delete: {
      /**
       * Delete current permanent token 
       * @description {
       *   "text": "Delete personal token of the given profile"
       * }
       */
      parameters: {
        path: {
          profile: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/settings": {
    /**
     * Get Space personalization data for a profile 
     * @description {
     *   "text": "This endpoint will return profile information and Space personalisation data such as projects in the navigation bar, etc."
     * }
     */
    get: {
      /**
       * Get Space personalization data for a profile 
       * @description {
       *   "text": "This endpoint will return profile information and Space personalisation data such as projects in the navigation bar, etc."
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          profile: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["SettingsValue"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Set Space personalization data for a profile 
     * @description {
     *   "text": ""
     * }
     */
    patch: {
      /**
       * Set Space personalization data for a profile 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        path: {
          profile: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            darkTheme?: components["schemas"]["DarkTheme"];
            themeName?: string | null;
            firstDayOfWeek?: components["schemas"]["Weekday"];
            draftType?: components["schemas"]["DraftDocumentType"];
            typographySettings?: components["schemas"]["TypographySettings"];
            todoFilters?: boolean | null;
            calendarView?: string | null;
            emailNotificationsEnabled?: boolean | null;
            notificationEmail?: string | null;
            preferredLanguage?: string | null;
            defaultProject?: components["schemas"]["ProjectIdentifier"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/spoken-languages": {
    /**
     * Get all spoken languages 
     * @description {
     *   "text": "Get spoken language of a profile"
     * }
     */
    get: {
      /**
       * Get all spoken languages 
       * @description {
       *   "text": "Get spoken language of a profile"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          profile: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["TD_ProfileLanguage"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Create spoken language 
     * @description {
     *   "text": "Update spoken language for a profile. Optionally, firstName and lastName can be specified to add a localized name to the profile."
     * }
     */
    post: {
      /**
       * Create spoken language 
       * @description {
       *   "text": "Update spoken language for a profile. Optionally, firstName and lastName can be specified to add a localized name to the profile."
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          profile: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            language: string;
            firstName?: string | null;
            lastName?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TD_ProfileLanguage"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/spoken-languages/{language}": {
    /**
     * Delete spoken language 
     * @description {
     *   "text": "Delete spoken language for a profile"
     * }
     */
    delete: {
      /**
       * Delete spoken language 
       * @description {
       *   "text": "Delete spoken language for a profile"
       * }
       */
      parameters: {
        path: {
          profile: string;
          language: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/ssh-keys": {
    /**
     * Get all SSH keys 
     * @description {
     *   "text": "List SSH public keys associated with the profile"
     * }
     */
    get: {
      /**
       * Get all SSH keys 
       * @description {
       *   "text": "List SSH public keys associated with the profile"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          profile: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["SshKeyData"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Associate SSH key with profile 
     * @description {
     *   "text": "Associate an SSH public key with the profile"
     * }
     */
    post: {
      /**
       * Associate SSH key with profile 
       * @description {
       *   "text": "Associate an SSH public key with the profile"
       * }
       */
      parameters: {
        path: {
          profile: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            key: string;
            /** @default */
            comment?: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/ssh-keys/{fingerprint}": {
    /**
     * Remove association between SSH key and profile 
     * @description {
     *   "text": "Remove association between the profile and the SSH public key"
     * }
     */
    delete: {
      /**
       * Remove association between SSH key and profile 
       * @description {
       *   "text": "Remove association between the profile and the SSH public key"
       * }
       */
      parameters: {
        path: {
          profile: string;
          fingerprint: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/timezone": {
    /**
     * Get timezone 
     * @description {
     *   "text": "Get profile timezone. Returns profile's working hours timezone, location timezone or device timezone, whichever is present first in this list."
     * }
     */
    get: {
      /**
       * Get timezone 
       * @description {
       *   "text": "Get profile timezone. Returns profile's working hours timezone, location timezone or device timezone, whichever is present first in this list."
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          profile: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["ATimeZone"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/working-days": {
    /**
     * Query working days for a profile 
     * @description {
     *   "text": ""
     * }
     */
    get: {
      /**
       * Query working days for a profile 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
        path: {
          profile: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["TD_WorkingDays"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Add working days 
     * @description {
     *   "text": ""
     * }
     */
    post: {
      /**
       * Add working days 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          profile: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: full-date */
            dateStart?: string | null;
            /** Format: full-date */
            dateEnd?: string | null;
            workingDaysSpec: components["schemas"]["WorkingDaysSpec"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TD_WorkingDays"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/profiles/{profile}/working-days/{workingDaysId}": {
    /**
     * Delete working days 
     * @description {
     *   "text": ""
     * }
     */
    delete: {
      /**
       * Delete working days 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        path: {
          profile: string;
          workingDaysId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Update working days 
     * @description {
     *   "text": ""
     * }
     */
    patch: {
      /**
       * Update working days 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          profile: string;
          workingDaysId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: full-date */
            dateStart?: string | null;
            /** Format: full-date */
            dateEnd?: string | null;
            workingDaysSpec: components["schemas"]["WorkingDaysSpec"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TD_WorkingDays"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/roles": {
    /**
     * Get all roles 
     * @description {
     *   "text": "Get/search all roles. Parameters are applied as 'AND' filters."
     * }
     */
    get: {
      /**
       * Get all roles 
       * @description {
       *   "text": "Get/search all roles. Parameters are applied as 'AND' filters."
       * }
       */
      parameters?: {
        query?: {
          query?: string;
          withArchived?: boolean;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["TD_Role"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Create role 
     * @description {
     *   "text": "Create a role"
     * }
     */
    post: {
      /**
       * Create role 
       * @description {
       *   "text": "Create a role"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name: string;
            parentId?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TD_Role"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/roles/{id}/restore": {
    /**
     * Restore role 
     * @description {
     *   "text": "Restore an archived role"
     * }
     */
    post: {
      /**
       * Restore role 
       * @description {
       *   "text": "Restore an archived role"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TD_Role"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/roles/{id}": {
    /**
     * Get role 
     * @description {
     *   "text": "Get a role by ID"
     * }
     */
    get: {
      /**
       * Get role 
       * @description {
       *   "text": "Get a role by ID"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TD_Role"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Archive role 
     * @description {
     *   "text": "Archive a role"
     * }
     */
    delete: {
      /**
       * Archive role 
       * @description {
       *   "text": "Archive a role"
       * }
       */
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Update role 
     * @description {
     *   "text": "Update a role. Optional parameters will be ignored when null and updated otherwise."
     * }
     */
    patch: {
      /**
       * Update role 
       * @description {
       *   "text": "Update a role. Optional parameters will be ignored when null and updated otherwise."
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            name?: string | null;
            parentId?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TD_Role"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/stats": {
    /**
     * Get all stats 
     * @description {
     *   "text": "Get statistics of total members, as well as members per location, role, and team. Parameters are applied as 'AND' filters."
     * }
     */
    get: {
      /**
       * Get all stats 
       * @description {
       *   "text": "Get statistics of total members, as well as members per location, role, and team. Parameters are applied as 'AND' filters."
       * }
       */
      parameters?: {
        query?: {
          teamId?: string | null;
          locationId?: string | null;
          roleId?: string | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TD_Stats"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/teams": {
    /**
     * Get all teams 
     * @description {
     *   "text": "Get or search all teams. Parameters are applied as 'AND' filters."
     * }
     */
    get: {
      /**
       * Get all teams 
       * @description {
       *   "text": "Get or search all teams. Parameters are applied as 'AND' filters."
       * }
       */
      parameters?: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          query?: string;
          withArchived?: boolean;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["TD_Team"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Create team 
     * @description {
     *   "text": "Create a new team"
     * }
     */
    post: {
      /**
       * Create team 
       * @description {
       *   "text": "Create a new team"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name: string;
            description?: string | null;
            emails?: (string)[] | null;
            parentId?: string | null;
            defaultManager?: string | null;
            customFieldValues?: (components["schemas"]["CustomFieldInputValue"])[] | null;
            externalId?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TD_Team"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/teams/{id}/cancel-disbanding": {
    /**
     * Cancel team disbanding 
     * @description {
     *   "text": "Cancel disbanding a team and restore its members"
     * }
     */
    post: {
      /**
       * Cancel team disbanding 
       * @description {
       *   "text": "Cancel disbanding a team and restore its members"
       * }
       */
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/teams/{id}/restore": {
    /**
     * Restore team 
     * @description {
     *   "text": "Restore an archived team"
     * }
     */
    post: {
      /**
       * Restore team 
       * @description {
       *   "text": "Restore an archived team"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TD_Team"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/teams/sync-batch": {
    /**
     * Get sync batch 
     * @description {
     *   "text": "Get teams for synchronization with third-party system. Teams with etag greater than specified value are returned. Read more in the [documentation](https://www.jetbrains.com/help/space/sync-api.html)."
     * }
     */
    get: {
      /**
       * Get sync batch 
       * @description {
       *   "text": "Get teams for synchronization with third-party system. Teams with etag greater than specified value are returned. Read more in the [documentation](https://www.jetbrains.com/help/space/sync-api.html)."
       * }
       */
      parameters: {
        query: {
          batchInfo: string;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              etag: string;
              data: (components["schemas"]["TD_Team"])[];
              hasMore: boolean;
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/teams/{id}": {
    /**
     * Get team 
     * @description {
     *   "text": "Get a team by ID"
     * }
     */
    get: {
      /**
       * Get team 
       * @description {
       *   "text": "Get a team by ID"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TD_Team"];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Archive team 
     * @description {
     *   "text": "Archive a team"
     * }
     */
    delete: {
      /**
       * Archive team 
       * @description {
       *   "text": "Archive a team"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["TD_Team"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Update team 
     * @description {
     *   "text": "Update a team"
     * }
     */
    patch: {
      /**
       * Update team 
       * @description {
       *   "text": "Update a team"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            name?: string;
            description?: string | null;
            emails?: (string)[] | null;
            parentId?: string | null;
            defaultManager?: string | null;
            customFieldValues?: (components["schemas"]["CustomFieldInputValue"])[] | null;
            externalId?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TD_Team"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/teams/{id}/disband": {
    /**
     * Disband team 
     * @description {
     *   "text": "Disband a team"
     * }
     */
    delete: {
      /**
       * Disband team 
       * @description {
       *   "text": "Disband a team"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["TD_Team"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/team-directory/teams/{id}/direct-members": {
    /**
     * Get all direct members 
     * @description {
     *   "text": "Get or search direct members of a given team"
     * }
     */
    get: {
      /**
       * Get all direct members 
       * @description {
       *   "text": "Get or search direct members of a given team"
       * }
       */
      parameters: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          query?: string;
          $fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["TD_MemberProfile"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/time-tracking/items": {
    /**
     * Get all items 
     * @description {
     *   "text": "Get items for subject"
     * }
     */
    get: {
      /**
       * Get all items 
       * @description {
       *   "text": "Get items for subject"
       * }
       */
      parameters: {
        query: {
          subject: string;
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["TimeTrackingItem"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Create item 
     * @description {
     *   "text": "Create work item."
     * }
     */
    post: {
      /**
       * Create item 
       * @description {
       *   "text": "Create work item."
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            subject: components["schemas"]["TimeTrackingSubjectIdentifier"];
            userId: components["schemas"]["ProfileIdentifier"];
            /** Format: full-date */
            date: string;
            /** Format: int32 */
            duration: number;
            description?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TimeTrackingItem"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/time-tracking/items/{itemId}": {
    /**
     * Delete item 
     * @description {
     *   "text": "Delete single work item"
     * }
     */
    delete: {
      /**
       * Delete item 
       * @description {
       *   "text": "Delete single work item"
       * }
       */
      parameters: {
        path: {
          itemId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Update item 
     * @description {
     *   "text": "Update a single work item."
     * }
     */
    patch: {
      /**
       * Update item 
       * @description {
       *   "text": "Update a single work item."
       * }
       */
      parameters: {
        path: {
          itemId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            userId?: components["schemas"]["ProfileIdentifier"];
            /** Format: full-date */
            date?: string | null;
            /** Format: int32 */
            duration?: number | null;
            description?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/todo": {
    /**
     * Get all to-do items 
     * @description {
     *   "text": "Get all To-Do items that match given parameters. Parameters are applied as 'AND' filters."
     * }
     */
    get: {
      /**
       * Get all to-do items 
       * @description {
       *   "text": "Get all To-Do items that match given parameters. Parameters are applied as 'AND' filters."
       * }
       */
      parameters?: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          open?: boolean | null;
          from?: string | null;
          till?: string | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["TodoItemRecord"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Create to-do item 
     * @description {
     *   "text": "Create a new To-Do item, with an optional due date"
     * }
     */
    post: {
      /**
       * Create to-do item 
       * @description {
       *   "text": "Create a new To-Do item, with an optional due date"
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            text: string;
            /** Format: full-date */
            dueDate?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TodoItemRecord"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/todo/{id}": {
    /**
     * Delete to-do item 
     * @description {
     *   "text": "Delete an existing To-Do item"
     * }
     */
    delete: {
      /**
       * Delete to-do item 
       * @description {
       *   "text": "Delete an existing To-Do item"
       * }
       */
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Update to-do item 
     * @description {
     *   "text": "Update an existing To-Do item. Optional parameters will be ignored when not specified and updated otherwise."
     * }
     */
    patch: {
      /**
       * Update to-do item 
       * @description {
       *   "text": "Update an existing To-Do item. Optional parameters will be ignored when not specified and updated otherwise."
       * }
       */
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            text?: string | null;
            /** Format: full-date */
            dueDate?: string | null;
            open?: boolean | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/trusted-certificates": {
    /**
     * Get all trusted certificates 
     * @description {
     *   "text": ""
     * }
     */
    get: {
      /**
       * Get all trusted certificates 
       * @description {
       *   "text": ""
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": (components["schemas"]["TrustedCertificate"])[];
          };
        };
        default: components["responses"]["default"];
      };
    };
    /**
     * Create trusted certificate 
     * @description {
     *   "text": ""
     * }
     */
    post: {
      /**
       * Create trusted certificate 
       * @description {
       *   "text": ""
       * }
       */
      parameters?: {
        query?: {
          $fields?: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            alias: string;
            data: string;
            archived: boolean;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TrustedCertificate"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/trusted-certificates/info": {
    /**
     * Get certificate info 
     * @description {
     *   "text": ""
     * }
     */
    get: {
      /**
       * Get certificate info 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        query: {
          data: string;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["CertificateInfo"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/trusted-certificates/{id}": {
    /**
     * Delete trusted certificate 
     * @description {
     *   "text": ""
     * }
     */
    delete: {
      /**
       * Delete trusted certificate 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
    /**
     * Update trusted certificate 
     * @description {
     *   "text": ""
     * }
     */
    patch: {
      /**
       * Update trusted certificate 
       * @description {
       *   "text": ""
       * }
       */
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            alias?: string | null;
            data?: string | null;
            /** @default false */
            archived?: boolean | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/unfurls/block-unfurl": {
    /**
     * Block link unfurling 
     * @description {
     *   "text": "Block link unfurling"
     * }
     */
    post: {
      /**
       * Block link unfurling 
       * @description {
       *   "text": "Block link unfurling"
       * }
       */
      requestBody: {
        content: {
          "application/json": {
            link: string;
            wholeHost: boolean;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/unfurls/block-unfurl-global": {
    /**
     * Block link unfurling for organization 
     * @description {
     *   "text": "Block link unfurling for organization"
     * }
     */
    post: {
      /**
       * Block link unfurling for organization 
       * @description {
       *   "text": "Block link unfurling for organization"
       * }
       */
      requestBody: {
        content: {
          "application/json": {
            link: string;
            wholeHost: boolean;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/unfurls/check-blocked": {
    /** Check if unfurl is blocked */
    post: {
      /** Check if unfurl is blocked */
      requestBody: {
        content: {
          "application/json": {
            link: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": boolean;
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/unfurls/unblock-unfurl": {
    /**
     * Unblock link unfurling 
     * @description {
     *   "text": "Unblock link unfurling"
     * }
     */
    post: {
      /**
       * Unblock link unfurling 
       * @description {
       *   "text": "Unblock link unfurling"
       * }
       */
      requestBody: {
        content: {
          "application/json": {
            link: string;
            wholeHost: boolean;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/unfurls/unblock-unfurl-global": {
    /**
     * Unblock link unfurling for organization 
     * @description {
     *   "text": "Unblock link unfurling for organization"
     * }
     */
    post: {
      /**
       * Unblock link unfurling for organization 
       * @description {
       *   "text": "Unblock link unfurling for organization"
       * }
       */
      requestBody: {
        content: {
          "application/json": {
            link: string;
            wholeHost: boolean;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
        default: components["responses"]["default"];
      };
    };
  };
  "/unfurls/list-blocked": {
    /** List blocked unfurls */
    get: {
      /** List blocked unfurls */
      parameters?: {
        query?: {
          $skip?: string | null;
          $top?: number | null;
          $fields?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": {
              next: string;
              /** Format: int32 */
              totalCount?: number | null;
              data: (components["schemas"]["UnfurlsBlockListEntry"])[];
            };
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/uploads": {
    /**
     * Create upload 
     * @description {
     *   "text": "Request a URL that can be used to upload an attachment.\nAn attachment can be uploaded to the URL that is returned, by making a PUT request that has a proper content-type header and the attachment data as the request body. The PUT request returns a string that is an id of the uploaded attachment. The attachment id can be passed to other API methods where this attachment needs to be used. Attachments are available for download at `/d/{attachmentId}`.\nThe 'storagePrefix' parameter can be one of file, maps, emoji or attachments.\nThe 'mediaType' parameter can be omitted for all uploads. For image uploads that need to be resized automatically for specific use, such as chat stickers or emoji, use one of `chat-image-attachment`, `chat-sticker`, `emoji`."
     * }
     */
    post: {
      /**
       * Create upload 
       * @description {
       *   "text": "Request a URL that can be used to upload an attachment.\nAn attachment can be uploaded to the URL that is returned, by making a PUT request that has a proper content-type header and the attachment data as the request body. The PUT request returns a string that is an id of the uploaded attachment. The attachment id can be passed to other API methods where this attachment needs to be used. Attachments are available for download at `/d/{attachmentId}`.\nThe 'storagePrefix' parameter can be one of file, maps, emoji or attachments.\nThe 'mediaType' parameter can be omitted for all uploads. For image uploads that need to be resized automatically for specific use, such as chat stickers or emoji, use one of `chat-image-attachment`, `chat-sticker`, `emoji`."
       * }
       */
      requestBody: {
        content: {
          "application/json": {
            storagePrefix: string;
            mediaType?: string | null;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": string;
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/uploads/chat/public-url/{channel}/{message}/{attachmentId}": {
    /**
     * Get public url 
     * @description {
     *   "text": "Returns a URL that can be used to access attachment file without authentication"
     * }
     */
    get: {
      /**
       * Get public url 
       * @description {
       *   "text": "Returns a URL that can be used to access attachment file without authentication"
       * }
       */
      parameters: {
        path: {
          channel: string;
          message: string;
          attachmentId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": string;
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
  "/uploads/image/{id}": {
    /**
     * Get image attachment metadata 
     * @description {
     *   "text": "Get meta information for a previously uploaded image"
     * }
     */
    get: {
      /**
       * Get image attachment metadata 
       * @description {
       *   "text": "Get meta information for a previously uploaded image"
       * }
       */
      parameters: {
        query?: {
          $fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["ImageAttachmentMeta"];
          };
        };
        default: components["responses"]["default"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ATimeZone: {
      id: string;
    };
    ATimeZoneWithOffset: {
      id: string;
      /** Format: int32 */
      offset: number;
    };
    AbsenceApproval: {
      approved: boolean;
      approvedBy: components["schemas"]["TD_MemberProfile"];
      /** Format: date-time */
      approvedAt: string;
    };
    AbsenceApprovalWebhookEvent: {
      meta: components["schemas"]["KMetaMod"];
      absence: components["schemas"]["AbsenceRecord"];
      member: components["schemas"]["TD_MemberProfile"];
      approved: {
        old: boolean;
        new: boolean;
      };
    };
    AbsenceCommonSubscriptionFilter: {
      reasons: (components["schemas"]["AbsenceReasonRecord"])[];
    };
    AbsenceCommonSubscriptionFilterIn: {
      reasons: (string)[];
    };
    AbsenceEvent: {
      profile: components["schemas"]["TD_MemberWithTeam"];
      events: (components["schemas"]["AbsenceRecord"])[];
    };
    AbsenceReasonRecord: {
      id: string;
      archived: boolean;
      name: string;
      description: string;
      defaultAvailability: boolean;
      approvalRequired: boolean;
      icon: string;
      /** Format: int64 */
      etag?: number | null;
      category?: string | null;
    };
    AbsenceRecord: {
      id: string;
      archived: boolean;
      member: components["schemas"]["TD_MemberProfile"];
      icon: string;
      reason?: components["schemas"]["AbsenceReasonRecord"];
      description?: string | null;
      /** Format: full-date */
      since: string;
      /** Format: full-date */
      till: string;
      location?: components["schemas"]["TD_Location"];
      available: boolean;
      approval?: components["schemas"]["AbsenceApproval"];
      category?: string | null;
      customFields: {
        [key: string]: components["schemas"]["CFValue"] | undefined;
      };
    };
    AbsenceWebhookEvent: {
      meta: components["schemas"]["KMetaMod"];
      absence: components["schemas"]["AbsenceRecord"];
      member: components["schemas"]["TD_MemberProfile"];
      icon?: {
        old: string;
        new: string;
      } | null;
      reason?: {
        old: components["schemas"]["AbsenceReasonRecord"];
        new: components["schemas"]["AbsenceReasonRecord"];
      } | null;
      description?: {
        old: string;
        new: string;
      } | null;
      since?: {
        /** Format: full-date */
        old: string;
        /** Format: full-date */
        new: string;
      } | null;
      till?: {
        /** Format: full-date */
        old: string;
        /** Format: full-date */
        new: string;
      } | null;
      location?: {
        old: components["schemas"]["TD_Location"];
        new: components["schemas"]["TD_Location"];
      } | null;
      available?: {
        old: boolean;
        new: boolean;
      } | null;
    };
    AccessRecord: {
      /** Format: date-time */
      time: string;
      address: string;
      userAgent?: string | null;
    };
    AdHocConnectedAppMetadata: {
      lastSentServerUrl?: string | null;
      connectionStatus?: components["schemas"]["AppConnectionStatus"];
      uninstallationStatus?: components["schemas"]["AppUninstallationStatus"];
      /** Format: date-time */
      uninstallationStartedAt?: string | null;
    };
    AdditionalRepositoryInfo: {
      repoName: string;
      stats?: components["schemas"]["RepoStats"];
      projectsRepoAttachedTo: (components["schemas"]["PR_Project"])[];
    };
    AllChannelsListEntry: {
      channelId: string;
      name: string;
      description: string;
      access: components["schemas"]["M2.Access"];
      icon?: string | null;
      /** Format: date-time */
      created: string;
      /** Format: int32 */
      subscribers: number;
      subscribed: boolean;
      archived: boolean;
    };
    AllReactionsToItemRecord: {
      id: string;
      emojiReactions?: (components["schemas"]["EmojiReactionRecord"])[] | null;
    };
    AnyOfCFFilter: {
      className: string;
    } & (components["schemas"]["DocumentCFFilter"] | components["schemas"]["TeamCFFilter"] | components["schemas"]["TargetCFFilter"] | components["schemas"]["ProjectCFFilter"] | components["schemas"]["FractionCFFilter"] | components["schemas"]["LocationCFFilter"] | components["schemas"]["IssueCFFilter"] | components["schemas"]["BooleanCFFilter"] | components["schemas"]["ProfileCFFilter"] | components["schemas"]["EnumCFFilter"] | components["schemas"]["DeploymentCFFilter"]);
    AnyOfFilter: {
      values: (components["schemas"]["AnyOfFilterValue"])[];
    };
    AnyOfFilterValue: {
      className: string;
    } & (components["schemas"]["PrincipalFilterValue"] | components["schemas"]["IssueStatusIn.Id"] | components["schemas"]["IssueStatusIn.Name"] | components["schemas"]["IssueStatusIn.Resolved"] | components["schemas"]["ChannelFilterValue"] | components["schemas"]["TableIdFilterValue"] | components["schemas"]["BooleanFilterValue"] | components["schemas"]["BoardSprintFilterValue"] | components["schemas"]["IssueFilterValue"] | components["schemas"]["NotSet"] | components["schemas"]["IssueStatusFilterValue"] | components["schemas"]["PlanningTagFilterValue"]);
    ApiIcon: {
      icon: string;
    };
    AppMessageDeliveryClientErrorDTO: {
      className: string;
      message?: string | null;
      causeClassName?: string | null;
      causeMessage?: string | null;
    };
    AppParameter: {
      key: string;
      value: string;
    };
    AppPublicationCheckPayload: Record<string, never>;
    AppUiEnabledState: {
      enabledByDefault: boolean;
      enabledForMe?: boolean | null;
    };
    AppUiExtContextData: {
      context: components["schemas"]["PermissionContextApi"];
      extensions?: (components["schemas"]["AppUiExtensionApi"])[] | null;
      appUiEnabledState: components["schemas"]["AppUiEnabledState"];
    };
    AppUiExtensionApi: {
      className: string;
    } & (components["schemas"]["ApplicationHomepageUiExtensionApi"] | components["schemas"]["TopLevelPageUiExtensionApi"] | components["schemas"]["ChatBotUiExtensionApi"] | components["schemas"]["DocumentMenuItemUiExtensionApi"] | components["schemas"]["DocumentFolderMenuItemUiExtensionApi"] | components["schemas"]["MeetingMenuItemUiExtensionApi"] | components["schemas"]["ChatMessageMenuItemUiExtensionApi"] | components["schemas"]["CodeReviewMenuItemUiExtensionApi"] | components["schemas"]["IssueMenuItemUiExtensionApi"] | components["schemas"]["ExternalIssueTrackerUiExtensionApi"] | components["schemas"]["GettingStartedUiExtensionApi"]);
    AppUiExtensionIn: {
      className: string;
    } & (components["schemas"]["ExternalIssueTrackerUiExtensionIn"] | components["schemas"]["GettingStartedUiExtensionIn"] | components["schemas"]["ChatBotUiExtensionIn"] | components["schemas"]["ChatMessageMenuItemUiExtensionIn"] | components["schemas"]["IssueMenuItemUiExtensionIn"] | components["schemas"]["CodeReviewMenuItemUiExtensionIn"] | components["schemas"]["DocumentFolderMenuItemUiExtensionIn"] | components["schemas"]["DocumentMenuItemUiExtensionIn"] | components["schemas"]["MeetingMenuItemUiExtensionIn"] | components["schemas"]["TopLevelPageUiExtensionIn"] | components["schemas"]["ApplicationHomepageUiExtensionIn"]);
    AppUserActionExecutionResult: {
      className: string;
    } & (components["schemas"]["AppUserActionExecutionResult.AuthCodeFlowRequired"] | components["schemas"]["AppUserActionExecutionResult.Failure"] | components["schemas"]["AppUserActionExecutionResult.Success"]);
    "AppUserActionExecutionResult.AuthCodeFlowRequired": {
      permissionsToRequest: (components["schemas"]["AuthCodeFlowPermissionsRequest"])[];
    };
    "AppUserActionExecutionResult.Failure": {
      message: string;
    };
    "AppUserActionExecutionResult.Success": {
      message?: string | null;
    };
    ApplicationAuthorizationRequestedEvent: {
      meta: components["schemas"]["KMetaMod"];
      application: components["schemas"]["ES_App"];
      scope: components["schemas"]["AuthScope"];
    };
    ApplicationAuthorizedWebhookEvent: {
      meta: components["schemas"]["KMetaMod"];
      application: components["schemas"]["ES_App"];
      scope: components["schemas"]["AuthScope"];
    };
    ApplicationHomepageUiExtensionApi: {
      iframeUrl?: string | null;
    };
    ApplicationHomepageUiExtensionIn: {
      iframeUrl?: string | null;
    };
    ApplicationMetadata: {
      className: string;
    } & (components["schemas"]["MarketplaceAppMetadata"] | components["schemas"]["AutomationServiceMetadata"] | components["schemas"]["SubscriptionMetadata"] | components["schemas"]["AdHocConnectedAppMetadata"]);
    ApplicationPayload: {
      className: string;
    } & (components["schemas"]["ChangeClientSecretPayload"] | components["schemas"]["UnfurlActionPayload"] | components["schemas"]["ApplicationUninstalledPayload"] | components["schemas"]["WebhookRequestPayload"] | components["schemas"]["ListCommandsPayload"] | components["schemas"]["AppPublicationCheckPayload"] | components["schemas"]["MessageActionPayload"] | components["schemas"]["InitPayload"] | components["schemas"]["CreateExternalIssueRequestPayload"] | components["schemas"]["CustomActionPayload"] | components["schemas"]["MessagePayload"] | components["schemas"]["ChangeServerUrlPayload"] | components["schemas"]["MenuActionPayload"] | components["schemas"]["NewUnfurlQueueItemsPayload"] | components["schemas"]["NewExternalIssueEventPayload"] | components["schemas"]["RefreshTokenPayload"]);
    ApplicationSshKeyWebhookEvent: {
      meta: components["schemas"]["KMetaMod"];
      application: components["schemas"]["ES_App"];
      fingerprint?: {
        old: string;
        new: string;
      } | null;
      comment?: {
        old: string;
        new: string;
      } | null;
    };
    ApplicationUnfurl: {
      queueItemId: string;
      content: components["schemas"]["ApplicationUnfurlContent"];
    };
    ApplicationUnfurlContent: {
      className: string;
    } & (components["schemas"]["ApplicationUnfurlContent.Image"] | components["schemas"]["ApplicationUnfurlContent.Message"]);
    "ApplicationUnfurlContent.Image": {
      icon?: components["schemas"]["ApiIcon"];
      title: string;
      url: string;
    };
    "ApplicationUnfurlContent.Message": {
      style: components["schemas"]["MessageStyle"];
      outline?: components["schemas"]["MessageOutlineBase"];
      sections: (components["schemas"]["MessageSectionElement"])[];
    };
    ApplicationUnfurlContext: {
      className: string;
    } & (components["schemas"]["DocumentAppUnfurlContext"] | components["schemas"]["IssueUnfurlContext"] | components["schemas"]["ArticleAppUnfurlContext"] | components["schemas"]["TodoItemUnfurlContext"] | components["schemas"]["CommitMessageUnfurlContext"] | components["schemas"]["ChatMessageUnfurlContext"] | components["schemas"]["CodeReviewUnfurlContext"]);
    ApplicationUnfurlDomain: {
      domain: string;
      status: components["schemas"]["RightStatus"];
      modificationAuthor?: components["schemas"]["CPrincipal"];
      /** Format: date-time */
      modificationTimestamp?: string | null;
    };
    ApplicationUnfurlPattern: {
      prefix: string;
      linkReplacement: string;
      status: components["schemas"]["RightStatus"];
      modificationAuthor?: components["schemas"]["CPrincipal"];
      /** Format: date-time */
      modificationTimestamp?: string | null;
    };
    ApplicationUnfurlPatternRequest: {
      prefix: string;
      linkReplacement: string;
    };
    ApplicationUnfurlQueueItem: {
      id: string;
      target: string;
      context?: components["schemas"]["ApplicationUnfurlContext"];
      authorUserId?: components["schemas"]["ProfileIdentifier"];
      /** Format: int64 */
      etag: number;
    };
    ApplicationUnfurlQueueItemsCreatedEvent: Record<string, never>;
    ApplicationUnfurlTarget: {
      className: string;
    } & (components["schemas"]["ApplicationUnfurlTarget.Domain"] | components["schemas"]["ApplicationUnfurlTarget.Pattern"]);
    "ApplicationUnfurlTarget.Domain": {
      domain: string;
    };
    "ApplicationUnfurlTarget.Pattern": {
      pattern: string;
    };
    ApplicationUnfurlTargetWebhookEvent: {
      meta: components["schemas"]["KMetaMod"];
      application: components["schemas"]["ES_App"];
      target: components["schemas"]["ApplicationUnfurlTarget"];
    };
    ApplicationUninstalledPayload: {
      serverUrl: string;
      clientId: string;
      verificationToken?: string | null;
    };
    ApplicationWebhookEvent: {
      meta: components["schemas"]["KMetaMod"];
      application: components["schemas"]["ES_App"];
      name?: {
        old: string;
        new: string;
      } | null;
      owner?: {
        old: components["schemas"]["TD_MemberProfile"];
        new: components["schemas"]["TD_MemberProfile"];
      } | null;
      archived?: {
        old: boolean;
        new: boolean;
      } | null;
      endpointURI?: {
        old: string;
        new: string;
      } | null;
      clientIdChanged: boolean;
      clientSecretChanged: boolean;
      verificationTokenChanged: boolean;
      signingKeyChanged: boolean;
    };
    ApplicationsSubscriptionFilter: {
      application?: components["schemas"]["ES_App"];
    };
    ApplicationsSubscriptionFilterIn: {
      application?: string | null;
    };
    ArticleAppUnfurlContext: {
      articleId: string;
    };
    ArticleChannelRecord: {
      id: string;
      archived: boolean;
      channel: components["schemas"]["M2ChannelRecord"];
      channelContent?: components["schemas"]["M2ChannelContentRecord"];
      reactions: components["schemas"]["AllReactionsToItemRecord"];
    };
    ArticleContentRecord: {
      id: string;
      archived: boolean;
      content: string;
    };
    ArticleDetailsRecord: {
      id: string;
      archived: boolean;
      event?: components["schemas"]["MeetingRecord"];
      teams?: (components["schemas"]["TD_Team"])[] | null;
      locations?: (components["schemas"]["TD_Location"])[] | null;
      externalEntityInfo?: components["schemas"]["ExternalEntityInfoRecord"];
    };
    ArticleImportResult: {
      externalId?: string | null;
      article?: components["schemas"]["ArticleRecord"];
      error?: string | null;
    };
    ArticleMarkdownImage: {
      alt: string;
      src: string;
    };
    ArticlePreviewRecord: {
      id: string;
      archived: boolean;
      previewImages: (components["schemas"]["ArticleMarkdownImage"])[];
      preview: string;
      previewAttachments?: (components["schemas"]["AttachmentInfo"])[] | null;
      /** Format: int32 */
      wordsNumber?: number | null;
      cut?: boolean | null;
    };
    ArticleRecord: {
      id: string;
      archived: boolean;
      title: string;
      /** Format: date-time */
      created: string;
      author: components["schemas"]["TD_MemberProfile"];
      aliases: (components["schemas"]["BG_ArticleAlias"])[];
      archivedBy?: components["schemas"]["TD_MemberProfile"];
      /** Format: date-time */
      archivedAt?: string | null;
      previewImages: (components["schemas"]["ArticleMarkdownImage"])[];
      preview: string;
      previewAttachments?: (components["schemas"]["AttachmentInfo"])[] | null;
      /** Format: int32 */
      wordsNumber?: number | null;
      cut?: boolean | null;
      content: string;
      event?: components["schemas"]["MeetingRecord"];
      teams?: (components["schemas"]["TD_Team"])[] | null;
      locations?: (components["schemas"]["TD_Location"])[] | null;
      externalEntityInfo?: components["schemas"]["ExternalEntityInfoRecord"];
      editable: boolean;
      channel: components["schemas"]["M2ChannelRecord"];
      channelContent?: components["schemas"]["M2ChannelContentRecord"];
      reactions: components["schemas"]["AllReactionsToItemRecord"];
      docContent: components["schemas"]["TextDocumentContent"];
      attachments: (components["schemas"]["AttachmentInfo"])[];
    };
    AssignedPerson: {
      profile?: components["schemas"]["TD_MemberProfile"];
      role?: string | null;
    };
    Attachment: {
      className: string;
    } & (components["schemas"]["UnfurlAttachment"] | components["schemas"]["FileAttachment"] | components["schemas"]["VideoAttachment"] | components["schemas"]["ImageAttachment"] | components["schemas"]["ProfileLinkPreview"] | components["schemas"]["ReplyMessageAttachment.Reply"] | components["schemas"]["ReplyMessageAttachment.ReplyWithSnapshot"] | components["schemas"]["DeletedAttachment"]);
    AttachmentIn: {
      className: string;
    } & (components["schemas"]["FileAttachment"] | components["schemas"]["VideoAttachment"] | components["schemas"]["ImageAttachment"]);
    AttachmentInfo: {
      details?: components["schemas"]["Attachment"];
    };
    AttachmentUnfurlDetails: {
      className: string;
    } & (components["schemas"]["UnfurlDetailsMeeting"] | components["schemas"]["UnfurlDetailsImage"] | components["schemas"]["UnfurlDetailsCodeDiffSnippet"] | components["schemas"]["ChannelItemSnapshot"] | components["schemas"]["UnfurlDetailsMC"] | components["schemas"]["UnfurlDetailsArticle"] | components["schemas"]["UnfurlDetailsCodeSnippet"] | components["schemas"]["AutomationJobUnfurlDetails"] | components["schemas"]["AutomationJobExecutionUnfurlDetails"] | components["schemas"]["CallSessionUnfurlDetails"] | components["schemas"]["UnfurlDeployTargetDetails"] | components["schemas"]["UnfurlDetailsCommitsInCodeReview"]);
    AuthCodeFlowPermissionsRequest: {
      scope: string;
      purpose: string;
    };
    AuthConfig: {
      /** Format: int32 */
      dontRememberMeTtl: number;
      /** Format: int32 */
      adminRememberMeTtl: number;
      /** Format: int32 */
      userRememberMeTtl: number;
    };
    AuthModuleUsage: {
      authModule: components["schemas"]["ES_AuthModule"];
      /** Format: int32 */
      profiles: number;
    };
    AuthScope: {
      className: string;
    } & (components["schemas"]["ProjectScope"] | components["schemas"]["GlobalScope"]);
    AutomationJobEvent: {
      meta: components["schemas"]["KMetaMod"];
      executionId: string;
      project: components["schemas"]["PR_Project"];
      repositoryName: string;
      jobName: string;
      /** Format: int64 */
      executionNumber: number;
      trigger: components["schemas"]["JobExecutionTrigger"];
      /** Format: date-time */
      triggerTime: string;
      status?: {
        old: components["schemas"]["JobExecutionStatus"];
        new: components["schemas"]["JobExecutionStatus"];
      } | null;
      failureReasons?: {
        old: (components["schemas"]["FailureConditionType"])[];
        new: (components["schemas"]["FailureConditionType"])[];
      } | null;
      stoppedBy?: {
        old: components["schemas"]["CPrincipal"];
        new: components["schemas"]["CPrincipal"];
      } | null;
      startTime?: {
        /** Format: date-time */
        old: string;
        /** Format: date-time */
        new: string;
      } | null;
      endTime?: {
        /** Format: date-time */
        old: string;
        /** Format: date-time */
        new: string;
      } | null;
      repositories?: (components["schemas"]["GitCheckout"])[] | null;
    };
    AutomationJobExecutionUnfurlDetails: {
      jobExecutionId: string;
      projectRef: components["schemas"]["PR_Project"];
      repoName: string;
    };
    AutomationJobSubscriptionFilter: {
      projects: (components["schemas"]["PR_Project"])[];
      repositoryName?: string | null;
      branchSpec?: (string)[] | null;
      jobs?: (string)[] | null;
    };
    AutomationJobSubscriptionFilterIn: {
      projects?: (string)[] | null;
      repositoryName?: string | null;
      branchSpec?: (string)[] | null;
      jobs?: (string)[] | null;
    };
    AutomationJobUnfurlDetails: {
      jobId: string;
      jobName: string;
      projectRef: components["schemas"]["PR_Project"];
      repoName: string;
      jobExecutionDisplayStatusFilter?: components["schemas"]["JobExecutionDisplayStatus"];
      jobTriggerFilter?: components["schemas"]["JobTriggerType"];
      branch?: components["schemas"]["Branch"];
    };
    AutomationServiceMetadata: {
      project: components["schemas"]["PR_Project"];
    };
    AutonumberCFFilter: {
      query: string;
    };
    AutonumberCFParameters: {
      prefix: string;
      suffix: string;
    };
    AutonumberCFType: Record<string, never>;
    AutonumberCFValue: {
      value?: string | null;
    };
    AvailableTrial: {
      tier: components["schemas"]["Tier"];
      /** Format: int32 */
      durationDays: number;
    };
    AvatarCropSquare: {
      /** Format: int32 */
      x: number;
      /** Format: int32 */
      y: number;
      /** Format: int32 */
      length: number;
    };
    AzureRegisterNewUserRule: {
      userType: components["schemas"]["RegisterNewUserType"];
      allowed: boolean;
    };
    BG_ArticleAlias: {
      alias: string;
      /** Format: date-time */
      created: string;
    };
    BG_Stats: {
      /** Format: int32 */
      totalBlogs: number;
      teams: ({
          first: components["schemas"]["TD_Team"];
          /** Format: int32 */
          second: number;
        })[];
      projects?: ({
          first: components["schemas"]["PR_Project"];
          /** Format: int32 */
          second: number;
        })[] | null;
      locations: ({
          first: components["schemas"]["TD_Location"];
          /** Format: int32 */
          second: number;
        })[];
    };
    BOMDiff: {
      old?: components["schemas"]["FileBOM"];
      new?: components["schemas"]["FileBOM"];
    };
    BacklogType: {
      className: string;
    } & (components["schemas"]["BacklogType.Manual"] | components["schemas"]["BacklogType.SearchBased"]);
    "BacklogType.Manual": {
      neverUsed: boolean;
    };
    "BacklogType.SearchBased": {
      searchExpression: components["schemas"]["IssueSearchExpression"];
    };
    BacklogTypeIn: {
      className: string;
    } & (components["schemas"]["BacklogTypeIn.Manual"] | components["schemas"]["BacklogTypeIn.SearchBased"]);
    "BacklogTypeIn.Manual": Record<string, never>;
    "BacklogTypeIn.SearchBased": {
      searchExpression: components["schemas"]["IssueSearchExpression"];
    };
    BasicCRDiscussionContactRecord: {
      id: string;
      threadMessage: components["schemas"]["MessageInfo"];
      channelType: string;
      contactKey: string;
      archived: boolean;
    };
    BasicCRDiscussionContactsRecord: {
      discussions: (components["schemas"]["BasicCRDiscussionContactRecord"])[];
      archived: boolean;
      id: string;
    };
    BasicCRUnboundDiscussionContactRecord: {
      id: string;
      threadMessage: components["schemas"]["MessageInfo"];
      channelType: string;
      contactKey: string;
      archived: boolean;
    };
    BasicCRUnboundDiscussionContactsRecord: {
      discussions: (components["schemas"]["BasicCRUnboundDiscussionContactRecord"])[];
      archived: boolean;
      id: string;
    };
    BasicThreadContactsRecord: {
      className: string;
    } & (components["schemas"]["BasicCRDiscussionContactsRecord"] | components["schemas"]["BasicCRUnboundDiscussionContactsRecord"]);
    BatchInfo: {
      offset?: string | null;
      /** Format: int32 */
      batchSize: number;
    };
    BillingFeedChannel: {
      notificationDefaults?: components["schemas"]["ChannelSpecificDefaults"];
    };
    BillingReport: {
      plans: (components["schemas"]["PurchasedBillingPlan"])[];
      reportDays: (components["schemas"]["BillingReportDay"])[];
      /** Format: int64 */
      bandwidthAllocation?: number | null;
      /** Format: int64 */
      ciAllocation?: number | null;
      /** Format: full-date */
      serverToday: string;
      /** Format: full-date */
      earliestBillingDate: string;
    };
    BillingReportDay: {
      /** Format: full-date */
      date: string;
      /** Format: int32 */
      activeUsers: number;
      /** Format: int32 */
      userUsage: number;
      /** Format: double */
      userCost: number;
      /** Format: int32 */
      userLimit?: number | null;
      /** Format: int32 */
      activeGuests?: number | null;
      /** Format: int32 */
      paidActiveGuests?: number | null;
      /** Format: int32 */
      freeActiveGuests?: number | null;
      /** Format: double */
      guestCost?: number | null;
      /** Format: int32 */
      guestLimit?: number | null;
      /** Format: int32 */
      activeMembers?: number | null;
      /** Format: int32 */
      activeLegacyExternalCollaborators?: number | null;
      /** Format: int32 */
      activeExternalCollaborators?: number | null;
      /** Format: int64 */
      storageAllocationB?: number | null;
      /** Format: int64 */
      storageTotalUsage: number;
      /** Format: int64 */
      storageFilesUsage: number;
      /** Format: int64 */
      storageGitUsage: number;
      /** Format: int64 */
      storagePackagesUsage: number;
      /** Format: double */
      storageCost: number;
      /** Format: int64 */
      bandwidthTotalUsageDelta: number;
      /** Format: int64 */
      bandwidthTotalUsage: number;
      /** Format: int64 */
      bandwidthFilesUsageDelta: number;
      /** Format: int64 */
      bandwidthFilesUsage: number;
      /** Format: int64 */
      bandwidthGitUsageDelta: number;
      /** Format: int64 */
      bandwidthGitUsage: number;
      /** Format: int64 */
      bandwidthPackagesUsageDelta: number;
      /** Format: int64 */
      bandwidthPackagesUsage: number;
      /** Format: int64 */
      bandwidthAutomationExternalTrafficUsageDelta: number;
      /** Format: int64 */
      bandwidthAutomationExternalTrafficUsage: number;
      /** Format: int64 */
      bandwidthAutomationInternalUsageDelta: number;
      /** Format: int64 */
      bandwidthAutomationInternalUsage: number;
      /** Format: double */
      bandwidthCost: number;
      /** Format: int64 */
      ciUsageDelta: number;
      /** Format: int64 */
      ciUsage: number;
      /** Format: double */
      ciCost: number;
      /** Format: int64 */
      appUsage: number;
      /** Format: int64 */
      chatUsage: number;
      /** Format: double */
      totalCost: number;
    };
    BirthdayEvent: {
      profile: components["schemas"]["TD_MemberWithTeam"];
      /** Format: full-date */
      birthday: string;
    };
    BlockUnfurlDetails: {
      className: string;
    } & (components["schemas"]["UnfurlDetailsImage"] | components["schemas"]["UnfurlDetailsIssue"] | components["schemas"]["UnfurlDetailsExternal"]);
    BlogCalendarEvent: {
      /** Format: date-time */
      starts?: string | null;
      /** Format: date-time */
      ends?: string | null;
      timezone?: components["schemas"]["ATimeZone"];
      rooms?: (string)[] | null;
      allDay?: boolean | null;
    };
    BlogCommonSubscriptionFilter: {
      teams: (components["schemas"]["TD_Team"])[];
      locations: (components["schemas"]["TD_Location"])[];
      authors: (components["schemas"]["TD_MemberProfile"])[];
    };
    BlogCommonSubscriptionFilterIn: {
      teams: (string)[];
      locations: (string)[];
      authors: (string)[];
    };
    BlogEventMenuActionContext: {
      blogEventId: string;
    };
    BlogPublicationDetails: {
      teams?: (components["schemas"]["TD_Team"])[] | null;
      locations?: (components["schemas"]["TD_Location"])[] | null;
      event?: components["schemas"]["CalendarEvent"];
      article?: components["schemas"]["ArticleRecord"];
    };
    BlogPublicationDetailsIn: {
      teams?: (string)[] | null;
      locations?: (string)[] | null;
      event?: components["schemas"]["CalendarEventIn"];
      article?: string | null;
    };
    BlogWebhookEvent: {
      meta: components["schemas"]["KMetaMod"];
      article: components["schemas"]["ArticleRecord"];
      action?: string | null;
      author?: {
        old: components["schemas"]["TD_MemberProfile"];
        new: components["schemas"]["TD_MemberProfile"];
      } | null;
      created?: {
        /** Format: date-time */
        old: string;
        /** Format: date-time */
        new: string;
      } | null;
      title?: {
        old: string;
        new: string;
      } | null;
      textChanged: boolean;
      unpublished?: {
        old: boolean;
        new: boolean;
      } | null;
      teams?: {
        old: (components["schemas"]["TD_Team"])[];
        new: (components["schemas"]["TD_Team"])[];
      } | null;
      locations?: {
        old: (components["schemas"]["TD_Location"])[];
        new: (components["schemas"]["TD_Location"])[];
      } | null;
      externalEntityInfo?: {
        /** Format: int64 */
        old: number;
        /** Format: int64 */
        new: number;
      } | null;
    };
    BoardBacklog: {
      id: string;
      archived: boolean;
      board: components["schemas"]["BoardRecord"];
      type: components["schemas"]["BacklogType"];
    };
    BoardColumn: {
      name: string;
      statuses: (components["schemas"]["IssueStatus"])[];
    };
    BoardColumns: {
      columns: (components["schemas"]["BoardColumn"])[];
    };
    BoardInfo: {
      owners: components["schemas"]["BoardOwners"];
      columns: components["schemas"]["BoardColumns"];
      description?: string | null;
      swimlaneKey?: string | null;
      issueFields: (components["schemas"]["BoardIssueField"])[];
      backlog?: components["schemas"]["BoardBacklog"];
    };
    BoardIssueField: {
      className: string;
    } & (components["schemas"]["BoardIssueField.BuiltIn"] | components["schemas"]["BoardIssueField.Custom"]);
    "BoardIssueField.BuiltIn": {
      field: components["schemas"]["BuiltInIssueField"];
    };
    "BoardIssueField.Custom": {
      customField: components["schemas"]["CustomField"];
    };
    BoardIssueInputField: {
      className: string;
    } & (components["schemas"]["CustomBoardIssueInputField"] | components["schemas"]["BoardIssueField.BuiltIn"]);
    BoardMemberOwners: {
      members: (components["schemas"]["TD_MemberProfile"])[];
    };
    BoardOwners: {
      members: components["schemas"]["BoardMemberOwners"];
      teams: components["schemas"]["BoardTeamOwners"];
    };
    BoardRecord: {
      id: string;
      archived: boolean;
      name: string;
      info: components["schemas"]["BoardInfo"];
      /** Format: full-date */
      from?: string | null;
      /** Format: full-date */
      to?: string | null;
    };
    BoardSprintFilterValue: {
      boardSprintIn?: components["schemas"]["BoardSprintIn"];
    };
    BoardSprintIn: {
      className: string;
    } & (components["schemas"]["BoardSprintIn.Backlog"] | components["schemas"]["BoardSprintIn.Board"] | components["schemas"]["BoardSprintIn.Sprint"]);
    "BoardSprintIn.Backlog": {
      id: string;
    };
    "BoardSprintIn.Board": {
      id: string;
    };
    "BoardSprintIn.Sprint": {
      id: string;
    };
    BoardTeamOwners: {
      teams: (components["schemas"]["TD_Team"])[];
    };
    BookContainerInfo: {
      book?: components["schemas"]["KB_Book"];
      bookAlias?: string | null;
      bookId?: string | null;
      project?: components["schemas"]["PR_Project"];
      grantedRights?: (string)[] | null;
    };
    BooleanCFFilter: {
      values: (components["schemas"]["BooleanCFValue"])[];
    };
    BooleanCFType: Record<string, never>;
    BooleanCFValue: {
      value: boolean;
    };
    BooleanFilterValue: {
      value?: boolean | null;
    };
    Branch: {
      branchName: string;
    };
    BranchInfo: {
      head: string;
      ref: string;
    };
    BranchLinksContainer: {
      className: string;
    } & components["schemas"]["IssueBranches"];
    BusinessEntityRelationEvent: {
      meta: components["schemas"]["KMetaMod"];
      relation: string;
      entity: string;
      member: components["schemas"]["TD_MemberProfile"];
      since?: {
        /** Format: full-date */
        old: string;
        /** Format: full-date */
        new: string;
      } | null;
      till?: {
        /** Format: full-date */
        old: string;
        /** Format: full-date */
        new: string;
      } | null;
      archived?: {
        old: boolean;
        new: boolean;
      } | null;
    };
    CApplicationPrincipalDetails: {
      app: components["schemas"]["ES_App"];
    };
    CAutomationTaskPrincipalDetails: {
      project: components["schemas"]["PR_Project"];
      name: string;
      id: string;
    };
    CBuiltInServicePrincipalDetails: {
      name: string;
      key?: string | null;
    };
    CFCommitIdentifier: {
      className: string;
    } & (components["schemas"]["CFCommitIdentifier.CommitHash"] | components["schemas"]["CFCommitIdentifier.Full"]);
    "CFCommitIdentifier.CommitHash": {
      commitHash: string;
    };
    "CFCommitIdentifier.Full": {
      project: components["schemas"]["ProjectIdentifier"];
      repository: string;
      commitHash: string;
    };
    CFCommitInfoBase: {
      className: string;
    } & (components["schemas"]["CFCommitInfoBase.CFCommitInfo"] | components["schemas"]["CFCommitInfoBase.PermissionDenied"]);
    "CFCommitInfoBase.CFCommitInfo": {
      commit: components["schemas"]["CommitInfo"];
    };
    "CFCommitInfoBase.PermissionDenied": {
      commitHash: string;
    };
    CFConstraint: {
      className: string;
    } & (components["schemas"]["IntCFConstraint"] | components["schemas"]["PercentageCFConstraint"] | components["schemas"]["DateTimeCFConstraint"] | components["schemas"]["StringCFConstraint"] | components["schemas"]["DateCFConstraint"]);
    CFCreateParameters: {
      className: string;
    } & (components["schemas"]["EnumCFInputParameters"] | components["schemas"]["VcsCommitCFParametersInput"] | components["schemas"]["AutonumberCFParameters"] | components["schemas"]["DocumentCFParametersInput"] | components["schemas"]["ContactCFParameters"] | components["schemas"]["OpenEnumCFCreateParameters"]);
    CFEnumValue: {
      id: string;
      value: string;
      principal?: components["schemas"]["CPrincipalDetails"];
    };
    CFEnumValueModification: {
      className: string;
    } & (components["schemas"]["CFEnumValueModification.Create"] | components["schemas"]["CFEnumValueModification.Remove"] | components["schemas"]["CFEnumValueModification.Update"]);
    "CFEnumValueModification.Create": {
      name: string;
    };
    "CFEnumValueModification.Remove": {
      valueIdentifier: components["schemas"]["CFEnumValueIdentifier"];
    };
    "CFEnumValueModification.Update": {
      valueIdentifier: components["schemas"]["CFEnumValueIdentifier"];
      newName: string;
    };
    CFEnumValuesModification: {
      valuesToAdd: (components["schemas"]["EnumValueData"])[];
      valuesToUpdate: (components["schemas"]["EnumValueData"])[];
      valuesToDelete: (string)[];
    };
    CFFilter: {
      className: string;
    } & (components["schemas"]["DocumentCFFilter"] | components["schemas"]["TeamCFFilter"] | components["schemas"]["TargetCFFilter"] | components["schemas"]["ProjectCFFilter"] | components["schemas"]["FractionCFFilter"] | components["schemas"]["LocationCFFilter"] | components["schemas"]["IssueCFFilter"] | components["schemas"]["BooleanCFFilter"] | components["schemas"]["ProfileCFFilter"] | components["schemas"]["EnumCFFilter"] | components["schemas"]["DeploymentCFFilter"] | components["schemas"]["PercentageCFFilter"] | components["schemas"]["IntCFFilter"] | components["schemas"]["DateTimeCFFilter"] | components["schemas"]["DateCFFilter"] | components["schemas"]["VcsCommitCFFilter"] | components["schemas"]["ContactCFFilter"] | components["schemas"]["StringCFFilter"] | components["schemas"]["AutonumberCFFilter"]);
    CFInputValue: {
      className: string;
    } & (components["schemas"]["ProjectCFInputValue"] | components["schemas"]["EnumListCFValue"] | components["schemas"]["DeploymentCFInputValue"] | components["schemas"]["OpenEnumListCFValue"] | components["schemas"]["UrlCFValue"] | components["schemas"]["EnumCFValue"] | components["schemas"]["DateCFValue"] | components["schemas"]["TeamCFInputValue"] | components["schemas"]["DocumentCFInputValue"] | components["schemas"]["AutonumberCFValue"] | components["schemas"]["IssueListCFInputValue"] | components["schemas"]["BooleanCFValue"] | components["schemas"]["IntCFValue"] | components["schemas"]["EnumListCFInputValue"] | components["schemas"]["ContactCFValue"] | components["schemas"]["IssueCFInputValue"] | components["schemas"]["OpenEnumCFValue"] | components["schemas"]["VcsCommitCFInputValue"] | components["schemas"]["ProfileListCFInputValue"] | components["schemas"]["ProfileCFInputValue"] | components["schemas"]["StringListCFValue"] | components["schemas"]["DateTimeCFValue"] | components["schemas"]["EnumCFInputValue"] | components["schemas"]["StringCFValue"] | components["schemas"]["LocationCFInputValue"] | components["schemas"]["IntListCFValue"] | components["schemas"]["ContactListCFValue"] | components["schemas"]["TargetCFInputValue"] | components["schemas"]["DocumentListCFInputValue"] | components["schemas"]["VcsCommitListCFInputValue"] | components["schemas"]["PercentageCFValue"] | components["schemas"]["OpenEnumListCFInputValue"] | components["schemas"]["OpenEnumCFInputValue"] | components["schemas"]["FractionCFValue"]);
    CFParameters: {
      className: string;
    } & (components["schemas"]["VcsCommitCFParameters"] | components["schemas"]["AutonumberCFParameters"] | components["schemas"]["ContactCFParameters"] | components["schemas"]["DocumentCFParameters"] | components["schemas"]["EnumCFParameters"]);
    CFType: {
      className: string;
    } & (components["schemas"]["ContactCFType"] | components["schemas"]["LocationCFType"] | components["schemas"]["IssueListCFType"] | components["schemas"]["StringCFType"] | components["schemas"]["OpenEnumListCFType"] | components["schemas"]["VcsCommitListCFType"] | components["schemas"]["FractionCFType"] | components["schemas"]["UrlCFType"] | components["schemas"]["DeploymentCFType"] | components["schemas"]["IntCFType"] | components["schemas"]["IssueCFType"] | components["schemas"]["ProjectCFType"] | components["schemas"]["AutonumberCFType"] | components["schemas"]["StringListCFType"] | components["schemas"]["DocumentCFType"] | components["schemas"]["EnumCFType"] | components["schemas"]["IntListCFType"] | components["schemas"]["ContactListCFType"] | components["schemas"]["VcsCommitCFType"] | components["schemas"]["ProfileListCFType"] | components["schemas"]["DateTimeCFType"] | components["schemas"]["DocumentListCFType"] | components["schemas"]["TeamCFType"] | components["schemas"]["PercentageCFType"] | components["schemas"]["TargetCFType"] | components["schemas"]["EnumListCFType"] | components["schemas"]["OpenEnumCFType"] | components["schemas"]["BooleanCFType"] | components["schemas"]["DateCFType"] | components["schemas"]["ProfileCFType"]);
    CFUpdateParameters: {
      className: string;
    } & (components["schemas"]["EnumCFInputParameters"] | components["schemas"]["VcsCommitCFParametersInput"] | components["schemas"]["AutonumberCFParameters"] | components["schemas"]["DocumentCFParametersInput"] | components["schemas"]["OpenEnumCFUpdateParameters"] | components["schemas"]["ContactCFParameters"]);
    CFValue: {
      className: string;
    } & (components["schemas"]["DocumentListCFValue"] | components["schemas"]["EnumListCFValue"] | components["schemas"]["LocationCFValue"] | components["schemas"]["OpenEnumListCFValue"] | components["schemas"]["DeploymentCFValue"] | components["schemas"]["IssueCFValue"] | components["schemas"]["UrlCFValue"] | components["schemas"]["EnumCFValue"] | components["schemas"]["DateCFValue"] | components["schemas"]["AutonumberCFValue"] | components["schemas"]["BooleanCFValue"] | components["schemas"]["IntCFValue"] | components["schemas"]["ContactCFValue"] | components["schemas"]["OpenEnumCFValue"] | components["schemas"]["StringListCFValue"] | components["schemas"]["VcsCommitListCFValue"] | components["schemas"]["DateTimeCFValue"] | components["schemas"]["IssueListCFValue"] | components["schemas"]["ProfileListCFValue"] | components["schemas"]["VcsCommitCFValue"] | components["schemas"]["StringCFValue"] | components["schemas"]["IntListCFValue"] | components["schemas"]["ContactListCFValue"] | components["schemas"]["ProfileCFValue"] | components["schemas"]["PercentageCFValue"] | components["schemas"]["ProjectCFValue"] | components["schemas"]["TeamCFValue"] | components["schemas"]["TargetCFValue"] | components["schemas"]["DocumentCFValue"] | components["schemas"]["FractionCFValue"]);
    CPrincipal: {
      name: string;
      details?: components["schemas"]["CPrincipalDetails"];
    };
    CPrincipalDetails: {
      className: string;
    } & (components["schemas"]["CApplicationPrincipalDetails"] | components["schemas"]["CBuiltInServicePrincipalDetails"] | components["schemas"]["CUserPrincipalDetails"] | components["schemas"]["CAutomationTaskPrincipalDetails"] | components["schemas"]["CUserWithEmailPrincipalDetails"]);
    CRThreadContactsRecord: {
      crThreads: (components["schemas"]["ChatContactRecord"])[];
      archived: boolean;
      id: string;
    };
    CRight: {
      typeCode: string;
      code: string;
      title: string;
      description?: string | null;
      featureFlag?: components["schemas"]["FeatureFlagInfo"];
    };
    CUserPrincipalDetails: {
      user: components["schemas"]["TD_MemberProfile"];
    };
    CUserWithEmailPrincipalDetails: {
      name: string;
      email: string;
    };
    CalendarEvent: {
      calendarEvent?: boolean | null;
      /** Format: date-time */
      starts?: string | null;
      /** Format: date-time */
      ends?: string | null;
      timezone?: components["schemas"]["ATimeZone"];
      rooms?: (components["schemas"]["TD_Location"])[] | null;
      allDay?: boolean | null;
    };
    CalendarEventIn: {
      calendarEvent?: boolean | null;
      /** Format: date-time */
      starts?: string | null;
      /** Format: date-time */
      ends?: string | null;
      timezone?: components["schemas"]["ATimeZone"];
      rooms?: (string)[] | null;
      allDay?: boolean | null;
    };
    CalendarEventSpec: {
      /** Format: date-time */
      start: string;
      /** Format: date-time */
      end: string;
      recurrenceRule?: components["schemas"]["RecurrenceRule"];
      allDay: boolean;
      timezone: components["schemas"]["ATimeZone"];
      parentId?: string | null;
      /** Format: date-time */
      initialMeetingStart?: string | null;
      busyStatus?: components["schemas"]["BusyStatus"];
      nextChainId?: string | null;
    };
    CalendarInfo: {
      id: string;
      name?: string | null;
      defaultColor?: string | null;
      freeBusyOnly: boolean;
      readOnly: boolean;
      exposeToCalDav: boolean;
      exposeToGoogle: boolean;
      sourceUrl?: string | null;
      /** Format: int32 */
      syncAttemptCount?: number | null;
      archived: boolean;
    };
    CallSession: {
      id: string;
      archived: boolean;
      room: components["schemas"]["Room"];
      description: string;
      /** Format: date-time */
      start: string;
      /** Format: date-time */
      end?: string | null;
      channel?: components["schemas"]["M2ChannelRecord"];
      topology?: components["schemas"]["ConnectionTopology"];
      resourcesPrepared: boolean;
      active?: boolean | null;
      initialSession?: components["schemas"]["CallSession"];
      participations: (components["schemas"]["SessionParticipationRecord"])[];
      subSessions: (components["schemas"]["CallSession"])[];
    };
    CallSessionUnfurlDetails: {
      session: components["schemas"]["CallSession"];
    };
    CertificateInfo: {
      certificateType: string;
      /** Format: int32 */
      version: number;
      serialNumber: string;
      issuedBy: string;
      issuedTo: string;
      /** Format: date-time */
      validFrom: string;
      /** Format: date-time */
      validTo: string;
      algorithm: string;
      fingerprint: components["schemas"]["Fingerprint"];
    };
    ChangeClientSecretPayload: {
      newClientSecret: string;
      clientId: string;
      userId?: string | null;
      verificationToken?: string | null;
    };
    ChangeInReview: {
      repository: string;
      change: components["schemas"]["GitCommitChange"];
      read: boolean;
    };
    ChangeServerUrlPayload: {
      newServerUrl: string;
      clientId: string;
      userId?: string | null;
      verificationToken?: string | null;
    };
    ChangeUnfurlViewType: {
      messageId: string;
      unfurlLink: string;
      viewTypes: (components["schemas"]["UnfurlViewType"])[];
    };
    ChannelContactThread: {
      className: string;
    } & (components["schemas"]["M2ChannelContentCodeDiscussionInReview"] | components["schemas"]["M2ChannelContactThread"]);
    ChannelEvent: {
      meta: components["schemas"]["KMetaMod"];
      channel: components["schemas"]["M2ChannelRecord"];
      name?: {
        old: string;
        new: string;
      } | null;
      description?: {
        old: string;
        new: string;
      } | null;
      icon?: {
        old: string;
        new: string;
      } | null;
      restored?: boolean | null;
      archived?: boolean | null;
    };
    ChannelFilterValue: {
      identifier?: components["schemas"]["ChannelIdentifier"];
      details?: components["schemas"]["ChannelFilterValueDetails"];
    };
    ChannelFilterValueDetails: {
      className: string;
    } & components["schemas"]["IssueChannelFilterValueDetails"];
    ChannelInfoAttachment: {
      details?: components["schemas"]["Attachment"];
      /** Format: date-time */
      time: string;
      messageId: string;
      channelId: string;
      contactKey: string;
    };
    ChannelItemRecord: {
      text: string;
      details?: components["schemas"]["M2ItemContentDetails"];
      author: components["schemas"]["CPrincipal"];
      /** Format: date-time */
      created: string;
      /** Format: int64 */
      time: number;
      reactions?: components["schemas"]["AllReactionsToItemRecord"];
      thread?: components["schemas"]["M2ChannelRecord"];
      projectedItem?: components["schemas"]["ChannelItemRecord"];
      attachments?: (components["schemas"]["AttachmentInfo"])[] | null;
      externalId?: string | null;
      pending?: boolean | null;
      id: string;
      archived: boolean;
      /** Format: date-time */
      edited?: string | null;
      pinned?: boolean | null;
      suggestedParticipants?: (components["schemas"]["CPrincipal"])[] | null;
      mentions?: (components["schemas"]["EntityMention"])[] | null;
      channelId?: string | null;
      importerAppId?: string | null;
      issues: (components["schemas"]["Issue"])[];
      externalIssues?: (components["schemas"]["ExternalIssue"])[] | null;
    };
    ChannelItemSnapshot: {
      id: string;
      channelId?: string | null;
      text: string;
      details?: components["schemas"]["M2ItemContentDetails"];
      author: components["schemas"]["CPrincipal"];
      /** Format: date-time */
      created: string;
      /** Format: int64 */
      time: number;
      attachments?: (components["schemas"]["AttachmentInfo"])[] | null;
      mentions?: (components["schemas"]["EntityMention"])[] | null;
      projectedItem?: components["schemas"]["ChannelItemSnapshot"];
    };
    ChannelItemSyncRecord: {
      modType: components["schemas"]["SyncRecordModType"];
      etag: string;
      chatMessage: components["schemas"]["ChannelItemRecord"];
    };
    ChannelMessageMenuActionContext: {
      channelIdentifier: components["schemas"]["ChannelIdentifier"];
      messageIdentifier: components["schemas"]["ChatMessageIdentifier"];
    };
    ChannelParticipant: {
      principal: components["schemas"]["CPrincipal"];
      /** Format: int32 */
      messageCount: number;
      /** Format: int32 */
      pendingMessageCount?: number | null;
    };
    ChannelPermissionContext: {
      channel: components["schemas"]["M2ChannelRecord"];
    };
    ChannelPermissionTarget: {
      channel: components["schemas"]["ChannelIdentifier"];
    };
    ChannelSpecificDefaults: {
      subscribed?: boolean | null;
      filter: components["schemas"]["NotificationFilter"];
      push: boolean;
      email: components["schemas"]["M2EmailNotificationType"];
      threadsSubscribed?: boolean | null;
    };
    ChatBotUiExtensionApi: Record<string, never>;
    ChatBotUiExtensionIn: Record<string, never>;
    ChatChannelSubscriptionFilter: {
      channel?: string | null;
      contact?: components["schemas"]["ChatContactRecord"];
    };
    ChatChannelSubscriptionFilterIn: {
      channel?: string | null;
    };
    ChatContactDetails: {
      className: string;
    } & (components["schemas"]["ChatContactDetails.App"] | components["schemas"]["ChatContactDetails.Conversation"] | components["schemas"]["ChatContactDetails.Default"] | components["schemas"]["ChatContactDetails.Profile"] | components["schemas"]["ChatContactDetails.Thread"]);
    "ChatContactDetails.App": {
      app: components["schemas"]["ES_App"];
      icon?: string | null;
    };
    "ChatContactDetails.Conversation": {
      users: (components["schemas"]["TD_MemberProfile"])[];
      subject?: string | null;
    };
    "ChatContactDetails.Default": {
      type: string;
      name: string;
      icon?: string | null;
      fontIcon?: string | null;
      fontIconColor?: components["schemas"]["PrivateFeedColor"];
      access?: components["schemas"]["M2.Access"];
      resolvedImpl?: boolean | null;
      extra?: components["schemas"]["ContactExtraTag"];
    };
    "ChatContactDetails.Profile": {
      user: components["schemas"]["TD_MemberProfile"];
    };
    "ChatContactDetails.Thread": {
      parent: components["schemas"]["ChatContactRecord"];
      message: components["schemas"]["MessageInfo"];
      authors?: (components["schemas"]["CPrincipal"])[] | null;
      /** Format: int32 */
      replies?: number | null;
      absorbingParent?: boolean | null;
      resolvedImpl?: boolean | null;
    };
    ChatContactRecord: {
      id: string;
      archived: boolean;
      key: string;
      details: components["schemas"]["ChatContactDetails"];
      channelType: string;
      lastMessage?: components["schemas"]["MessageInfo"];
      unreadStatus?: components["schemas"]["M2UnreadStatus"];
      /** Format: date-time */
      readTime?: string | null;
      /** Format: date-time */
      subscribedSince: string;
      pinned: boolean;
      pinnedPrevId?: string | null;
      draft?: string | null;
      /** Format: int64 */
      draftTime?: number | null;
      /** Format: int64 */
      lastChildMessageTime?: number | null;
      deleted?: boolean | null;
      muted?: boolean | null;
    };
    ChatMessage: {
      className: string;
    } & (components["schemas"]["ChatMessage.Block"] | components["schemas"]["ChatMessage.Text"]);
    "ChatMessage.Block": {
      style?: components["schemas"]["MessageStyle"];
      outline?: components["schemas"]["MessageOutlineBase"];
      sections: (components["schemas"]["MessageSectionElement"])[];
      messageData?: string | null;
    };
    "ChatMessage.Text": {
      text: string;
    };
    ChatMessageCreatedEvent: {
      channelId: string;
      threadId?: string | null;
      message: components["schemas"]["ChannelItemRecord"];
    };
    ChatMessageDeletedEvent: {
      channelId: string;
      threadId?: string | null;
      message: components["schemas"]["ChannelItemRecord"];
    };
    ChatMessageEditableByMe: Record<string, never>;
    "ChatMessageIdentifier.ExternalId": {
      externalId: string;
    };
    ChatMessageMenuItemUiExtensionApi: {
      displayName: string;
      description?: string | null;
      menuItemUniqueCode: string;
      visibilityFilters: (components["schemas"]["ChatMessageMenuItemVisibilityFilterApi"])[];
    };
    ChatMessageMenuItemUiExtensionIn: {
      displayName: string;
      description?: string | null;
      menuItemUniqueCode: string;
      visibilityFilters: (components["schemas"]["ChatMessageMenuItemVisibilityFilterIn"])[];
    };
    ChatMessageMenuItemVisibilityFilterApi: {
      className: string;
    } & components["schemas"]["ChatMessageEditableByMe"];
    ChatMessageMenuItemVisibilityFilterIn: {
      className: string;
    } & components["schemas"]["ChatMessageEditableByMe"];
    ChatMessageReactionAddedEvent: {
      messageId: string;
      channelId: string;
      threadId?: string | null;
      actor: components["schemas"]["CPrincipal"];
      emoji: string;
      /** Format: int32 */
      newCount: number;
    };
    ChatMessageReactionRemovedEvent: {
      messageId: string;
      channelId: string;
      threadId?: string | null;
      actor: components["schemas"]["CPrincipal"];
      emoji: string;
      /** Format: int32 */
      newCount: number;
    };
    ChatMessageReactionSubscriptionFilter: {
      emojis: (string)[];
    };
    ChatMessageReactionSubscriptionFilterIn: {
      emojis?: (string)[] | null;
    };
    ChatMessageUnfurlContext: {
      channel: string;
      messageId: components["schemas"]["ChatMessageIdentifier"];
    };
    ChatMessageUpdatedEvent: {
      channelId: string;
      threadId?: string | null;
      message: components["schemas"]["ChannelItemRecord"];
      edited?: {
        /** Format: date-time */
        old: string;
        /** Format: date-time */
        new: string;
      } | null;
      pinned?: {
        old: boolean;
        new: boolean;
      } | null;
    };
    ChatModification: {
      className: string;
    } & (components["schemas"]["ChangeUnfurlViewType"] | components["schemas"]["DeleteMessage"] | components["schemas"]["EditMessage"] | components["schemas"]["NewMessage"] | components["schemas"]["PublishMessage"]);
    ChatSubscriptionFilterIn: {
      className: string;
    } & (components["schemas"]["ChatMessageReactionSubscriptionFilterIn"] | components["schemas"]["ChatChannelSubscriptionFilterIn"]);
    Checklist: {
      id: string;
      archived: boolean;
      projectId?: string | null;
      project?: components["schemas"]["PR_Project"];
      issue?: components["schemas"]["Issue"];
      owner?: components["schemas"]["TD_MemberProfile"];
      name: string;
      root?: components["schemas"]["PlanItem"];
      rootTag?: components["schemas"]["PlanningTag"];
      description?: string | null;
      /** Format: int32 */
      totalItemsCount: number;
      /** Format: int32 */
      doneItemsCount: number;
      /** Format: date-time */
      updatedTime?: string | null;
    };
    ChecklistBodyIn: {
      className: string;
    } & components["schemas"]["TabIndentedLinesBodyIn"];
    ChecklistDocumentBody: {
      checklist?: components["schemas"]["Checklist"];
      canConvertItemsToIssues: boolean;
      checklistId?: string | null;
      /** Format: int32 */
      totalItemsCount?: number | null;
      /** Format: int32 */
      doneItemsCount?: number | null;
      checklistArenaId?: string | null;
    };
    ChecklistDocumentBodyCreateIn: {
      bodyIn?: components["schemas"]["ChecklistBodyIn"];
    };
    ChecklistDocumentBodyEditIn: {
      description?: string | null;
      owner?: string | null;
      tag?: string | null;
      topics?: (string)[];
      bodyIn?: components["schemas"]["ChecklistBodyIn"];
    };
    ChecklistDocumentHttpBody: {
      checklist: components["schemas"]["Checklist"];
    };
    CheckoutRevisionDTO: {
      repoName: string;
      cloneDir?: string | null;
      branch: components["schemas"]["Branch"];
      commit?: string | null;
    };
    ClientSideActionContext: {
      className: string;
    } & (components["schemas"]["PostponeWorkspaceDeletionChannelAction"] | components["schemas"]["DeleteAutomationLegacyChannelAction"] | components["schemas"]["NavigateUrlActionContext"] | components["schemas"]["DeletePersonalFeedAction"] | components["schemas"]["OpenPersonalFeedSettingsAction"] | components["schemas"]["DeleteAllAutomationLegacyChannelsAction"] | components["schemas"]["NewMergeRequestFromIssueActionContext"] | components["schemas"]["NewMergeRequestFromIssueBranchActionContext"] | components["schemas"]["ConfigurePermissionsAction"]);
    CodeAnalysisCompletedFeedEvent: {
      projectKey: components["schemas"]["ProjectKey"];
      /** Format: int32 */
      reviewNumber: number;
      revision: string;
      revisionLink: string;
      toolName: string;
      issuesCountByLevel: (components["schemas"]["MergeRequestCodeIssueStatsForLevel"])[];
    };
    CodeDiscussionAddedFeedEvent: {
      codeDiscussion: components["schemas"]["CodeDiscussionRecord"];
      codeReview: components["schemas"]["CodeReviewRecord"];
    };
    CodeDiscussionAnchor: {
      project: components["schemas"]["ProjectKey"];
      repository: string;
      revision: string;
      filename?: string | null;
      /** Format: int32 */
      line?: number | null;
      /** Format: int32 */
      oldLine?: number | null;
      interpolatedLineState?: components["schemas"]["InterpolatedLineState"];
    };
    CodeDiscussionRecord: {
      id: string;
      projectId: string;
      project?: components["schemas"]["PR_Project"];
      anchor: components["schemas"]["CodeDiscussionAnchor"];
      endAnchor?: components["schemas"]["CodeDiscussionAnchor"];
      /** Format: date-time */
      created: string;
      channel: components["schemas"]["M2ChannelRecord"];
      resolvable?: boolean | null;
      resolved: boolean;
      snippet?: components["schemas"]["CodeDiscussionSnippet"];
      suggestedEdit?: components["schemas"]["CodeDiscussionSuggestedEdit"];
      resolvedBy?: components["schemas"]["CPrincipal"];
      pending?: boolean | null;
      review?: components["schemas"]["CodeReviewRecord"];
      feedItemId?: string | null;
      reviews?: (components["schemas"]["CodeReviewRecord"])[] | null;
      archived: boolean;
    };
    CodeDiscussionSnippet: {
      className: string;
    } & (components["schemas"]["CodeDiscussionSnippet.InlineDiffSnippet"] | components["schemas"]["CodeDiscussionSnippet.PlainSnippet"]);
    "CodeDiscussionSnippet.InlineDiffSnippet": {
      lines: (components["schemas"]["InlineDiffLine"])[];
    };
    "CodeDiscussionSnippet.PlainSnippet": {
      lines: (components["schemas"]["CodeLine"])[];
    };
    CodeDiscussionSuggestedEdit: {
      suggestionCommitId: string;
      status?: components["schemas"]["CodeDiscussionSuggestedEditState"];
      resolvedBy?: components["schemas"]["CPrincipal"];
      filePath: string;
      hasConflicts: boolean;
      identicalContents?: boolean | null;
      /** Format: int32 */
      startLineIndex: number;
      /** Format: int32 */
      endLineIndexInclusive: number;
    };
    CodeDiscussionSuggestedEditRequest: {
      path: string;
      commitId: string;
      /** Format: int32 */
      startLineIndex: number;
      /** Format: int32 */
      endLineIndexInclusive: number;
      suggestedContent: string;
    };
    CodeIssueFeedback: {
      reviewId: string;
      anchor: components["schemas"]["MergeRequestCodeIssueAnchor"];
      message: string;
      ruleId: string;
      codeSnippet: (string)[];
      dismissed: boolean;
      /** Format: int32 */
      upvotesCount: number;
    };
    CodeLine: {
      text: string;
      /** Format: int32 */
      index?: number | null;
      /** Format: int32 */
      offset: number;
      syntax?: (components["schemas"]["SyntaxMarkup"])[] | null;
    };
    CodeReviewCommitsUpdatedWebhookEvent: {
      meta?: components["schemas"]["KMetaMod"];
      review: components["schemas"]["CodeReviewRecord"];
    };
    CodeReviewDescription: {
      text: string;
      unfurls: (components["schemas"]["Attachment"])[];
    };
    CodeReviewDetailedInfo: {
      shortInfo: components["schemas"]["CodeReviewRecord"];
      commits: (components["schemas"]["RevisionsInReview"])[];
      discussionCounter: components["schemas"]["CodeReviewDiscussionCounter"];
      unboundDiscussionCounter?: components["schemas"]["CodeReviewUnboundDiscussionCounter"];
      branches: (components["schemas"]["TrackedBranchesInReview"])[];
    };
    CodeReviewDiscussion: {
      className: string;
    } & (components["schemas"]["CodeReviewDiscussion.Bound"] | components["schemas"]["CodeReviewDiscussion.Unbound"]);
    "CodeReviewDiscussion.Bound": {
      discussion: components["schemas"]["CodeDiscussionRecord"];
    };
    "CodeReviewDiscussion.Unbound": {
      discussion: components["schemas"]["CodeReviewUnboundDiscussionRecord"];
    };
    CodeReviewDiscussionAddedFeedEvent: {
      discussion: components["schemas"]["CodeReviewDiscussionRecord"];
    };
    CodeReviewDiscussionCounter: {
      id: string;
      discussionCounter: components["schemas"]["DiscussionCounter"];
    };
    CodeReviewDiscussionRecord: {
      id: string;
      review: components["schemas"]["CodeReviewRecord"];
      /** Format: date-time */
      created: string;
      channel?: components["schemas"]["M2ChannelRecord"];
      resolved?: boolean | null;
      archived: boolean;
    };
    CodeReviewDiscussionWebhookEvent: {
      meta?: components["schemas"]["KMetaMod"];
      review: components["schemas"]["CodeReviewRecord"];
      discussion: components["schemas"]["CodeReviewDiscussion"];
      resolved?: {
        old: boolean;
        new: boolean;
      } | null;
    };
    CodeReviewEditableByMe: Record<string, never>;
    CodeReviewLinkedExternalIssuesChanged: {
      review: components["schemas"]["CodeReviewRecord"];
      issues: (components["schemas"]["ExternalIssueIdOut"])[];
    };
    CodeReviewMenuActionContext: {
      projectIdentifier: components["schemas"]["ProjectIdentifier"];
      codeReviewIdentifier: components["schemas"]["ReviewIdentifier"];
    };
    CodeReviewMenuItemUiExtensionApi: {
      displayName: string;
      description?: string | null;
      menuItemUniqueCode: string;
      visibilityFilters: (components["schemas"]["CodeReviewMenuItemVisibilityFilterApi"])[];
    };
    CodeReviewMenuItemUiExtensionIn: {
      displayName: string;
      description?: string | null;
      menuItemUniqueCode: string;
      visibilityFilters: (components["schemas"]["CodeReviewMenuItemVisibilityFilterIn"])[];
    };
    CodeReviewMenuItemVisibilityFilterApi: {
      className: string;
    } & components["schemas"]["CodeReviewEditableByMe"];
    CodeReviewMenuItemVisibilityFilterIn: {
      className: string;
    } & components["schemas"]["CodeReviewEditableByMe"];
    CodeReviewParticipant: {
      user: components["schemas"]["TD_MemberProfile"];
      role: components["schemas"]["CodeReviewParticipantRole"];
      hasOwnedFiles?: boolean | null;
      ownsAllFiles?: boolean | null;
      reviewOnlyOwnedFiles?: boolean | null;
      state?: components["schemas"]["ReviewerState"];
      isApproveSticky?: boolean | null;
      theirTurn?: boolean | null;
      qualityGateSlots?: (components["schemas"]["CodeReviewParticipantQualityGateSlot"])[] | null;
      codeOwnerSlots?: (components["schemas"]["CodeReviewParticipantCodeOwnerSlot"])[] | null;
      /** Format: date-time */
      addedAt?: string | null;
    };
    CodeReviewParticipantCodeOwnerSlot: {
      rule?: (string)[] | null;
      pattern: string;
    };
    CodeReviewParticipantQualityGateSlot: {
      rule: (string)[];
      /** Format: int32 */
      index: number;
    };
    CodeReviewParticipantRecord: {
      id: string;
      projectId: string;
      role: components["schemas"]["CodeReviewParticipantRole"];
      profile: components["schemas"]["TD_MemberProfile"];
      reviewerState?: components["schemas"]["ReviewerState"];
      theirTurn?: boolean | null;
      archived: boolean;
    };
    CodeReviewParticipantSlotBase: {
      className: string;
    } & (components["schemas"]["CodeReviewParticipantCodeOwnerSlot"] | components["schemas"]["CodeReviewParticipantQualityGateSlot"]);
    CodeReviewParticipantWebhookEvent: {
      meta?: components["schemas"]["KMetaMod"];
      review: components["schemas"]["CodeReviewRecord"];
      isMergeRequest: boolean;
      participant: components["schemas"]["TD_MemberProfile"];
      reviewerState?: {
        old: components["schemas"]["ReviewerState"];
        new: components["schemas"]["ReviewerState"];
      } | null;
      theirTurn?: {
        old: boolean;
        new: boolean;
      } | null;
    };
    CodeReviewParticipants: {
      id: string;
      participants?: (components["schemas"]["CodeReviewParticipant"])[] | null;
      reviewers: (components["schemas"]["CodeReviewParticipantRecord"])[];
      authors: (components["schemas"]["CodeReviewParticipantRecord"])[];
      watchers: (components["schemas"]["CodeReviewParticipantRecord"])[];
    };
    CodeReviewPendingMessageCounter: {
      id: string;
      archived: boolean;
    };
    CodeReviewRecord: {
      className: string;
    } & (components["schemas"]["CommitSetReviewRecord"] | components["schemas"]["MergeRequestRecord"]);
    CodeReviewSubscriptionFilter: {
      project?: components["schemas"]["PR_Project"];
      repository?: string | null;
      authors: (components["schemas"]["TD_MemberProfile"])[];
      participants: (components["schemas"]["TD_MemberProfile"])[];
      branchSpec: (string)[];
      pathSpec: (string)[];
      titleRegex: string;
    };
    CodeReviewSubscriptionFilterIn: {
      project?: string | null;
      repository?: string | null;
      authors: (string)[];
      participants: (string)[];
      branchSpec: (string)[];
      pathSpec: (string)[];
      titleRegex: string;
    };
    CodeReviewUnboundDiscussionCounter: {
      id: string;
    };
    CodeReviewUnboundDiscussionRecord: {
      id: string;
      review: components["schemas"]["CodeReviewRecord"];
      item: components["schemas"]["ChannelItemRecord"];
      resolved?: boolean | null;
      pending: boolean;
      archived: boolean;
    };
    CodeReviewUnfurlContext: {
      reviewId: string;
      field?: components["schemas"]["CodeReviewUnfurlContextField"];
    };
    CodeReviewUpdatedWebhookEvent: {
      meta: components["schemas"]["KMetaMod"];
      review?: components["schemas"]["CodeReviewRecord"];
      titleMod?: {
        old: string;
        new: string;
      } | null;
      descriptionMod?: {
        old: string;
        new: string;
      } | null;
      targetBranchMod?: {
        old: string;
        new: string;
      } | null;
    };
    CodeReviewWebhookEvent: {
      meta?: components["schemas"]["KMetaMod"];
      review?: components["schemas"]["CodeReviewRecord"];
      projectKey: components["schemas"]["ProjectKey"];
      repository: string;
      reviewId: string;
      title: string;
      isMergeRequest: boolean;
    };
    CodeReviewWithCount: {
      review: components["schemas"]["CodeReviewRecord"];
      /** Format: int32 */
      messagesCount: number;
      authors: (components["schemas"]["GitCommitterProfile"])[];
      participants: components["schemas"]["CodeReviewParticipants"];
    };
    CodeScopeRange: {
      /** Format: int32 */
      prefixLine?: number | null;
      /** Format: int32 */
      startLine: number;
      /** Format: int32 */
      linesCount: number;
    };
    CodeSnippetAnchor: {
      projectKey: components["schemas"]["ProjectKey"];
      repository: string;
      revision: string;
      filename: string;
      /** Format: int32 */
      lineIndex?: number | null;
      /** Format: int32 */
      linesCount?: number | null;
    };
    CodeSuggestedEditHeadContentDetails: {
      codeDiscussion: components["schemas"]["CodeDiscussionRecord"];
      accepted?: boolean | null;
    };
    CommandDetail: {
      name: string;
      description: string;
    };
    Commands: {
      commands: (components["schemas"]["CommandDetail"])[];
    };
    CommitInfo: {
      project: components["schemas"]["PR_Project"];
      repository: string;
      commitId: string;
      message: string;
      /** Format: date-time */
      commitDate: string;
      authorName: string;
      authorEmail: string;
      authorProfile?: components["schemas"]["TD_MemberProfile"];
    };
    CommitLinkedExternalIssuesChanged: {
      project: components["schemas"]["PR_Project"];
      repositoryId: string;
      repositoryName?: string | null;
      commitId: string;
      commit?: components["schemas"]["GitCommitInfo"];
      changes?: components["schemas"]["GitCommitChanges"];
      url?: string | null;
      issues: (components["schemas"]["ExternalIssueIdOut"])[];
    };
    CommitLinksContainer: {
      className: string;
    } & components["schemas"]["IssueCommits"];
    CommitMessageUnfurlContext: {
      projectId: string;
      repo: string;
      commitId: string;
    };
    CommitMessageUnfurlsRecord: {
      id: string;
      unfurls: (components["schemas"]["Unfurl"])[];
    };
    CommitSetReviewRecord: {
      id: string;
      project: components["schemas"]["ProjectKey"];
      projectId: string;
      /** Format: int32 */
      number: number;
      title: string;
      state: components["schemas"]["CodeReviewState"];
      canBeReopened?: boolean | null;
      /** Format: int64 */
      createdAt: number;
      createdBy?: components["schemas"]["TD_MemberProfile"];
      /** Format: int64 */
      timestamp?: number | null;
      turnBased?: boolean | null;
      feedChannel?: components["schemas"]["M2ChannelRecord"];
      feedChannelId?: string | null;
      readOnly?: boolean | null;
      commits: (components["schemas"]["ReviewCommit"])[];
      description?: string | null;
      unfurls: (components["schemas"]["Attachment"])[];
      issueIds: (string)[];
      externalIssues?: (components["schemas"]["ExternalIssueIdOut"])[] | null;
      participants?: (components["schemas"]["CodeReviewParticipant"])[] | null;
      reviewers: (components["schemas"]["CodeReviewParticipantRecord"])[];
      authors: (components["schemas"]["CodeReviewParticipantRecord"])[];
      watchers: (components["schemas"]["CodeReviewParticipantRecord"])[];
      discussionCounter: components["schemas"]["DiscussionCounter"];
      reports: (components["schemas"]["MergeRequestCodeIssuesReport"])[];
    };
    CommonProjectFeaturePinnedItem: {
      value: components["schemas"]["ProjectFeaturePinnedItem"];
      pinnedBy?: components["schemas"]["CPrincipal"];
      wasPinnedAutomatically: boolean;
    };
    CommonProjectFeaturePins: {
      feature: components["schemas"]["ProjectFeature"];
      items: (components["schemas"]["CommonProjectFeaturePinnedItem"])[];
    };
    ComposerPackageDependency: {
      name: string;
      version: string;
      type: string;
    };
    ComposerPackageType: {
      id: string;
    };
    ComposerPackageVersionDetails: {
      type: components["schemas"]["PackageType"];
      repository: string;
      name: string;
      version: string;
      tags?: (string)[] | null;
      /** Format: int64 */
      created: number;
      /** Format: int64 */
      accessed?: number | null;
      /** Format: int64 */
      downloads: number;
      pinned: boolean;
      comment?: string | null;
      /** Format: int64 */
      diskSize: number;
      author?: components["schemas"]["CPrincipal"];
      authors?: (components["schemas"]["CPrincipal"])[] | null;
      origin?: components["schemas"]["PackageOrigin"];
      metadata?: ({
        [key: string]: string | undefined;
      }) | null;
      description?: string | null;
      homepage?: string | null;
      dependencies: (components["schemas"]["ComposerPackageDependency"])[];
      keywords?: (string)[] | null;
      license?: string | null;
      projectUrl?: string | null;
      repositoryUrl?: string | null;
      repositoryRevision?: string | null;
      readme?: string | null;
    };
    ComputePoolKey: {
      value: string;
    };
    ConfigurePermissionsAction: {
      app: components["schemas"]["ES_App"];
      context: components["schemas"]["PermissionContextIdentifier"];
    };
    ContactCFFilter: {
      query: string;
    };
    ContactCFParameters: {
      contactKind?: components["schemas"]["TD_ContactKind"];
    };
    ContactCFType: Record<string, never>;
    ContactCFValue: {
      value?: string | null;
    };
    ContactExtraTag: {
      primary: string;
      secondary: string;
      issueStatus?: string | null;
      issueStatusColor?: string | null;
      issueStatusId?: string | null;
      /** Format: int32 */
      issueNumber?: number | null;
      issueTitle?: string | null;
      projectKey?: components["schemas"]["ProjectKey"];
      projectName?: string | null;
      projectId?: string | null;
      assignee?: components["schemas"]["CPrincipal"];
      contactThreads?: components["schemas"]["ThreadContactsRecord"];
      basicContactThreads?: (components["schemas"]["BasicThreadContactsRecord"])[] | null;
      reviewState?: string | null;
      mergeRequestBranchMerged?: boolean | null;
      isMergeRequest?: boolean | null;
      /** Format: int32 */
      reviewNumber?: number | null;
      reviewParticipantRole?: string | null;
      reviewerState?: string | null;
      reviewTheirTurn?: boolean | null;
      targetMergeRequestBranchHead?: string | null;
    };
    ContactListCFType: Record<string, never>;
    ContactListCFValue: {
      values: (string)[];
    };
    ContainerHelmChart: {
      name?: string | null;
      description?: string | null;
      tags?: (string)[] | null;
      projectUrl?: string | null;
      sourceUrl?: string | null;
      version?: string | null;
      apiVersion?: string | null;
      appVersion?: string | null;
      dependencies: (components["schemas"]["ContainerHelmChartDependency"])[];
      type?: string | null;
    };
    ContainerHelmChartDependency: {
      name: string;
      version: string;
      repository?: string | null;
      condition?: string | null;
      tags?: (string)[] | null;
    };
    ContainerImage: {
      name?: string | null;
      description?: string | null;
      tags?: (string)[] | null;
      projectUrl?: string | null;
      sourceUrl?: string | null;
      version?: string | null;
      platform?: components["schemas"]["ContainerImagePlatform"];
      history: (components["schemas"]["ContainerImageLayer"])[];
      children: (components["schemas"]["ContainerManifest"])[];
      config?: components["schemas"]["ContainerImageConfig"];
      annotation?: components["schemas"]["ContainerImageAnnotation"];
    };
    ContainerImageAnnotation: {
      /** Format: int64 */
      created?: number | null;
      buildName?: string | null;
      buildUrl?: string | null;
      revision?: string | null;
      vendor?: string | null;
      documentationUrl?: string | null;
      licenses?: string | null;
    };
    ContainerImageConfig: {
      userName?: string | null;
      ports?: (string)[] | null;
      volumes?: (string)[] | null;
      env?: (string)[] | null;
      workingDir?: string | null;
      entryPoint?: string | null;
      cmd?: string | null;
      labels?: (string)[] | null;
    };
    ContainerImageLayer: {
      id: string;
      /** Format: int64 */
      created?: number | null;
      statement: string;
      command: string;
      /** Format: int64 */
      size?: number | null;
    };
    ContainerImagePlatform: {
      os: string;
      osVersion?: string | null;
      arch?: string | null;
    };
    ContainerManifest: {
      name: string;
      digest: string;
      tags: (string)[];
      /** Format: int64 */
      created: number;
      /** Format: int32 */
      schemaVersion: number;
      mediaType: string;
      manifestType: string;
      /** Format: int64 */
      totalSize: number;
      image?: components["schemas"]["ContainerImage"];
      chart?: components["schemas"]["ContainerHelmChart"];
    };
    ContainerPackageType: {
      id: string;
    };
    ContainerPackageVersionDetails: {
      type: components["schemas"]["PackageType"];
      repository: string;
      name: string;
      version: string;
      tags?: (string)[] | null;
      /** Format: int64 */
      created: number;
      /** Format: int64 */
      accessed?: number | null;
      /** Format: int64 */
      downloads: number;
      pinned: boolean;
      comment?: string | null;
      /** Format: int64 */
      diskSize: number;
      author?: components["schemas"]["CPrincipal"];
      authors?: (components["schemas"]["CPrincipal"])[] | null;
      origin?: components["schemas"]["PackageOrigin"];
      metadata?: ({
        [key: string]: string | undefined;
      }) | null;
      /** Format: int32 */
      schemaVersion: number;
      mediaType: string;
      manifestType: string;
      image?: components["schemas"]["ContainerImage"];
      chart?: components["schemas"]["ContainerHelmChart"];
      subject?: components["schemas"]["PackageVersionRef"];
    };
    ContextMenuItemUiExtensionApi: {
      className: string;
    } & (components["schemas"]["DocumentMenuItemUiExtensionApi"] | components["schemas"]["DocumentFolderMenuItemUiExtensionApi"] | components["schemas"]["MeetingMenuItemUiExtensionApi"] | components["schemas"]["ChatMessageMenuItemUiExtensionApi"] | components["schemas"]["CodeReviewMenuItemUiExtensionApi"] | components["schemas"]["IssueMenuItemUiExtensionApi"]);
    ContextMenuItemUiExtensionIn: {
      className: string;
    } & (components["schemas"]["ChatMessageMenuItemUiExtensionIn"] | components["schemas"]["IssueMenuItemUiExtensionIn"] | components["schemas"]["CodeReviewMenuItemUiExtensionIn"] | components["schemas"]["DocumentFolderMenuItemUiExtensionIn"] | components["schemas"]["DocumentMenuItemUiExtensionIn"] | components["schemas"]["MeetingMenuItemUiExtensionIn"]);
    CratesPackageDependency: {
      name: string;
      versionReq: string;
      features: (string)[];
      optional: boolean;
      defaultFeatures: boolean;
      target?: string | null;
      kind: string;
      registry?: string | null;
    };
    CratesPackageType: {
      id: string;
    };
    CratesPackageVersionDetails: {
      repository: string;
      name: string;
      version: string;
      tags?: (string)[] | null;
      /** Format: int64 */
      created: number;
      /** Format: int64 */
      accessed?: number | null;
      /** Format: int64 */
      downloads: number;
      pinned: boolean;
      comment?: string | null;
      /** Format: int64 */
      diskSize: number;
      author?: components["schemas"]["CPrincipal"];
      authors?: (components["schemas"]["CPrincipal"])[] | null;
      origin?: components["schemas"]["PackageOrigin"];
      metadata?: ({
        [key: string]: string | undefined;
      }) | null;
      dependencies: (components["schemas"]["CratesPackageDependency"])[];
      description?: string | null;
      documentation?: string | null;
      homepage?: string | null;
      readme?: string | null;
      keywords: (string)[];
      categories: (string)[];
      license?: string | null;
      licenseFileContent?: string | null;
      gitRepository?: string | null;
      links?: string | null;
    };
    CreateExternalIssueProjectResult: {
      issuePrefix: string;
      success: boolean;
      error?: components["schemas"]["CreateExternalIssueProjectError"];
    };
    CreateExternalIssueRequestPayload: {
      requestId?: string | null;
      spaceUserId: string;
      summary?: string | null;
      description?: string | null;
      issuePrefix?: string | null;
      clientId: string;
      verificationToken?: string | null;
    };
    Currency: {
      code: string;
      sign?: string | null;
      signAsPrefix: boolean;
      hasCents: boolean;
    };
    CustomActionPayload: {
      actionId: string;
      clientId: string;
      userId: string;
      actionValue?: string | null;
      verificationToken?: string | null;
    };
    CustomBoardIssueInputField: {
      key: components["schemas"]["ExtendedTypeKey"];
      fieldId: string;
    };
    CustomEmojiAddedEvent: {
      emoji: string;
      owner: components["schemas"]["CPrincipal"];
      attachmentId: string;
      /** Format: date-time */
      uploadedAt: string;
    };
    CustomEmojiDeletedEvent: {
      emoji: string;
      owner: components["schemas"]["CPrincipal"];
    };
    CustomEmojiInfo: {
      name: string;
      provider: components["schemas"]["CPrincipal"];
      /** Format: date-time */
      uploaded: string;
      attachmentId?: string | null;
      deleted?: boolean | null;
    };
    CustomEmojiUpdatedEvent: {
      emoji: string;
      owner: components["schemas"]["CPrincipal"];
      attachmentId?: {
        old: string;
        new: string;
      } | null;
      uploadedAt?: {
        /** Format: date-time */
        old: string;
        /** Format: date-time */
        new: string;
      } | null;
    };
    CustomField: {
      extendedType: components["schemas"]["ExtendedType"];
      id: string;
      name: string;
      description?: string | null;
      key?: string | null;
      type: components["schemas"]["CFType"];
      constraint?: components["schemas"]["CFConstraint"];
      required: boolean;
      private: boolean;
      access?: components["schemas"]["AccessType"];
      defaultValue: components["schemas"]["CFValue"];
      /** Format: int32 */
      order: number;
      scope?: components["schemas"]["ExtendedTypeScope"];
      deleted?: boolean | null;
      parameters?: components["schemas"]["CFParameters"];
      archived: boolean;
    };
    CustomFieldData: {
      id: string;
      name: string;
      type: components["schemas"]["CustomFieldType"];
      multivalued: boolean;
      parameters?: components["schemas"]["CFParameters"];
      required: boolean;
      defaultValue: components["schemas"]["CFValue"];
      constraint?: components["schemas"]["CFConstraint"];
      description?: string | null;
      /** Format: int32 */
      order: number;
      archived: boolean;
    };
    CustomFieldInputValue: {
      fieldId: string;
      value: components["schemas"]["CFInputValue"];
    };
    CustomFieldValue: {
      field: components["schemas"]["CustomField"];
      value: components["schemas"]["CFValue"];
    };
    CustomFieldValueData: {
      customField: components["schemas"]["CustomFieldData"];
      value: components["schemas"]["CFValue"];
    };
    CustomFieldValueUpdate: {
      field: components["schemas"]["CFIdentifier"];
      newValue: components["schemas"]["CFInputValue"];
    };
    CustomFieldsRecord: {
      id: string;
      values: (components["schemas"]["CustomFieldValue"])[];
    };
    CustomGenericSubscriptionIn: {
      subjectCode: string;
      filters: (components["schemas"]["SubscriptionFilterIn"])[];
      eventTypeCodes: (string)[];
    };
    CustomHttpHeaderDTO: {
      name: string;
      value: string;
      description?: string | null;
    };
    DTO_FullRightWithoutType: {
      code: string;
      title: string;
      description?: string | null;
      grantedForUsers: boolean;
      featureFlag?: components["schemas"]["FeatureFlagInfo"];
    };
    DTO_Meeting: {
      id: string;
      archived: boolean;
      summary: string;
      description?: string | null;
      locations: (components["schemas"]["TD_Location"])[];
      profiles: (components["schemas"]["TD_MemberProfile"])[];
      teams: (components["schemas"]["TD_Team"])[];
      occurrenceRule: components["schemas"]["CalendarEventSpec"];
      origin: components["schemas"]["MeetingOrigin"];
      conferenceLink?: string | null;
      visibility: components["schemas"]["MeetingVisibility"];
      modificationPreference: components["schemas"]["MeetingModificationPreference"];
      joiningPreference?: components["schemas"]["MeetingJoiningPreference"];
      organizer?: components["schemas"]["MeetingOrganizer"];
      /** Format: int64 */
      etag: number;
      privateDataSubstituted: boolean;
      canModify: boolean;
      canDelete: boolean;
      canJoin: boolean;
      externalParticipants: (string)[];
      linkToExternalSource?: string | null;
      eventAttachments?: (components["schemas"]["MeetingAttachment"])[] | null;
      conferenceData?: components["schemas"]["EventConferenceData"];
      channelRef?: components["schemas"]["M2ChannelRecord"];
      externalSource?: components["schemas"]["EventExternalSource"];
      calendar?: components["schemas"]["CalendarInfo"];
      canLeaveOrRsvp?: boolean | null;
    };
    DTO_MeetingRSVP: {
      id: string;
      archived: boolean;
      member: components["schemas"]["TD_MemberProfile"];
      meeting: components["schemas"]["DTO_Meeting"];
      status: components["schemas"]["EventParticipationStatus"];
    };
    DTO_Right: {
      typeCode: string;
      code: string;
    };
    DTO_RightType: {
      typeCode: string;
      title: string;
    };
    DTO_RightType_Right: {
      rightType: components["schemas"]["DTO_RightType"];
      rights: (components["schemas"]["DTO_FullRightWithoutType"])[];
    };
    DTO_RightsDeps: {
      code: string;
      deps: (string)[];
    };
    DTO_RightsGroup: {
      title: string;
      /** Format: int32 */
      priority: number;
      rights: (components["schemas"]["DTO_Right"])[];
    };
    DTO_RightsWithHierarchy: {
      rights: (components["schemas"]["DTO_RightType_Right"])[];
      rightsGroups: (components["schemas"]["DTO_RightsGroup"])[];
      deps: (components["schemas"]["DTO_RightsDeps"])[];
    };
    DartPackageDependency: {
      name: string;
      version: string;
    };
    DartPackageType: {
      id: string;
    };
    DartPackageVersionDetails: {
      repository: string;
      name: string;
      version: string;
      tags?: (string)[] | null;
      /** Format: int64 */
      created: number;
      /** Format: int64 */
      accessed?: number | null;
      /** Format: int64 */
      downloads: number;
      pinned: boolean;
      comment?: string | null;
      /** Format: int64 */
      diskSize: number;
      author?: components["schemas"]["CPrincipal"];
      authors?: (components["schemas"]["CPrincipal"])[] | null;
      origin?: components["schemas"]["PackageOrigin"];
      metadata?: ({
        [key: string]: string | undefined;
      }) | null;
      description: string;
      homePage: string;
      repositoryUrl: string;
      issueTracker: string;
      documentation: string;
      license: string;
      readme: string;
      changelog: string;
      dependencies?: (components["schemas"]["DartPackageDependency"])[] | null;
      devDependencies?: (components["schemas"]["DartPackageDependency"])[] | null;
      dependencyOverrides?: (components["schemas"]["DartPackageDependency"])[] | null;
      environment?: (components["schemas"]["DartPackageDependency"])[] | null;
    };
    DashboardItemData: {
      name: string;
      isEnabled: boolean;
    };
    DashboardPreferencesRecord: {
      id: string;
      archived: boolean;
      data?: ((components["schemas"]["DashboardItemData"])[])[] | null;
      type?: components["schemas"]["DashboardContainerType"];
    };
    DataProducerOptions: {
      sfuOptions: components["schemas"]["SFUDataProducerOptions"];
      closed: boolean;
      /** Format: int64 */
      userConnectionId?: number | null;
      routerId: string;
    };
    DateCFConstraint: {
      /** Format: full-date */
      min?: string | null;
      /** Format: full-date */
      max?: string | null;
      message?: string | null;
    };
    DateCFFilter: {
      minValue?: components["schemas"]["DateCFValue"];
      maxValue?: components["schemas"]["DateCFValue"];
    };
    DateCFType: Record<string, never>;
    DateCFValue: {
      /** Format: full-date */
      value?: string | null;
    };
    DateFilterValue: {
      /** Format: full-date */
      value?: string | null;
    };
    DateRangeFilter: {
      value: components["schemas"]["DateRangeIn"];
    };
    DateRangeIn: {
      className: string;
    } & (components["schemas"]["DateRangeIn.Range"] | components["schemas"]["DateRangeIn.SpecialValue"]);
    "DateRangeIn.Range": {
      minValue?: components["schemas"]["RangeFilterValue"];
      maxValue?: components["schemas"]["RangeFilterValue"];
    };
    "DateRangeIn.SpecialValue": {
      value: components["schemas"]["SpecialDateValue"];
    };
    DateTimeCFConstraint: {
      /** Format: date-time */
      min?: string | null;
      /** Format: date-time */
      max?: string | null;
      message?: string | null;
    };
    DateTimeCFFilter: {
      minValue?: components["schemas"]["DateTimeCFValue"];
      maxValue?: components["schemas"]["DateTimeCFValue"];
    };
    DateTimeCFType: Record<string, never>;
    DateTimeCFValue: {
      /** Format: date-time */
      value?: string | null;
    };
    DateTimeFilterValue: {
      /** Format: date-time */
      value?: string | null;
    };
    DateTimeViewParams: {
      format?: components["schemas"]["UnfurlDateTimeFormat"];
      style?: components["schemas"]["UnfurlDateTimeStyle"];
      template?: string | null;
    };
    DeclarationScope: {
      /** Format: int32 */
      prefix: number;
      /** Format: int32 */
      startLine: number;
      /** Format: int32 */
      linesCount: number;
      declaredIdentifier?: string | null;
      referencedIdentifiers?: (components["schemas"]["DeclarationScope.ReferencedIdentifier"])[] | null;
    };
    "DeclarationScope.ReferencedIdentifier": {
      name: string;
      lineNumbers: (number)[];
    };
    DeleteAllAutomationLegacyChannelsAction: Record<string, never>;
    DeleteAutomationLegacyChannelAction: {
      jobId: string;
      projectId: components["schemas"]["ProjectIdentifier"];
    };
    DeleteMessage: {
      id: string;
    };
    DeletePersonalFeedAction: {
      feed: string;
      feedId?: string | null;
    };
    DeletedAttachment: {
      deletedIdentity: string;
    };
    DeployTargetAuditLogEntry: {
      /** Format: date-time */
      created: string;
      author: components["schemas"]["CPrincipal"];
      text: string;
      changes: (components["schemas"]["DeployTargetFieldMod"])[];
      channelItem: components["schemas"]["ChannelItemRecord"];
    };
    DeployTargetChangedMCExtension: Record<string, never>;
    DeployTargetFieldMod: {
      fieldName: string;
      old?: string | null;
      new?: string | null;
      added?: (string)[] | null;
      removed?: (string)[] | null;
    };
    DeployTargetLink: {
      label?: string | null;
      url: string;
      main?: boolean | null;
    };
    DeployTargetRecord: {
      id: string;
      projectId: string;
      name: string;
      key: string;
      description: string;
      createdAt: string;
      lastUpdated?: string | null;
      lastDeployed?: string | null;
      channel: components["schemas"]["M2ChannelRecord"];
      /** Format: int32 */
      number?: number | null;
      fullNumberId?: string | null;
      archived: boolean;
      users: (components["schemas"]["TD_MemberProfile"])[];
      teams: (components["schemas"]["TD_Team"])[];
      links: (components["schemas"]["DeployTargetLink"])[];
      createdBy?: components["schemas"]["CPrincipal"];
      channelId: string;
      repositories: (components["schemas"]["DeployTargetRepositoryDTO"])[];
      manualControl: boolean;
      singleScheduled?: boolean | null;
      /** Format: int32 */
      hangTimeoutMinutes?: number | null;
      /** Format: int32 */
      failTimeoutMinutes?: number | null;
      connectedChannelId?: string | null;
      current?: components["schemas"]["DeploymentInfo"];
      next?: components["schemas"]["DeploymentInfo"];
      customFields: {
        [key: string]: components["schemas"]["CFValue"] | undefined;
      };
    };
    DeployTargetRepositoryDTO: {
      repositoryName: string;
      missing: boolean;
      repositoryId?: string | null;
    };
    DeployTargetsSearchExpression: {
      filters: (components["schemas"]["DeployTargetsSearchFilter"])[];
    };
    DeployTargetsSearchFilter: {
      className: string;
    } & (components["schemas"]["DeployTargetsSearchFilter.Archived"] | components["schemas"]["DeployTargetsSearchFilter.ByCustomField"] | components["schemas"]["DeployTargetsSearchFilter.ByDescription"] | components["schemas"]["DeployTargetsSearchFilter.ByLinks"] | components["schemas"]["DeployTargetsSearchFilter.ByMainLink"] | components["schemas"]["DeployTargetsSearchFilter.ByMaintainers"] | components["schemas"]["DeployTargetsSearchFilter.ByMatchingText"] | components["schemas"]["DeployTargetsSearchFilter.ByName"] | components["schemas"]["DeployTargetsSearchFilter.ByProjects"]);
    "DeployTargetsSearchFilter.Archived": {
      exclusive: boolean;
    };
    "DeployTargetsSearchFilter.ByCustomField": {
      cfId: string;
      cff: components["schemas"]["CFFilter"];
      negated: boolean;
    };
    "DeployTargetsSearchFilter.ByDescription": {
      searchText: string;
    };
    "DeployTargetsSearchFilter.ByLinks": {
      searchText: string;
    };
    "DeployTargetsSearchFilter.ByMainLink": {
      searchText: string;
    };
    "DeployTargetsSearchFilter.ByMaintainers": {
      maintainers: (components["schemas"]["DeployTargetsSearchFilter.Maintainer"])[];
      negated: boolean;
    };
    "DeployTargetsSearchFilter.ByMatchingText": {
      searchText: string;
    };
    "DeployTargetsSearchFilter.ByName": {
      searchText: string;
    };
    "DeployTargetsSearchFilter.ByProjects": {
      projects: (string)[];
      negated: boolean;
    };
    "DeployTargetsSearchFilter.Maintainer": {
      className: string;
    } & (components["schemas"]["DeployTargetsSearchFilter.Maintainer.NoMaintainers"] | components["schemas"]["DeployTargetsSearchFilter.Maintainer.Team"] | components["schemas"]["DeployTargetsSearchFilter.Maintainer.User"]);
    "DeployTargetsSearchFilter.Maintainer.NoMaintainers": Record<string, never>;
    "DeployTargetsSearchFilter.Maintainer.Team": {
      id: string;
    };
    "DeployTargetsSearchFilter.Maintainer.User": {
      id: string;
    };
    DeploymentCFFilter: {
      values: (components["schemas"]["DeploymentCFInputValue"])[];
    };
    DeploymentCFInputValue: {
      deployment?: components["schemas"]["DeploymentIdentifier"];
    };
    DeploymentCFType: Record<string, never>;
    DeploymentCFValue: {
      deployment?: components["schemas"]["DeploymentRecord"];
    };
    DeploymentCommitRef: {
      repositoryName: string;
      branch: string;
      commit: string;
      /** Format: int64 */
      timestamp?: number | null;
      head: boolean;
      missing: boolean;
    };
    DeploymentCommitRefDetails: {
      repositoryName: string;
      branch: string;
      commit: string;
      /** Format: int64 */
      timestamp?: number | null;
      head: boolean;
      /** Format: int32 */
      commitsAdded?: number | null;
      /** Format: int32 */
      mergesAdded?: number | null;
      /** Format: int32 */
      issuesAdded?: number | null;
      /** Format: int32 */
      commitsReverted?: number | null;
      /** Format: int32 */
      mergesReverted?: number | null;
      /** Format: int32 */
      issuesReverted?: number | null;
      rollback: boolean;
      missing: boolean;
      initial?: boolean | null;
    };
    DeploymentCommitReference: {
      repositoryName: string;
      branch: string;
      commit?: string | null;
    };
    DeploymentData: {
      id: string;
      version: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      scheduledStart?: string | null;
      /** Format: date-time */
      startedAt?: string | null;
      /** Format: date-time */
      finishedAt?: string | null;
      targetKey: string;
      status: components["schemas"]["DeploymentStatus"];
      syncStatus: components["schemas"]["DeploymentSyncStatus"];
      externalLink?: components["schemas"]["ExternalLink"];
      commitRefs: (components["schemas"]["DeploymentCommitRefDetails"])[];
    };
    DeploymentInfo: {
      className: string;
    } & (components["schemas"]["DeploymentData"] | components["schemas"]["DeploymentRecord"]);
    DeploymentM2ChannelInfo: {
      notificationDefaults: components["schemas"]["ChannelSpecificDefaults"];
      deployment: components["schemas"]["DeploymentRecord"];
      project?: components["schemas"]["PR_Project"];
      target?: components["schemas"]["DeployTargetRecord"];
    };
    DeploymentM2DetailsNoThread: Record<string, never>;
    DeploymentM2DetailsWithThread: {
      deployment: components["schemas"]["DeploymentRecord"];
    };
    DeploymentRecord: {
      id: string;
      version: string;
      /** Format: date-time */
      scheduledStart?: string | null;
      /** Format: date-time */
      startedAt?: string | null;
      /** Format: date-time */
      finishedAt?: string | null;
      /** Format: date-time */
      createdAt: string;
      status: components["schemas"]["DeploymentStatus"];
      description?: string | null;
      channel: components["schemas"]["M2ChannelRecord"];
      target: components["schemas"]["DeployTargetRecord"];
      targetKey: string;
      syncStatus: components["schemas"]["DeploymentSyncStatus"];
      commitRefs: (components["schemas"]["DeploymentCommitRefDetails"])[];
      jobIds?: (string)[] | null;
      externalLink?: components["schemas"]["ExternalLink"];
      archived: boolean;
      /** Format: int32 */
      commitsAdded?: number | null;
      /** Format: int32 */
      mergesAdded?: number | null;
      /** Format: int32 */
      issuesAdded?: number | null;
      /** Format: int32 */
      commitsReverted?: number | null;
      /** Format: int32 */
      mergesReverted?: number | null;
      /** Format: int32 */
      issuesReverted?: number | null;
    };
    DeploymentTargetM2ChannelInfo: {
      notificationDefaults: components["schemas"]["ChannelSpecificDefaults"];
      deployTarget: components["schemas"]["DeployTargetRecord"];
      project: components["schemas"]["PR_Project"];
    };
    DeploymentWebhookEvent: {
      meta: components["schemas"]["KMetaMod"];
      projectKey: string;
      targetId: string;
      targetKey?: string | null;
      deploymentId: string;
      statusMod?: {
        old: components["schemas"]["DeploymentStatus"];
        new: components["schemas"]["DeploymentStatus"];
      } | null;
      version?: string | null;
      commitRefs?: (components["schemas"]["DeploymentCommitRef"])[] | null;
    };
    DeploymentsSubscriptionFilter: {
      project?: components["schemas"]["PR_Project"];
      repositories?: (string)[] | null;
      targetIdentifiers?: (string)[] | null;
    };
    DeploymentsSubscriptionFilterIn: {
      project: string;
      repositories?: (string)[] | null;
      targetIdentifiers?: (string)[] | null;
    };
    DevConfigurationAccessSettingsDTO: {
      view: components["schemas"]["DevConfigurationAccessTypeDTO"];
    };
    DevConfigurationAccessTypeDTO: {
      className: string;
    } & (components["schemas"]["DevConfigurationAccessTypeDTO_Private"] | components["schemas"]["DevConfigurationAccessTypeDTO_Project"]);
    DevConfigurationAccessTypeDTO_Private: {
      participants: (components["schemas"]["DevConfigurationParticipantDTO"])[];
    };
    DevConfigurationAccessTypeDTO_Project: Record<string, never>;
    DevConfigurationHibernation: {
      /** Format: duration */
      hibernateAfter: string;
    };
    DevConfigurationHook: {
      trigger: components["schemas"]["DevConfigurationHookTrigger"];
      script: string;
    };
    DevConfigurationHooks: {
      hooks: (components["schemas"]["DevConfigurationHook"])[];
    };
    DevConfigurationHotPool: {
      enabled: boolean;
      hibernateInstances: boolean;
      /** Format: int32 */
      size: number;
      cronSchedule: string;
      timezone: string;
    };
    DevConfigurationInstanceType: {
      instanceTypeId: string;
    };
    DevConfigurationParticipantDTO: {
      className: string;
    } & (components["schemas"]["DevConfigurationParticipantDTO_Team"] | components["schemas"]["DevConfigurationParticipantDTO_User"]);
    DevConfigurationParticipantDTO_Team: {
      ref: components["schemas"]["TD_Team"];
    };
    DevConfigurationParticipantDTO_User: {
      ref: components["schemas"]["TD_MemberProfile"];
    };
    DevConfigurationWarmup: {
      indexing: boolean;
      script?: string | null;
      triggers: (components["schemas"]["DevConfigurationWarmupTriggers"])[];
      /** Format: int64 */
      timeoutMs: number;
    };
    DevConfigurationWarmupTriggers: {
      className: string;
    } & components["schemas"]["DevConfigurationWarmupTriggers.Cron"];
    "DevConfigurationWarmupTriggers.Cron": {
      expression: string;
    };
    Diff: {
      added: (string)[];
      removed: (string)[];
      removeAll: boolean;
    };
    DiffContext: {
      left?: components["schemas"]["DiffSide"];
      right: components["schemas"]["DiffSide"];
    };
    DiffSide: {
      className: string;
    } & (components["schemas"]["DiffSide.Empty"] | components["schemas"]["DiffSide.NonEmpty"]);
    "DiffSide.Empty": {
      revision: string;
    };
    "DiffSide.NonEmpty": {
      revision: string;
      path: string;
    };
    DiscussionCounter: {
      /** Format: int32 */
      resolved: number;
      /** Format: int32 */
      unresolved: number;
      /** Format: int32 */
      unresolvedSuggestedEdits: number;
      /** Format: int32 */
      acceptedSuggestedEdits: number;
      /** Format: int32 */
      rejectedSuggestedEdits: number;
    };
    Document: {
      id: string;
      title: string;
      alias: string;
      publicationDetails?: components["schemas"]["PublicationDetails"];
      folderRef?: components["schemas"]["DocumentFolder"];
      bodyType?: components["schemas"]["DocumentBodyType"];
      bodyInfo?: components["schemas"]["DocumentBodyInfo"];
      archived: boolean;
      archivedBy?: components["schemas"]["CPrincipal"];
      /** Format: date-time */
      archivedAt?: string | null;
      createdBy?: components["schemas"]["CPrincipal"];
      /** Format: date-time */
      created?: string | null;
      modifiedBy?: components["schemas"]["CPrincipal"];
      /** Format: date-time */
      modified: string;
      documentBody: components["schemas"]["DocumentBodyInfo"];
      body?: components["schemas"]["DocumentHttpBody"];
    };
    DocumentAccess: {
      permissions?: (components["schemas"]["DocumentAccessRecipient"])[] | null;
      inherited?: (components["schemas"]["DocumentAccessRecipient"])[] | null;
    };
    DocumentAccessRecipient: {
      access?: components["schemas"]["DocumentSharingAccessType"];
      recipient?: components["schemas"]["PermissionsRecipient"];
      isContainerAccessible: boolean;
    };
    DocumentAccessRecipientIdentifier: {
      access?: components["schemas"]["DocumentSharingAccessType"];
      recipient?: components["schemas"]["PermissionsRecipientIdentifier"];
    };
    DocumentAppUnfurlContext: {
      documentId: string;
    };
    DocumentBodyCreateIn: {
      className: string;
    } & (components["schemas"]["TextDocumentBodyCreateTypedIn"] | components["schemas"]["FileDocumentBodyCreateIn"] | components["schemas"]["ChecklistDocumentBodyCreateIn"]);
    DocumentBodyInfo: {
      className: string;
    } & (components["schemas"]["TextDocument"] | components["schemas"]["TextDocumentBodyInfo"] | components["schemas"]["ChecklistDocumentBody"] | components["schemas"]["InaccessibleDocumentBody"] | components["schemas"]["FileDocumentBody"] | components["schemas"]["FileDocumentBodyInfo"]);
    DocumentBodyUpdateIn: {
      className: string;
    } & (components["schemas"]["ChecklistDocumentBodyEditIn"] | components["schemas"]["TextDocumentBodyConvertTypeIn"] | components["schemas"]["TextDocumentBodyUpdateIn"] | components["schemas"]["FileDocumentBodyUpdateIn"]);
    DocumentCFFilter: {
      values: (components["schemas"]["DocumentCFInputValue"])[];
    };
    DocumentCFInputValue: {
      documentId?: string | null;
    };
    DocumentCFParameters: {
      documentScope: components["schemas"]["DocumentCFScope"];
    };
    DocumentCFParametersInput: {
      documentScope: components["schemas"]["DocumentCFScopeInput"];
    };
    DocumentCFScope: {
      className: string;
    } & components["schemas"]["DocumentCFScope.Project"];
    "DocumentCFScope.Project": {
      project: components["schemas"]["PR_Project"];
    };
    DocumentCFScopeInput: {
      className: string;
    } & components["schemas"]["DocumentCFScopeInput.Project"];
    "DocumentCFScopeInput.Project": {
      projectId: string;
    };
    DocumentCFType: Record<string, never>;
    DocumentCFValue: {
      document?: components["schemas"]["Document"];
    };
    DocumentContainerInfo: {
      className: string;
    } & (components["schemas"]["PersonalDocumentContainerInfo"] | components["schemas"]["InaccessibleContainerInfo"] | components["schemas"]["BookContainerInfo"]);
    DocumentCustomSubscriptionFilter: {
      project?: components["schemas"]["PR_Project"];
      folders?: (components["schemas"]["DocumentFolder"])[] | null;
      documents: (components["schemas"]["Document"])[];
    };
    DocumentCustomSubscriptionFilterIn: {
      project?: string | null;
      folders?: (string)[] | null;
      documents: (string)[];
    };
    DocumentEditableByMe: Record<string, never>;
    DocumentEditorsChangedEvent: {
      meta: components["schemas"]["KMetaMod"];
      document: string;
    };
    DocumentFolder: {
      id: string;
      archived: boolean;
      parent?: components["schemas"]["DocumentFolder"];
      name: string;
      isRestricted?: boolean | null;
      /** Format: date-time */
      created: string;
      createdBy?: components["schemas"]["CPrincipal"];
      /** Format: date-time */
      updated: string;
      updatedBy?: components["schemas"]["CPrincipal"];
      cover?: components["schemas"]["Document"];
    };
    DocumentFolderCustomSubscriptionFilter: {
      project?: components["schemas"]["PR_Project"];
      folders?: (components["schemas"]["DocumentFolder"])[] | null;
    };
    DocumentFolderCustomSubscriptionFilterIn: {
      project?: string | null;
      folders?: (string)[] | null;
    };
    DocumentFolderEditableByMe: Record<string, never>;
    DocumentFolderItem: {
      className: string;
    } & (components["schemas"]["DocumentFolderItem.DocumentItem"] | components["schemas"]["DocumentFolderItem.FolderItem"]);
    "DocumentFolderItem.DocumentItem": {
      document: components["schemas"]["Document"];
      highlights?: components["schemas"]["DocumentsSearchHighlights"];
    };
    "DocumentFolderItem.FolderItem": {
      folder: components["schemas"]["DocumentFolder"];
      highlights?: components["schemas"]["DocumentsSearchHighlights"];
    };
    DocumentFolderMenuActionContext: {
      folderIdentifier: components["schemas"]["FolderIdentifier"];
      projectIdentifier?: components["schemas"]["ProjectIdentifier"];
    };
    DocumentFolderMenuItemUiExtensionApi: {
      displayName: string;
      description?: string | null;
      menuItemUniqueCode: string;
      visibilityFilters: (components["schemas"]["DocumentFolderMenuItemVisibilityFilterApi"])[];
    };
    DocumentFolderMenuItemUiExtensionIn: {
      displayName: string;
      description?: string | null;
      menuItemUniqueCode: string;
      visibilityFilters: (components["schemas"]["DocumentFolderMenuItemVisibilityFilterIn"])[];
    };
    DocumentFolderMenuItemVisibilityFilterApi: {
      className: string;
    } & components["schemas"]["DocumentFolderEditableByMe"];
    DocumentFolderMenuItemVisibilityFilterIn: {
      className: string;
    } & components["schemas"]["DocumentFolderEditableByMe"];
    DocumentFolderMetaWebhookEvent: {
      meta: components["schemas"]["KMetaMod"];
      folder: string;
      archived?: {
        old: boolean;
        new: boolean;
      } | null;
    };
    DocumentFolderOwnAccessChangedEvent: {
      meta: components["schemas"]["KMetaMod"];
      folder: string;
    };
    DocumentFolderWithChildren: {
      id: string;
      archived: boolean;
      containerLinkId: string;
      containerInfo: components["schemas"]["DocumentContainerInfo"];
      subfolders: (components["schemas"]["DocumentFolderWithChildren"])[];
      documents: (components["schemas"]["Document"])[];
    };
    DocumentHistoryUnfurlDetails: {
      document: string;
      title: string;
      /** Format: date-time */
      version2?: string | null;
      /** Format: date-time */
      base2?: string | null;
      /** Format: date-time */
      preview2?: string | null;
    };
    DocumentHttpBody: {
      className: string;
    } & (components["schemas"]["FileDocumentHttpBody"] | components["schemas"]["TextDocumentHttpBody"] | components["schemas"]["ChecklistDocumentHttpBody"]);
    DocumentListCFInputValue: {
      documents: (string)[];
    };
    DocumentListCFType: Record<string, never>;
    DocumentListCFValue: {
      documents: (components["schemas"]["Document"])[];
    };
    DocumentMenuActionContext: {
      documentId: string;
      projectIdentifier?: components["schemas"]["ProjectIdentifier"];
    };
    DocumentMenuItemUiExtensionApi: {
      displayName: string;
      description?: string | null;
      menuItemUniqueCode: string;
      visibilityFilters: (components["schemas"]["DocumentMenuItemVisibilityFilterApi"])[];
    };
    DocumentMenuItemUiExtensionIn: {
      displayName: string;
      description?: string | null;
      menuItemUniqueCode: string;
      visibilityFilters: (components["schemas"]["DocumentMenuItemVisibilityFilterIn"])[];
    };
    DocumentMenuItemVisibilityFilterApi: {
      className: string;
    } & components["schemas"]["DocumentEditableByMe"];
    DocumentMenuItemVisibilityFilterIn: {
      className: string;
    } & components["schemas"]["DocumentEditableByMe"];
    DocumentMetaWebhookEvent: {
      meta: components["schemas"]["KMetaMod"];
      document: string;
      deleted?: {
        old: boolean;
        new: boolean;
      } | null;
      published?: {
        old: boolean;
        new: boolean;
      } | null;
    };
    DocumentWebhookEvent: {
      meta: components["schemas"]["KMetaMod"];
      document: string;
      documentRef?: components["schemas"]["Document"];
      changeAuthors: (components["schemas"]["CPrincipal"])[];
      /** Format: date-time */
      version: string;
      /** Format: date-time */
      base: string;
    };
    DocumentsSearchHighlights: {
      name?: string | null;
      body?: string | null;
    };
    DryCleanupResults: {
      className: string;
    } & (components["schemas"]["DryCleanupResults.Failure"] | components["schemas"]["DryCleanupResults.Results"]);
    "DryCleanupResults.Failure": {
      error: string;
    };
    "DryCleanupResults.Results": {
      /** Format: int64 */
      totalSize: number;
      /** Format: int32 */
      totalCount: number;
      packageVersions: (components["schemas"]["PackageVersionRef"])[];
    };
    DryRunResult: {
      teams: (components["schemas"]["TD_Team"])[];
      projects: (components["schemas"]["PR_Project"])[];
      locations: (components["schemas"]["TD_Location"])[];
      records: (string)[];
    };
    DslEvaluationConfig: {
      experimentalOptIns: (string)[];
      runtimeInfo: components["schemas"]["DslRuntimeInfo"];
    };
    DslRuntimeInfo: {
      mavenRepoUrl: string;
      mavenCoordinates: components["schemas"]["MavenCoordinates"];
    };
    ES_App: {
      id: string;
      owner?: components["schemas"]["TD_MemberProfile"];
      ownerApp?: components["schemas"]["ES_App"];
      clientId: string;
      name: string;
      email?: string | null;
      picture?: string | null;
      defaultExternalPicture?: string | null;
      /** Format: date-time */
      createdAt?: string | null;
      kind?: string | null;
      presentableName?: string | null;
      applicationType?: components["schemas"]["ApplicationType"];
      clientCredentialsFlowEnabled?: boolean | null;
      codeFlowEnabled?: boolean | null;
      codeFlowRedirectURIs?: string | null;
      pkceRequired?: boolean | null;
      implicitFlowEnabled?: boolean | null;
      implicitFlowRedirectURIs?: string | null;
      endpointURI?: string | null;
      hasVerificationToken?: boolean | null;
      hasSigningKey?: boolean | null;
      hasPublicKeySignature?: boolean | null;
      endpointSslVerification?: boolean | null;
      basicAuthUsername?: string | null;
      hasBearerToken?: boolean | null;
      sslKeystoreAuth?: string | null;
      archived: boolean;
      domains: (components["schemas"]["ApplicationUnfurlDomain"])[];
      description?: string | null;
      metadata?: components["schemas"]["ApplicationMetadata"];
      settings: components["schemas"]["ES_AppSettings"];
      errorMessage?: string | null;
      patterns: (components["schemas"]["ApplicationUnfurlPattern"])[];
      contexts: (components["schemas"]["AppUiExtContextData"])[];
    };
    ES_AppSettings: {
      clientCredentialsFlowEnabled?: boolean | null;
      codeFlowEnabled?: boolean | null;
      codeFlowRedirectURIs?: string | null;
      pkceRequired?: boolean | null;
      publicClientsAllowed?: boolean | null;
      implicitFlowEnabled?: boolean | null;
      implicitFlowRedirectURIs?: string | null;
      endpoint?: components["schemas"]["EndpointDTO"];
      endpointAuth?: components["schemas"]["EndpointAuthDTO"];
      externalIssueTrackerDomain?: string | null;
    };
    ES_ApplicationPassword: {
      id: string;
      profile: components["schemas"]["TD_MemberProfile"];
      name: string;
      scope: components["schemas"]["XScopeApi"];
      /** Format: date-time */
      created: string;
      lastAccess?: components["schemas"]["AccessRecord"];
    };
    ES_ApplicationPermanentToken: {
      id: string;
      name: string;
      application: components["schemas"]["ES_App"];
      scope: string;
      apiScope: components["schemas"]["XScopeApi"];
      /** Format: date-time */
      created: string;
      /** Format: date-time */
      expires?: string | null;
      lastAccess?: components["schemas"]["AccessRecord"];
    };
    ES_ApprovedScope: {
      id: string;
      scope: components["schemas"]["XScopeApi"];
      offlineAllowed: boolean;
    };
    ES_AuthModule: {
      id: string;
      key: string;
      name: string;
      /** Format: int32 */
      ordinal: number;
      enabled: boolean;
      iconDataURI?: string | null;
      settings: components["schemas"]["ES_AuthModuleSettings"];
    };
    ES_AuthModuleSettings: {
      className: string;
    } & (components["schemas"]["ES_GoogleAuthModuleSettings"] | components["schemas"]["ES_OIDCAuthModuleSettings"] | components["schemas"]["ES_AzureAuthModuleSettings"] | components["schemas"]["ES_GithubAuthModuleSettings"] | components["schemas"]["ES_HubAuthModuleSettings"] | components["schemas"]["ES_SamlAuthModuleSettings"] | components["schemas"]["ES_HiddenAuthModuleSettings"] | components["schemas"]["ES_LdapAuthModuleSettings"] | components["schemas"]["ES_BuiltinAuthModuleSettings"]);
    ES_AuthenticationSession: {
      id: string;
      profile: components["schemas"]["TD_MemberProfile"];
      /** Format: date-time */
      created: string;
      /** Format: date-time */
      expires: string;
      lastAccess?: components["schemas"]["AccessRecord"];
      current: boolean;
    };
    ES_AzureAuthModuleSettings: {
      tenantId: string;
      clientId: string;
      clientSecret: string;
      registerNewUsers: boolean;
      emailVerified: boolean;
      registerNewUserRules?: (components["schemas"]["AzureRegisterNewUserRule"])[] | null;
    };
    ES_BuiltinAuthModuleSettings: {
      passwordStrengthPolicy: components["schemas"]["PasswordStrength"];
      domains?: (string)[] | null;
    };
    ES_BuiltinProfileLoginDetails: {
      passwordChangeRequest?: string | null;
    };
    ES_ComposerRepositorySettings: {
      retentionPolicyParams?: components["schemas"]["RetentionPolicyParams"];
      immutablePackageVersions?: boolean | null;
    };
    ES_ContainerRegistrySettings: {
      immutableTags: boolean;
      retentionPolicyParams?: components["schemas"]["RetentionPolicyParams"];
      immutablePackageVersions?: boolean | null;
    };
    ES_CratesRegistrySettings: {
      retentionPolicyParams?: components["schemas"]["RetentionPolicyParams"];
      immutablePackageVersions?: boolean | null;
    };
    ES_DartRepositorySettings: {
      retentionPolicyParams?: components["schemas"]["RetentionPolicyParams"];
      immutablePackageVersions?: boolean | null;
    };
    ES_DefaultProfileLoginDetails: {
      login?: string | null;
      firstName?: string | null;
      lastName?: string | null;
      email?: string | null;
      emailVerified: boolean;
      avatarUrl?: string | null;
    };
    ES_ExternalPasswordAuthModuleSettings: {
      className: string;
    } & components["schemas"]["ES_LdapAuthModuleSettings"];
    ES_FederatedAuthModuleSettings: {
      className: string;
    } & (components["schemas"]["ES_GoogleAuthModuleSettings"] | components["schemas"]["ES_OIDCAuthModuleSettings"] | components["schemas"]["ES_AzureAuthModuleSettings"] | components["schemas"]["ES_GithubAuthModuleSettings"] | components["schemas"]["ES_HubAuthModuleSettings"] | components["schemas"]["ES_SamlAuthModuleSettings"]);
    ES_FileRepositorySettings: {
      retentionPolicyParams?: components["schemas"]["RetentionPolicyParams"];
      immutablePackageVersions?: boolean | null;
    };
    ES_GithubAuthModuleSettings: {
      githubUrl: string;
      clientId: string;
      clientSecret: string;
      registerNewUsers: boolean;
      organizations: (string)[];
      registerNewUserRules?: (components["schemas"]["GithubRegisterNewUserRule"])[] | null;
    };
    ES_GithubProfileLoginDetails: {
      login?: string | null;
      firstName?: string | null;
      lastName?: string | null;
      email?: string | null;
      emailVerified: boolean;
      avatarUrl?: string | null;
      organizations?: (string)[] | null;
      allEmails?: ({
          first: string;
          second: boolean;
        })[] | null;
    };
    ES_GoogleAuthModuleSettings: {
      clientId: string;
      clientSecret: string;
      registerNewUsers: boolean;
      domains: (string)[];
      registerNewUserRules?: (components["schemas"]["GoogleRegisterNewUserRule"])[] | null;
    };
    ES_HiddenAuthModuleSettings: {
      passwordModule?: boolean | null;
      federatedModule?: boolean | null;
    };
    ES_HubAuthModuleSettings: {
      hubUrl: string;
      clientId: string;
      clientSecret: string;
      registerNewUsers?: boolean | null;
      orgAuthProviderName?: string | null;
      groups?: (string)[] | null;
      registerNewUserRules?: (components["schemas"]["HubRegisterNewUserRule"])[] | null;
    };
    ES_HubProfileLoginDetails: {
      login?: string | null;
      hubAuthModuleLogin?: string | null;
      firstName?: string | null;
      lastName?: string | null;
      email?: string | null;
      emailVerified: boolean;
      avatarUrl?: string | null;
    };
    ES_LdapAttributeNames: {
      fullNameAttributeName?: string | null;
      usernameAttributeName?: string | null;
      emailAttributeName?: string | null;
      groupsAttributeName?: string | null;
    };
    ES_LdapAuthModuleSettings: {
      type: components["schemas"]["LdapModuleType"];
      registerNewUsers: boolean;
      serverUrl: string;
      /** Format: int32 */
      connectionTimeout: number;
      /** Format: int32 */
      readTimeout: number;
      sslKeystore?: components["schemas"]["SSLKeystore"];
      teamMappings: (components["schemas"]["ES_TeamMapping"])[];
      referralIgnored: boolean;
      filter: string;
      bindUserDN: string;
      bindUserPassword: string;
      attributeNames: components["schemas"]["ES_LdapAttributeNames"];
      registerNewUserRules?: (components["schemas"]["LdapRegisterNewUserRule"])[] | null;
    };
    ES_MavenRepositorySettings: {
      enableSnapshots: boolean;
      retentionPolicyParams?: components["schemas"]["RetentionPolicyParams"];
      immutablePackageVersions?: boolean | null;
      checkVulnerabilities?: boolean | null;
    };
    ES_NpmRegistrySettings: {
      retentionPolicyParams?: components["schemas"]["RetentionPolicyParams"];
      immutablePackageVersions?: boolean | null;
      checkVulnerabilities?: boolean | null;
    };
    ES_NuGetFeedSettings: {
      retentionPolicyParams?: components["schemas"]["RetentionPolicyParams"];
      immutablePackageVersions?: boolean | null;
      checkVulnerabilities?: boolean | null;
    };
    ES_OAuth2AuthModuleSettings: {
      className: string;
    } & (components["schemas"]["ES_GoogleAuthModuleSettings"] | components["schemas"]["ES_OIDCAuthModuleSettings"] | components["schemas"]["ES_AzureAuthModuleSettings"] | components["schemas"]["ES_GithubAuthModuleSettings"] | components["schemas"]["ES_HubAuthModuleSettings"]);
    ES_OAuthApp: {
      className: string;
    } & (components["schemas"]["ES_OAuthInternalApp"] | components["schemas"]["ES_OAuthUserApp"]);
    ES_OAuthConsent: {
      clientApplication: components["schemas"]["ES_OAuthApp"];
      approvedScopes: (components["schemas"]["ES_ApprovedScope"])[];
      refreshTokens: (components["schemas"]["ES_RefreshToken"])[];
    };
    ES_OAuthInternalApp: {
      name: string;
      clientId: string;
    };
    ES_OAuthUserApp: {
      app: components["schemas"]["ES_App"];
    };
    ES_OIDCAuthModuleSettings: {
      clientId: string;
      clientSecret: string;
      registerNewUsers: boolean;
      discoveryUrl?: string | null;
      issuer: string;
      authorizationEndpoint: string;
      tokenEndpoint: string;
      tokenKeysEndpoint: string;
      userInfoEndpoint: string;
      domains: (string)[];
      registerNewUserRules?: (components["schemas"]["OidcRegisterNewUserRule"])[] | null;
    };
    ES_PackageRepositorySettings: {
      className: string;
    } & (components["schemas"]["ES_DartRepositorySettings"] | components["schemas"]["ES_ComposerRepositorySettings"] | components["schemas"]["ES_FileRepositorySettings"] | components["schemas"]["ES_CratesRegistrySettings"] | components["schemas"]["ES_NuGetFeedSettings"] | components["schemas"]["ES_NpmRegistrySettings"] | components["schemas"]["ES_ContainerRegistrySettings"] | components["schemas"]["ES_PythonPackageIndexSettings"] | components["schemas"]["ES_MavenRepositorySettings"]);
    ES_PasswordAuthModuleSettings: {
      className: string;
    } & (components["schemas"]["ES_LdapAuthModuleSettings"] | components["schemas"]["ES_BuiltinAuthModuleSettings"]);
    ES_PersonalToken: {
      id: string;
      name: string;
      profile: components["schemas"]["TD_MemberProfile"];
      scope: string;
      apiScope: components["schemas"]["XScopeApi"];
      /** Format: date-time */
      created: string;
      /** Format: date-time */
      expires?: string | null;
      lastAccess?: components["schemas"]["AccessRecord"];
    };
    ES_ProfileLogin: {
      identifier: string;
      authModule: components["schemas"]["ES_AuthModule"];
      details: components["schemas"]["ES_ProfileLoginDetails"];
      access?: components["schemas"]["AccessRecord"];
    };
    ES_ProfileLoginDetails: {
      className: string;
    } & (components["schemas"]["ES_BuiltinProfileLoginDetails"] | components["schemas"]["ES_HubProfileLoginDetails"] | components["schemas"]["ES_GithubProfileLoginDetails"] | components["schemas"]["ES_DefaultProfileLoginDetails"]);
    ES_PythonPackageIndexSettings: {
      retentionPolicyParams?: components["schemas"]["RetentionPolicyParams"];
      immutablePackageVersions?: boolean | null;
    };
    ES_RefreshToken: {
      id: string;
      scope: components["schemas"]["XScopeApi"];
      lastAccess?: components["schemas"]["AccessRecord"];
    };
    ES_SamlAttributeNames: {
      loginAttributeName?: string | null;
      firstNameAttributeName?: string | null;
      lastNameAttributeName?: string | null;
      fullNameAttributeName?: string | null;
      emailAttributeName?: string | null;
      emailVerified: boolean;
    };
    ES_SamlAuthModuleSettings: {
      idpUrl: string;
      idpEntityId: string;
      idpCertificateSHA256: string;
      spEntityId: string;
      sslKeystore?: components["schemas"]["SSLKeystore"];
      registerNewUsers: boolean;
      contactProfileId?: string | null;
      attributeNames: components["schemas"]["ES_SamlAttributeNames"];
      registerNewUserRules?: (components["schemas"]["SamlRegisterNewUserRule"])[] | null;
    };
    ES_TeamMapping: {
      teamId: string;
      externalGroupName: string;
    };
    EbsSnapshotApi: {
      snapshotId: string;
      snapshotName?: string | null;
      snapshotState: components["schemas"]["SnapshotState"];
      /** Format: int64 */
      execution?: number | null;
      /** Format: int64 */
      claimId?: number | null;
    };
    EbsVolumeApi: {
      volumeId: string;
      volumeName: string;
      az?: string | null;
      volumeState: components["schemas"]["VolumeState"];
      /** Format: int64 */
      execution?: number | null;
      /** Format: int64 */
      claimId?: number | null;
    };
    EditMessage: {
      text: string;
      id: string;
      attachments?: (components["schemas"]["Attachment"])[] | null;
      pending?: boolean | null;
    };
    EmailBouncedEvent: {
      email: string;
      reason: string;
    };
    EmojiReaction: {
      emoji: string;
      /** Format: int32 */
      count: number;
      meReacted: boolean;
    };
    EmojiReactionRecord: {
      id: string;
      itemId: string;
      emoji: string;
      /** Format: int32 */
      count: number;
      meReacted: boolean;
      /** Format: int64 */
      order: number;
    };
    EmojiSearchMatchData: {
      emoji: string;
      matched?: string | null;
      matchType: components["schemas"]["EmojiSearchMatchType"];
    };
    EndpointAuthCreate: {
      className: string;
    } & (components["schemas"]["EndpointAuthCreate.Basic"] | components["schemas"]["EndpointAuthCreate.Bearer"] | components["schemas"]["EndpointAuthCreate.PublicKeySignature"] | components["schemas"]["EndpointAuthCreate.SigningKey"]);
    "EndpointAuthCreate.Basic": {
      username: string;
      password: string;
    };
    "EndpointAuthCreate.Bearer": {
      token: string;
    };
    "EndpointAuthCreate.PublicKeySignature": Record<string, never>;
    "EndpointAuthCreate.SigningKey": Record<string, never>;
    EndpointAuthCreateDTO: {
      appLevelAuth: components["schemas"]["EndpointAuthCreate"];
      sslKeystore?: components["schemas"]["SSLKeystoreEndpointAuth"];
    };
    EndpointAuthDTO: {
      appLevelAuth: components["schemas"]["EndpointAuthRead"];
      sslKeystore?: components["schemas"]["SSLKeystoreEndpointAuth"];
      verificationToken: boolean;
    };
    EndpointAuthRead: {
      className: string;
    } & (components["schemas"]["EndpointAuthRead.Basic"] | components["schemas"]["EndpointAuthRead.Bearer"] | components["schemas"]["EndpointAuthRead.PublicKeySignature"] | components["schemas"]["EndpointAuthRead.SigningKey"] | components["schemas"]["EndpointAuthRead.Unknown"]);
    "EndpointAuthRead.Basic": {
      username: string;
    };
    "EndpointAuthRead.Bearer": Record<string, never>;
    "EndpointAuthRead.PublicKeySignature": Record<string, never>;
    "EndpointAuthRead.SigningKey": Record<string, never>;
    "EndpointAuthRead.Unknown": Record<string, never>;
    EndpointAuthUpdateDTO: {
      appLevelAuth?: components["schemas"]["EndpointAppLevelAuthUpdateType"];
      basicAuthUsername?: string;
      basicAuthPassword?: string;
      bearerAuthToken?: string;
      hasVerificationToken?: boolean;
      sslKeystoreAuth?: string | null;
    };
    EndpointCreateDTO: {
      url?: string | null;
      sslVerification: boolean;
    };
    EndpointDTO: {
      url?: string | null;
      sslVerification: boolean;
    };
    EntityMention: {
      /** Format: int32 */
      position: number;
      /** Format: int32 */
      length: number;
      link: string;
    };
    EnumCFFilter: {
      values: (components["schemas"]["EnumCFValue"])[];
    };
    EnumCFInputParameters: {
      values: (string)[];
    };
    EnumCFInputValue: {
      enumValueIdentifier?: components["schemas"]["CFEnumValueIdentifier"];
    };
    EnumCFParameters: {
      values: (components["schemas"]["CFEnumValue"])[];
    };
    EnumCFType: {
      values: (components["schemas"]["EnumValueData"])[];
    };
    EnumCFValue: {
      value?: components["schemas"]["EnumValueData"];
    };
    EnumListCFInputValue: {
      enumValueIdentifiers: (components["schemas"]["CFEnumValueIdentifier"])[];
    };
    EnumListCFType: {
      values: (components["schemas"]["EnumValueData"])[];
    };
    EnumListCFValue: {
      values: (components["schemas"]["EnumValueData"])[];
    };
    EnumValueData: {
      id?: string | null;
      value: string;
      principal?: components["schemas"]["CPrincipalDetails"];
    };
    EnvVar: {
      type: components["schemas"]["EnvVarType"];
      key: string;
      value: string;
    };
    EventConferenceData: {
      kind: components["schemas"]["EventConferenceKind"];
      url?: string | null;
    };
    EventExternalSource: {
      sourceName: string;
      externalId: string;
      sourceLink?: string | null;
      /** Format: int64 */
      externalTimestamp?: number | null;
      sourceHash?: string | null;
    };
    EventSubjectInfoDTO: {
      code: string;
      parentCode?: string | null;
      name: string;
      description: string;
      events: (components["schemas"]["EventTypeInfoDTO"])[];
      defaultFilters: (components["schemas"]["SubscriptionFilter"])[];
      featureFlag?: string | null;
      optionalFeature?: components["schemas"]["OptionalFeature"];
    };
    EventTypeInfoDTO: {
      code: string;
      name: string;
      description: string;
      rights: (components["schemas"]["CRight"])[];
      featureFlag?: string | null;
      /** Format: int32 */
      sortOrder: number;
      payloadApiClassName?: string | null;
    };
    ExtendedType: {
      key: string;
      displayName: string;
      apiClassName?: string | null;
      scopeType: components["schemas"]["ExtendedTypeScopeType"];
    };
    ExtendedTypeKey: {
      key: string;
      scope: components["schemas"]["ExtendedTypeScope"];
    };
    ExternalCheckDTO: {
      repository: string;
      revision: string;
      executionStatus: components["schemas"]["CommitExecutionStatus"];
      url: string;
      externalServiceName: string;
      taskName: string;
      taskId: string;
      taskBuildId?: string | null;
      /** Format: int64 */
      timestamp: number;
      description?: string | null;
    };
    ExternalCodeReviewLink: {
      id: string;
      url: string;
    };
    ExternalCollaboratorType: Record<string, never>;
    ExternalEndpointUpdateDTO: {
      url?: string | null;
      sslVerification?: boolean;
    };
    ExternalEntityInfoRecord: {
      id: string;
      archived: boolean;
      externalId?: string | null;
      externalName?: string | null;
      externalUrl?: string | null;
      transaction: components["schemas"]["ImportTransactionRecord"];
    };
    ExternalIssue: {
      id: string;
      archived: boolean;
      issueId: string;
      issuePrefix: string;
      url: string;
      status?: components["schemas"]["IssueStatus"];
      summary?: string | null;
      fields?: (components["schemas"]["ExternalIssueField"])[] | null;
      codeReviewIds: (string)[];
    };
    ExternalIssueDataIn: {
      issueId: string;
      url: string;
      status?: string | null;
      summary?: string | null;
      fields?: (components["schemas"]["ExternalIssueField"])[] | null;
      createRequestId?: string | null;
    };
    ExternalIssueEvent: {
      className: string;
    } & (components["schemas"]["UpdateIssueStatusOnMergeRequestMerge"] | components["schemas"]["IssueCodeReviewLinkRemoved"] | components["schemas"]["IssueLinkedToCodeReview"] | components["schemas"]["CodeReviewLinkedExternalIssuesChanged"] | components["schemas"]["ProvideExternalIssueData"] | components["schemas"]["ExternalIssueLinkedCodeReviewsChanged"] | components["schemas"]["ExternalIssueLinkedCommitsChanged"] | components["schemas"]["IssueLinkedToCommit"] | components["schemas"]["CommitLinkedExternalIssuesChanged"] | components["schemas"]["IssueCommitLinkRemoved"]);
    ExternalIssueEventQueueItem: {
      event: components["schemas"]["ExternalIssueEvent"];
      /** Format: int64 */
      etag: number;
    };
    ExternalIssueEventQueueItemsBatch: {
      items: (components["schemas"]["ExternalIssueEventQueueItem"])[];
      /** Format: int64 */
      nextEtag: number;
      hasMore: boolean;
    };
    ExternalIssueField: {
      name: string;
      value: string;
    };
    ExternalIssueId: {
      id: string;
      externalTrackerProjectId: string;
    };
    ExternalIssueIdOut: {
      prefix: string;
      id: string;
    };
    ExternalIssueLinkedCodeReviewsChanged: {
      issuePrefix: string;
      issueId: string;
      reviews: (components["schemas"]["CodeReviewRecord"])[];
    };
    ExternalIssueLinkedCommit: {
      commit: components["schemas"]["GitCommitInfo"];
      changes?: components["schemas"]["GitCommitChanges"];
      url: string;
    };
    ExternalIssueLinkedCommitsChanged: {
      issuePrefix: string;
      issueId: string;
      repositories: (components["schemas"]["ExternalIssueLinkedCommitsForRepo"])[];
    };
    ExternalIssueLinkedCommitsForRepo: {
      project: components["schemas"]["PR_Project"];
      repositoryId: string;
      repositoryName?: string | null;
      commits: (components["schemas"]["ExternalIssueLinkedCommit"])[];
    };
    ExternalIssueStatusIn: {
      name: string;
      oldName?: string | null;
    };
    ExternalIssueTrackerProjectApi: {
      id: string;
      name: string;
      issuePrefix: string;
      linkReplacement: string;
      issueListUrl?: string | null;
      spaceProjectLinks: (components["schemas"]["ExternalIssueTrackerProjectLink"])[];
    };
    ExternalIssueTrackerProjectIn: {
      name: string;
      issuePrefix: string;
      linkReplacement: string;
      issueListUrl?: string | null;
    };
    ExternalIssueTrackerProjectLink: {
      spaceProject: components["schemas"]["PR_Project"];
      targetStatusForMergeRequestMerge?: components["schemas"]["IssueStatus"];
      /** Format: date-time */
      linkedAt: string;
    };
    ExternalIssueTrackerUiExtensionApi: {
      domain: string;
      trackerName: string;
      canCreateIssues: boolean;
    };
    ExternalIssueTrackerUiExtensionIn: {
      domain: string;
      trackerName: string;
      canCreateIssues: boolean;
    };
    ExternalLink: {
      label?: string | null;
      url: string;
    };
    ExternalLinkPattern: {
      id: string;
      archived: boolean;
      prefix: string;
      linkReplacement: string;
    };
    FailureConditionDTO: {
      className: string;
    } & (components["schemas"]["NonZeroExitCodeDTO"] | components["schemas"]["OutOfMemoryDTO"] | components["schemas"]["TestFailedDTO"] | components["schemas"]["TimeOutDTO"]);
    FeatureFlagDate: {
      /** Format: int32 */
      year: number;
      /** Format: int32 */
      month: number;
      /** Format: int32 */
      day: number;
    };
    FeatureFlagInfo: {
      name: string;
      description: string;
      status: components["schemas"]["FeatureFlagStatus"];
      owner: string;
      since?: components["schemas"]["FeatureFlagDate"];
      /** Format: int32 */
      issueNumber?: number | null;
    };
    FeatureFlagWebhookEvent: {
      meta: components["schemas"]["KMetaMod"];
      name: string;
      /** Format: int32 */
      issueNumber?: number | null;
      enabledForAll?: {
        old: boolean;
        new: boolean;
      } | null;
      selfManageable?: {
        old: boolean;
        new: boolean;
      } | null;
      addedTeams?: (components["schemas"]["TD_Team"])[] | null;
      addedProfiles?: (components["schemas"]["TD_Team"])[] | null;
      removedTeams?: (components["schemas"]["TD_MemberProfile"])[] | null;
      removedProfiles?: (components["schemas"]["TD_MemberProfile"])[] | null;
    };
    FeedEvent: {
      className: string;
    } & (components["schemas"]["MergeRequestMergedEvent"] | components["schemas"]["ReviewRevisionsChangedEvent"] | components["schemas"]["CodeAnalysisCompletedFeedEvent"] | components["schemas"]["MergeRequestBranchRestoredEvent"] | components["schemas"]["ReviewCompletionStateChangedEvent"] | components["schemas"]["ReviewTitleChangedEvent"] | components["schemas"]["ReviewerChangedEvent"] | components["schemas"]["CodeDiscussionAddedFeedEvent"] | components["schemas"]["ReviewBranchTrackEvent"] | components["schemas"]["ReviewStateChangedEvent"] | components["schemas"]["CodeReviewDiscussionAddedFeedEvent"] | components["schemas"]["ReviewCreatedEvent"] | components["schemas"]["MergeRequestBranchDeletedEvent"]);
    FileAttachment: {
      id: string;
      /** Format: int64 */
      sizeBytes: number;
      filename: string;
    };
    FileBOM: {
      name: string;
    };
    FileData: {
      type: components["schemas"]["PackageType"];
      repository: string;
      name: string;
      path: string;
      fileType: components["schemas"]["FileDataType"];
      /** Format: int64 */
      created: number;
      /** Format: int64 */
      size: number;
    };
    FileDetails: {
      type: components["schemas"]["PackageType"];
      repository: string;
      name: string;
      /** Format: int64 */
      created: number;
      createdBy?: components["schemas"]["CPrincipal"];
      /** Format: int64 */
      lastModified?: number | null;
      /** Format: int64 */
      downloads: number;
      /** Format: int64 */
      diskSize: number;
      authors?: (components["schemas"]["CPrincipal"])[] | null;
      origin?: components["schemas"]["PackageOrigin"];
      description?: string | null;
      path: string;
      contentType?: string | null;
      metadata?: ({
        [key: string]: string | undefined;
      }) | null;
    };
    FileDocumentBody: {
      versionId: string;
      contentType: string;
      /** Format: int64 */
      fileSize: number;
    };
    FileDocumentBodyCreateIn: {
      blobId: string;
    };
    FileDocumentBodyInfo: {
      fileDocument?: components["schemas"]["FileDocumentRecord"];
      fileDocumentId?: string | null;
      contentType?: string | null;
      /** Format: int64 */
      fileSize?: number | null;
    };
    FileDocumentBodyUpdateIn: {
      blobId: string;
    };
    FileDocumentHttpBody: {
      contentType: string;
      /** Format: int64 */
      fileSize: number;
    };
    FileDocumentRecord: {
      id: string;
      archived: boolean;
      body: components["schemas"]["FileDocumentBody"];
    };
    FileSetInReview: {
      repository: string;
      commit: string;
      paths: (string)[];
    };
    FileType: {
      id: string;
    };
    Fingerprint: {
      md5: string;
      sha1: string;
      sha256: string;
      sha384: string;
      sha512: string;
    };
    FolderAccess: {
      permissions?: (components["schemas"]["FolderAccessRecipient"])[] | null;
      inherited?: (components["schemas"]["FolderAccessRecipient"])[] | null;
      restricted: boolean;
    };
    FolderAccessRecipient: {
      access?: components["schemas"]["FolderSharingAccessType"];
      recipient?: components["schemas"]["PermissionsRecipient"];
      isContainerAccessible: boolean;
    };
    FolderAccessRecipientIdentifier: {
      access?: components["schemas"]["FolderSharingAccessType"];
      recipient?: components["schemas"]["PermissionsRecipientIdentifier"];
    };
    FollowedColleagueSettingsDTO: {
      followedMembers: components["schemas"]["FollowedMembersSettings"];
      projectAndTeams: (components["schemas"]["FollowedEntityDTO"])[];
    };
    FollowedEntityDTO: {
      className: string;
    } & (components["schemas"]["FollowedEntityDTO.Project"] | components["schemas"]["FollowedEntityDTO.Team"]);
    "FollowedEntityDTO.Project": {
      enabled: boolean;
      projectId: string;
      teams?: (components["schemas"]["FollowedEntityDTO.Team"])[] | null;
    };
    "FollowedEntityDTO.Team": {
      enabled: boolean;
      teamId: string;
    };
    FollowedMembersSettings: {
      enabled: boolean;
      members: (string)[];
    };
    Fraction: {
      /** Format: int32 */
      numerator: number;
      /** Format: int32 */
      denominator: number;
    };
    FractionCFFilter: {
      values: (components["schemas"]["FractionCFValue"])[];
    };
    FractionCFType: Record<string, never>;
    FractionCFValue: {
      value?: components["schemas"]["Fraction"];
    };
    FullWebhookDTO: {
      webhook: components["schemas"]["WebhookRecord"];
      status?: components["schemas"]["WebhookDeliveryStatusDTO"];
    };
    GenericIssueId: {
      className: string;
    } & (components["schemas"]["ExternalIssueId"] | components["schemas"]["SpaceIssueId"]);
    GetMessagesResponse: {
      messages: (components["schemas"]["ChannelItemRecord"])[];
      /** Format: date-time */
      nextStartFromDate?: string | null;
      orgLimitReached: boolean;
    };
    GettingStartedUiExtensionApi: {
      gettingStartedUrl: string;
      gettingStartedTitle: string;
      openInNewTab?: boolean | null;
    };
    GettingStartedUiExtensionIn: {
      gettingStartedUrl: string;
      gettingStartedTitle: string;
      openInNewTab?: boolean | null;
    };
    GitAuthorInfo: {
      name: string;
      email: string;
    };
    GitCheckout: {
      isDefault: boolean;
      name: string;
      cloneDir?: string | null;
      ref: string;
      commit: string;
    };
    GitCherryPickResult: {
      success: boolean;
      message: string;
      resultCommitId?: string | null;
    };
    GitCommitChange: {
      changeType: components["schemas"]["GitCommitChangeType"];
      old?: components["schemas"]["GitFile"];
      new?: components["schemas"]["GitFile"];
      revision: string;
      diffSize?: components["schemas"]["GitDiffSize"];
      path?: string | null;
      detached?: boolean | null;
      constituentCommits?: (string)[] | null;
    };
    GitCommitChanges: {
      changes: (components["schemas"]["GitCommitChange"])[];
      overflow: boolean;
    };
    GitCommitFileRequest: {
      path: string;
      content: components["schemas"]["GitFileContent"];
    };
    GitCommitInfo: {
      id: string;
      message: string;
      /** Format: int64 */
      authorDate: number;
      /** Format: int64 */
      commitDate: number;
      author: components["schemas"]["GitAuthorInfo"];
      authorProfile?: components["schemas"]["TD_MemberProfile"];
      committer: components["schemas"]["GitAuthorInfo"];
      committerProfile?: components["schemas"]["TD_MemberProfile"];
      parents: (string)[];
      heads: (string)[];
      signature?: components["schemas"]["GitCommitSignature"];
      committerIsSpace?: boolean | null;
    };
    GitCommitInfoWithChanges: {
      commit: components["schemas"]["GitCommitInfo"];
      changes: components["schemas"]["GitCommitChanges"];
    };
    GitCommitResult: {
      fromHead?: string | null;
      toHead?: string | null;
      success: boolean;
      message: string;
      resultCommitId?: string | null;
    };
    GitCommitSignature: {
      className: string;
    } & (components["schemas"]["GitCommitSignature.ExpiredKey"] | components["schemas"]["GitCommitSignature.NotVerified"] | components["schemas"]["GitCommitSignature.Raw"] | components["schemas"]["GitCommitSignature.RevokedKey"] | components["schemas"]["GitCommitSignature.Verified"]);
    "GitCommitSignature.ExpiredKey": {
      description: string;
    };
    "GitCommitSignature.NotVerified": Record<string, never>;
    "GitCommitSignature.Raw": {
      signature: string;
      signedDataB64: string;
    };
    "GitCommitSignature.RevokedKey": {
      description: string;
      revokeComment?: string | null;
    };
    "GitCommitSignature.Verified": {
      description: string;
    };
    GitCommitWithGraph: {
      repositoryName: string;
      commit: components["schemas"]["GitCommitInfo"];
      commitMessageUnfurls: (components["schemas"]["Unfurl"])[];
      reviews: (components["schemas"]["CodeReviewRecord"])[];
      issueIds: (string)[];
      linkedIssues?: (components["schemas"]["GenericIssueId"])[] | null;
      deployments: ({
          first: string;
          second?: string | null;
        })[];
      layout?: components["schemas"]["GitGraphLayoutLine"];
      unreachable: boolean;
    };
    GitCommitterProfile: {
      author: string;
      email: string;
      profile?: components["schemas"]["TD_MemberProfile"];
    };
    GitDiffSize: {
      /** Format: int32 */
      added: number;
      /** Format: int32 */
      deleted: number;
    };
    GitFile: {
      commit: string;
      path: string;
      blob: string;
      type: components["schemas"]["GitEntryType"];
      properties?: components["schemas"]["GitFileProperties"];
    };
    GitFileAttribute: {
      name: string;
      value?: string | null;
      state: components["schemas"]["GitFileAttribute.AttributeState"];
    };
    GitFileChange: {
      changeType: components["schemas"]["GitCommitChangeType"];
      old?: components["schemas"]["GitFile"];
      new?: components["schemas"]["GitFile"];
    };
    GitFileContent: {
      className: string;
    } & (components["schemas"]["GitFileContent.Base64"] | components["schemas"]["GitFileContent.Deleted"] | components["schemas"]["GitFileContent.Text"]);
    "GitFileContent.Base64": {
      value: string;
      executable?: boolean | null;
    };
    "GitFileContent.Deleted": Record<string, never>;
    "GitFileContent.Text": {
      value: string;
      executable?: boolean | null;
    };
    GitFileProperties: {
      lfs?: boolean | null;
      executable?: boolean | null;
      attributes: (components["schemas"]["GitFileAttribute"])[];
    };
    GitGraphLayoutEdge: {
      /** Format: int32 */
      from: number;
      /** Format: int32 */
      to: number;
      type: components["schemas"]["GitGraphEdgeType"];
      style: components["schemas"]["GitGraphEdgeLineStyle"];
      hasArrow: boolean;
      /** Format: int32 */
      color: number;
    };
    GitGraphLayoutLine: {
      nodes: (components["schemas"]["GitGraphLayoutNode"])[];
      edges: (components["schemas"]["GitGraphLayoutEdge"])[];
    };
    GitGraphLayoutNode: {
      /** Format: int32 */
      pos: number;
      /** Format: int32 */
      color: number;
    };
    GitMergeBranchResult: {
      status: components["schemas"]["GitMergeStatus"];
      message: string;
      resultCommitId?: string | null;
    };
    GitMergeResultHttp: {
      status: components["schemas"]["GitMergeStatusHttp"];
      resultCommitId?: string | null;
    };
    GitMergedFile: {
      name: string;
      oldName?: string | null;
      baseId?: string | null;
      sourceId?: string | null;
      targetId?: string | null;
      diffSize?: components["schemas"]["GitDiffSize"];
      entryType: components["schemas"]["GitEntryType"];
      conflicting: boolean;
      properties?: components["schemas"]["GitFileProperties"];
    };
    GitRebaseResult: {
      success: boolean;
      message: string;
      resultCommitIds: (string)[];
    };
    GitRebaseResultHttp: {
      resultCommitIds: (string)[];
    };
    GitRepositorySettings: {
      version: string;
      mirror?: components["schemas"]["GitRepositorySettings.MirrorSettings"];
      encoding?: string | null;
      pushRestrictions?: components["schemas"]["GitRepositorySettings.PushRestrictions"];
      protectedBranches?: (components["schemas"]["GitRepositorySettings.ProtectedBranch"])[] | null;
      preReceiveHook?: components["schemas"]["GitRepositorySettings.PreReceiveHook"];
      bundle?: components["schemas"]["GitRepositorySettings.Bundle"];
      subtree?: (components["schemas"]["GitRepositorySettings.SubtreeSetting"])[] | null;
    };
    "GitRepositorySettings.Bundle": {
      enable: boolean;
    };
    "GitRepositorySettings.MirrorSettings": {
      url: string;
      refsSpec?: (string)[] | null;
      detachHEAD: boolean;
      username?: string | null;
      password?: string | null;
      useKeyAuth?: boolean | null;
      key?: string | null;
      keyPassphrase?: string | null;
      keyError?: string | null;
      publicKey?: string | null;
      keyFingerprints?: (string)[] | null;
      fetchPeriodically: boolean;
      fetchBeforeGitCall: boolean;
      allowAtomicPush?: boolean | null;
      mirrorPullRequest?: boolean | null;
    };
    "GitRepositorySettings.PreReceiveHook": {
      serverUrl?: string | null;
      script?: string | null;
      scriptOid?: string | null;
    };
    "GitRepositorySettings.ProtectedBranch": {
      pattern: (string)[];
      regex?: boolean | null;
      allowCreate?: (string)[] | null;
      allowPush?: (string)[] | null;
      allowDelete?: (string)[] | null;
      allowForcePush?: (string)[] | null;
      qualityGate?: components["schemas"]["GitRepositorySettings.QualityGate"];
      safeMerge?: components["schemas"]["GitRepositorySettings.SafeMerge"];
      linearHistory?: boolean | null;
    };
    "GitRepositorySettings.PushRestrictions": {
      checkAuthenticatedCommitter?: boolean | null;
      requireSignature?: boolean | null;
      verifySignature?: boolean | null;
      maxFileSize?: string | null;
      defaultForbiddenFilesList?: boolean | null;
      forbiddenFileNames?: (string)[] | null;
      commitMessageRegex?: string | null;
      commitMessageNegativeRegex?: string | null;
      windowsCompatibility?: boolean | null;
    };
    "GitRepositorySettings.QualityGate": {
      allowMergeFor?: (string)[] | null;
      allowBypassFor?: (string)[] | null;
      externalStatus?: (string)[] | null;
      automationJobs?: (string)[] | null;
      approvals?: (components["schemas"]["GitRepositorySettings.QualityGateApproval"])[] | null;
      codeOwnersApproval?: boolean | null;
      allowSelfApproval?: boolean | null;
    };
    "GitRepositorySettings.QualityGateApproval": {
      /** Format: int32 */
      minApprovals: number;
      approvedBy: (string)[];
    };
    "GitRepositorySettings.SafeMerge": {
      configOid: string;
    };
    "GitRepositorySettings.SubtreeSetting": {
      localBranch: string;
      localPath: string;
      remoteRepo: string;
      remoteBranch: string;
      remotePath?: string | null;
    };
    GithubRegisterNewUserRule: {
      userType: components["schemas"]["RegisterNewUserType"];
      allowed: boolean;
      restrictedByOrgs: (string)[];
    };
    GlobalNotificationSettings: {
      emailNotificationsEnabled: boolean;
      notificationEmail?: components["schemas"]["TD_ProfileEmail"];
      pushNotificationEnabled: boolean;
      /** Format: int32 */
      desktopInactivityTimeout?: number | null;
      multiClientEnabled: boolean;
    };
    GlobalPermissionContext: Record<string, never>;
    GlobalPermissionTarget: Record<string, never>;
    GlobalRole: {
      className: string;
    } & (components["schemas"]["GlobalRole.GlobalAdmin"] | components["schemas"]["GlobalRole.GlobalMember"] | components["schemas"]["GlobalRole.Guest"] | components["schemas"]["GlobalRole.LightGuest"]);
    "GlobalRole.GlobalAdmin": Record<string, never>;
    "GlobalRole.GlobalMember": Record<string, never>;
    "GlobalRole.Guest": Record<string, never>;
    "GlobalRole.LightGuest": Record<string, never>;
    GlobalScope: Record<string, never>;
    GoogleIntegrationDisconnectedEvent: {
      member: components["schemas"]["TD_MemberProfile"];
    };
    GoogleRegisterNewUserRule: {
      userType: components["schemas"]["RegisterNewUserType"];
      allowed: boolean;
      restrictedByDomains: (string)[];
    };
    GpgKeyData: {
      fingerprint: string;
      publicKey: string;
      userIds: (components["schemas"]["GpgKeyData.KeyUserId"])[];
      comment: string;
      /** Format: date-time */
      created: string;
      /** Format: date-time */
      added: string;
      /** Format: date-time */
      expires?: string | null;
      revoked: boolean;
      /** Format: date-time */
      revokedAt?: string | null;
      revokeComment?: string | null;
    };
    "GpgKeyData.KeyUserId": {
      id: string;
      verified: boolean;
    };
    GrammarDictionaryEntry_DTO: {
      entry: string;
      /** Format: date-time */
      addedAt?: string | null;
    };
    GuestType: {
      className: string;
    } & (components["schemas"]["ExternalCollaboratorType"] | components["schemas"]["LightGuestType"]);
    HA_DefaultValue: {
      className: string;
    } & (components["schemas"]["HA_DefaultValue.Collection"] | components["schemas"]["HA_DefaultValue.Const.EnumEntry"] | components["schemas"]["HA_DefaultValue.Const.Primitive"] | components["schemas"]["HA_DefaultValue.Map"] | components["schemas"]["HA_DefaultValue.Reference"]);
    "HA_DefaultValue.Collection": {
      elements: (components["schemas"]["HA_DefaultValue"])[];
    };
    "HA_DefaultValue.Const": {
      className: string;
    } & (components["schemas"]["HA_DefaultValue.Const.EnumEntry"] | components["schemas"]["HA_DefaultValue.Const.Primitive"]);
    "HA_DefaultValue.Const.EnumEntry": {
      entryName: string;
    };
    "HA_DefaultValue.Const.Primitive": {
      expression: string;
    };
    "HA_DefaultValue.Map": {
      elements: {
        [key: string]: components["schemas"]["HA_DefaultValue"] | undefined;
      };
    };
    "HA_DefaultValue.Reference": {
      paramName: string;
    };
    HA_Deprecation: {
      message: string;
      since: string;
      forRemoval: boolean;
    };
    HA_Description: {
      text: string;
      helpTopic?: string | null;
    };
    HA_Dto: {
      id: string;
      name: string;
      fields: (components["schemas"]["HA_DtoField"])[];
      hierarchyRole: components["schemas"]["HierarchyRole"];
      hierarchyRole2: components["schemas"]["HierarchyRole2"];
      extends?: components["schemas"]["HA_Dto"];
      implements: (components["schemas"]["HA_Dto"])[];
      inheritors: (components["schemas"]["HA_Dto"])[];
      description?: components["schemas"]["HA_Description"];
      deprecation?: components["schemas"]["HA_Deprecation"];
      experimental?: components["schemas"]["HA_Experimental"];
      record: boolean;
      featureFlag?: string | null;
      errorsField?: components["schemas"]["HA_Field"];
    };
    HA_DtoField: {
      field: components["schemas"]["HA_Field"];
      extension: boolean;
    };
    HA_Endpoint: {
      resource: components["schemas"]["HA_Resource"];
      method: components["schemas"]["HA_Method"];
      parameters: (components["schemas"]["HA_Parameter"])[];
      requestBody?: components["schemas"]["HA_Type.Object"];
      responseBody?: components["schemas"]["HA_Type"];
      path: components["schemas"]["HA_Path"];
      displayName: string;
      functionName: string;
      doc?: string | null;
      description?: components["schemas"]["HA_Description"];
      deprecation?: components["schemas"]["HA_Deprecation"];
      experimental?: components["schemas"]["HA_Experimental"];
      rights?: (components["schemas"]["HA_Right"])[] | null;
      featureFlag?: string | null;
    };
    HA_Enum: {
      id: string;
      name: string;
      values: (string)[];
      deprecation?: components["schemas"]["HA_Deprecation"];
      experimental?: components["schemas"]["HA_Experimental"];
    };
    HA_Experimental: {
      message?: string | null;
    };
    HA_FeatureFlag: {
      name: string;
      displayName: string;
    };
    HA_Field: {
      name: string;
      type: components["schemas"]["HA_Type"];
      defaultValue?: components["schemas"]["HA_DefaultValue"];
      optional: boolean;
      description?: components["schemas"]["HA_Description"];
      deprecation?: components["schemas"]["HA_Deprecation"];
      experimental?: components["schemas"]["HA_Experimental"];
    };
    HA_InlineError: {
      className: string;
    } & components["schemas"]["HA_InlineError.InaccessibleFields"];
    "HA_InlineError.InaccessibleFields": {
      fields: (string)[];
      message: string;
    };
    HA_MenuId: {
      menuId: string;
      context: components["schemas"]["HA_Dto"];
    };
    HA_Model: {
      dto: (components["schemas"]["HA_Dto"])[];
      enums: (components["schemas"]["HA_Enum"])[];
      urlParams: (components["schemas"]["HA_UrlParameter"])[];
      resources: (components["schemas"]["HA_Resource"])[];
      allResources: (components["schemas"]["HA_Resource"])[];
      menuIds: (components["schemas"]["HA_MenuId"])[];
      featureFlags?: (components["schemas"]["HA_FeatureFlag"])[] | null;
    };
    HA_Parameter: {
      field: components["schemas"]["HA_Field"];
      path: boolean;
    };
    HA_Path: {
      segments: (components["schemas"]["HA_PathSegment"])[];
    };
    HA_PathSegment: {
      className: string;
    } & (components["schemas"]["HA_PathSegment.Const"] | components["schemas"]["HA_PathSegment.PrefixedVar"] | components["schemas"]["HA_PathSegment.Var"]);
    "HA_PathSegment.Const": {
      value: string;
    };
    "HA_PathSegment.PrefixedVar": {
      prefix: string;
      name: string;
    };
    "HA_PathSegment.Var": {
      name: string;
    };
    HA_Resource: {
      id: string;
      path: components["schemas"]["HA_Path"];
      displaySingular: string;
      displayPlural: string;
      parentResource?: components["schemas"]["HA_Resource"];
      endpoints: (components["schemas"]["HA_Endpoint"])[];
      nestedResources: (components["schemas"]["HA_Resource"])[];
    };
    HA_Right: {
      rightUniqueCode: string;
      title: string;
      description?: string | null;
    };
    HA_Type: {
      className: string;
    } & (components["schemas"]["HA_Type.Array"] | components["schemas"]["HA_Type.Dto"] | components["schemas"]["HA_Type.Enum"] | components["schemas"]["HA_Type.Map"] | components["schemas"]["HA_Type.Object"] | components["schemas"]["HA_Type.Primitive"] | components["schemas"]["HA_Type.Ref"] | components["schemas"]["HA_Type.UrlParam"]);
    "HA_Type.Array": {
      elementType: components["schemas"]["HA_Type"];
      nullable: boolean;
      tags: (string)[];
    };
    "HA_Type.Dto": {
      dto: components["schemas"]["HA_Dto"];
      nullable: boolean;
      tags: (string)[];
    };
    "HA_Type.Enum": {
      enum: components["schemas"]["HA_Enum"];
      nullable: boolean;
      tags: (string)[];
    };
    "HA_Type.Map": {
      valueType: components["schemas"]["HA_Type"];
      nullable: boolean;
      tags: (string)[];
    };
    "HA_Type.Object": {
      fields: (components["schemas"]["HA_Field"])[];
      kind: components["schemas"]["HA_Type.Object.Kind"];
      nullable: boolean;
      tags: (string)[];
    };
    "HA_Type.Primitive": {
      primitive: components["schemas"]["HA_Primitive"];
      nullable: boolean;
      tags: (string)[];
    };
    "HA_Type.Ref": {
      dto: components["schemas"]["HA_Dto"];
      nullable: boolean;
      tags: (string)[];
    };
    "HA_Type.UrlParam": {
      urlParam: components["schemas"]["HA_UrlParameter"];
      nullable: boolean;
      tags: (string)[];
    };
    HA_UrlParameter: {
      id: string;
      name: string;
      options: (components["schemas"]["HA_UrlParameterOption"])[];
      deprecation?: components["schemas"]["HA_Deprecation"];
      experimental?: components["schemas"]["HA_Experimental"];
    };
    HA_UrlParameterOption: {
      className: string;
    } & (components["schemas"]["HA_UrlParameterOption.Const"] | components["schemas"]["HA_UrlParameterOption.Var"]);
    "HA_UrlParameterOption.Const": {
      value: string;
      optionName: string;
      description?: components["schemas"]["HA_Description"];
      deprecation?: components["schemas"]["HA_Deprecation"];
      experimental?: components["schemas"]["HA_Experimental"];
      featureFlag?: string | null;
    };
    "HA_UrlParameterOption.Var": {
      parameter: components["schemas"]["HA_Field"];
      parameters: (components["schemas"]["HA_Field"])[];
      prefixRequired: boolean;
      optionName: string;
      description?: components["schemas"]["HA_Description"];
      deprecation?: components["schemas"]["HA_Deprecation"];
      experimental?: components["schemas"]["HA_Experimental"];
      featureFlag?: string | null;
    };
    HolidaysEvent: {
      profile: components["schemas"]["TD_MemberProfile"];
      holidays: (components["schemas"]["PublicHoliday"])[];
    };
    HubRegisterNewUserRule: {
      userType: components["schemas"]["RegisterNewUserType"];
      allowed: boolean;
      orgAuthModuleName?: string | null;
      restrictedByGroups: (string)[];
    };
    IdeNames: {
      backendFullName: string;
      backendShortName: string;
      clientFullName: string;
      clientShortName: string;
      usesSeparateClientProduct: boolean;
    };
    IdeType: {
      id: string;
      toolboxId: string;
      names: components["schemas"]["IdeNames"];
      description: string;
      defaultWarmupProfile: string;
    };
    IdeVersionDetails: {
      ideName: string;
      version: string;
      versionDisplayName: string;
      build: string;
      /** Format: date-time */
      releaseDate?: string | null;
      quality: components["schemas"]["IdeVersionQuality"];
    };
    IdeVersionQuality: {
      name: string;
      /** Format: int32 */
      order: number;
    };
    ImageAttachment: {
      id: string;
      name?: string | null;
      /** Format: int32 */
      width: number;
      /** Format: int32 */
      height: number;
      variants?: (components["schemas"]["ImageAttachmentVariant"])[] | null;
    };
    ImageAttachmentMeta: {
      variants: (components["schemas"]["ImageAttachmentVariantsMeta"])[];
    };
    ImageAttachmentVariant: {
      id: string;
      name?: string | null;
      /** Format: int32 */
      width: number;
      /** Format: int32 */
      height: number;
    };
    ImageAttachmentVariantsMeta: {
      id: string;
      name: string;
      /** Format: int32 */
      width: number;
      /** Format: int32 */
      height: number;
    };
    ImportArticle: {
      title: string;
      content: string;
      authorId: string;
      /** Format: date-time */
      created: string;
      teams?: (string)[] | null;
      locations?: (string)[] | null;
      externalId?: string | null;
      externalUrl?: string | null;
    };
    ImportIssue: {
      summary: string;
      description?: string | null;
      status: string;
      assignee?: string | null;
      externalId: string;
      externalName?: string | null;
      externalUrl?: string | null;
    };
    ImportMessage: {
      className: string;
    } & (components["schemas"]["ImportMessage.Create"] | components["schemas"]["ImportMessage.Delete"] | components["schemas"]["ImportMessage.Update"]);
    "ImportMessage.Create": {
      messageId: components["schemas"]["ChatMessageIdentifier.ExternalId"];
      message: components["schemas"]["ChatMessage"];
      author: components["schemas"]["PrincipalIn"];
      /** Format: int64 */
      createdAtUtc: number;
      /** Format: int64 */
      editedAtUtc?: number | null;
      attachments?: (components["schemas"]["AttachmentIn"])[] | null;
    };
    "ImportMessage.Delete": {
      messageId: components["schemas"]["ChatMessageIdentifier.ExternalId"];
    };
    "ImportMessage.Update": {
      messageId: components["schemas"]["ChatMessageIdentifier.ExternalId"];
      message: components["schemas"]["ChatMessage"];
      author: components["schemas"]["PrincipalIn"];
      /** Format: int64 */
      editedAtUtc?: number | null;
      attachments?: (components["schemas"]["AttachmentIn"])[] | null;
    };
    ImportMetadata: {
      importSource: string;
    };
    ImportTransactionRecord: {
      id: string;
      archived: boolean;
      importer: components["schemas"]["CPrincipal"];
      externalSource: string;
      /** Format: date-time */
      imported: string;
    };
    InaccessibleContainerInfo: {
      /** Format: int32 */
      containerType?: number | null;
      grantedRights?: (string)[] | null;
    };
    InaccessibleDocumentBody: {
      docBodyType: components["schemas"]["DocumentBodyType"];
      docBodyId: string;
    };
    InitPayload: {
      clientSecret: string;
      serverUrl: string;
      state?: string | null;
      clientId: string;
      userId?: string | null;
      verificationToken?: string | null;
    };
    InlineDiff: {
      type: components["schemas"]["GitFileType"];
      lines: (components["schemas"]["InlineDiffLine"])[];
      hasFilteredFragments: boolean;
      lineEndingDiff?: components["schemas"]["LineEndingDiff"];
      bomDiff?: components["schemas"]["BOMDiff"];
      scopes?: (components["schemas"]["CodeScopeRange"])[] | null;
    };
    InlineDiffLine: {
      text: string;
      type?: components["schemas"]["DiffLineType"];
      /** Format: int32 */
      oldLineNum?: number | null;
      /** Format: int32 */
      newLineNum?: number | null;
      /** Format: int32 */
      oldFileOffset: number;
      /** Format: int32 */
      newFileOffset: number;
      syntax?: (components["schemas"]["SyntaxMarkup"])[] | null;
      deletes?: (components["schemas"]["TextRange"])[] | null;
      inserts?: (components["schemas"]["TextRange"])[] | null;
    };
    InlineUnfurlDetails: {
      className: string;
    } & (components["schemas"]["UnfurlDetailsRole"] | components["schemas"]["UnfurlDetailsArticle"] | components["schemas"]["UnfurlDetailsCommit"] | components["schemas"]["UnfurlDetailsIssueTag"] | components["schemas"]["UnfurlDetailsChat"] | components["schemas"]["UnfurlDetailsChecklist"] | components["schemas"]["AutomationJobExecutionUnfurlDetails"] | components["schemas"]["UnfurlDetailsShortCommit"] | components["schemas"]["UnfurlDetailsIssueStatus"] | components["schemas"]["UnfurlDetailsIssueImportTransaction"] | components["schemas"]["UnfurlDetailsSprint"] | components["schemas"]["UnfurlDetailsDateTimeRange"] | components["schemas"]["UnfurlDetailsIssue"] | components["schemas"]["UnfurlDetailsApplication"] | components["schemas"]["AutomationJobUnfurlDetails"] | components["schemas"]["CallSessionUnfurlDetails"] | components["schemas"]["UnfurlDetailsReviewDescriptionDiff"] | components["schemas"]["UnfurlDetailsTeam"] | components["schemas"]["UnfurlDetailsRepositoryBranch"] | components["schemas"]["UnfurlDetailsCodeReview"] | components["schemas"]["UnfurlDetailsMeeting"] | components["schemas"]["UnfurlDetailsPackageDetails"] | components["schemas"]["UnfurlDeploymentDetails"] | components["schemas"]["UnfurlDetailsExternalIssue"] | components["schemas"]["UnfurlDetailsTextDiff"] | components["schemas"]["UnfurlDetailsSnapshotDiff"] | components["schemas"]["UnfurlDetailsProject"] | components["schemas"]["UnfurlDetailsFolder"] | components["schemas"]["UnfurlDetailsChatLink"] | components["schemas"]["UnfurlDetailsIssueId"] | components["schemas"]["UnfurlDetailsDateTime"] | components["schemas"]["UnfurlDetailsProfile"] | components["schemas"]["UnfurlDetailsExternalIssueId"] | components["schemas"]["UnfurlDetailsNewIssueAction"] | components["schemas"]["UnfurlDetailsDraft"] | components["schemas"]["DocumentHistoryUnfurlDetails"] | components["schemas"]["UnfurlDeployTargetDetails"] | components["schemas"]["UnfurlDetailsLocation"]);
    IntCFConstraint: {
      /** Format: int32 */
      min?: number | null;
      /** Format: int32 */
      max?: number | null;
      message?: string | null;
    };
    IntCFFilter: {
      minValue?: components["schemas"]["IntCFValue"];
      maxValue?: components["schemas"]["IntCFValue"];
    };
    IntCFType: Record<string, never>;
    IntCFValue: {
      /** Format: int32 */
      value?: number | null;
    };
    IntListCFType: Record<string, never>;
    IntListCFValue: {
      values: (number)[];
    };
    Invitation: {
      id: string;
      /** Format: date-time */
      expiresAt: string;
      inviteeEmail: string;
      inviteeEmailBlocked: boolean;
      inviteeEmailBlockedReason?: string | null;
      inviteeFirstName?: string | null;
      inviteeLastName?: string | null;
      invitee?: components["schemas"]["TD_MemberProfile"];
      inviter: components["schemas"]["CPrincipal"];
      team?: components["schemas"]["TD_Team"];
      role?: components["schemas"]["TD_Role"];
      project?: components["schemas"]["PR_Project"];
      projectRole?: components["schemas"]["ProjectTeamRole"];
      globalRole?: components["schemas"]["GlobalRole"];
      revoked?: boolean | null;
    };
    InvitationLink: {
      id: string;
      name: string;
      createdBy: components["schemas"]["CPrincipal"];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      expiresAt?: string | null;
      /** Format: int32 */
      inviteeLimit: number;
      /** Format: int32 */
      inviteeUsage: number;
      team?: components["schemas"]["TD_Team"];
      position?: components["schemas"]["TD_Role"];
      project?: components["schemas"]["PR_Project"];
      globalRole?: components["schemas"]["GlobalRole"];
      projectRole: components["schemas"]["ProjectTeamRole"];
      link?: string | null;
      deleted: boolean;
    };
    Issue: {
      id: string;
      archived: boolean;
      projectId?: string | null;
      projectRef: components["schemas"]["PR_Project"];
      trackerRef?: components["schemas"]["IssueTracker"];
      /** Format: int32 */
      number: number;
      createdBy: components["schemas"]["CPrincipal"];
      /** Format: date-time */
      creationTime: string;
      assignee?: components["schemas"]["TD_MemberProfile"];
      status: components["schemas"]["IssueStatus"];
      /** Format: full-date */
      dueDate?: string | null;
      externalEntityInfo?: components["schemas"]["ExternalEntityInfoRecord"];
      tags: (components["schemas"]["PlanningTag"])[];
      title: string;
      /** Format: int32 */
      attachmentsCount?: number | null;
      /** Format: int32 */
      subItemsCount?: number | null;
      /** Format: int32 */
      doneSubItemsCount?: number | null;
      /** Format: int32 */
      commentsCount?: number | null;
      deletedBy?: components["schemas"]["CPrincipal"];
      /** Format: date-time */
      deletedTime?: string | null;
      checklists: (components["schemas"]["Checklist"])[];
      description?: string | null;
      channel: components["schemas"]["M2ChannelRecord"];
      attachments: (components["schemas"]["AttachmentInfo"])[];
      unfurls?: (components["schemas"]["AttachmentInfo"])[] | null;
      rtDescription?: components["schemas"]["RtContent"];
      parents: (components["schemas"]["Issue"])[];
      messagePermalink?: string | null;
      backlogs: (components["schemas"]["BoardBacklog"])[];
      subItemsList: components["schemas"]["Checklist"];
      sprints: (components["schemas"]["SprintRecord"])[];
      customFields: {
        [key: string]: components["schemas"]["CFValue"] | undefined;
      };
    };
    IssueAssigneeChangedDetails: {
      oldAssignee?: components["schemas"]["TD_MemberProfile"];
      newAssignee?: components["schemas"]["TD_MemberProfile"];
    };
    IssueAttachmentsChangedDetails: {
      addedNames?: (string)[] | null;
      removedNames?: (string)[] | null;
    };
    IssueBranches: {
      id: string;
      archived: boolean;
    };
    IssueCFFilter: {
      values: (components["schemas"]["IssueCFInputValue"])[];
    };
    IssueCFInputValue: {
      issue?: components["schemas"]["IssueIdentifier"];
    };
    IssueCFType: Record<string, never>;
    IssueCFValue: {
      issue?: components["schemas"]["Issue"];
    };
    IssueChangedM2Details: {
      className: string;
    } & (components["schemas"]["IssueStatusChangedDetails"] | components["schemas"]["IssueChecklistsChangedDetails"] | components["schemas"]["IssueDeletedDetails"] | components["schemas"]["IssueDescriptionChangedDetails"] | components["schemas"]["IssueMentionedDetails"] | components["schemas"]["IssueTagsChangedDetails"] | components["schemas"]["IssueAssigneeChangedDetails"] | components["schemas"]["IssueDueDateChangedDetails"] | components["schemas"]["IssueAttachmentsChangedDetails"] | components["schemas"]["IssueTitleChangedDetails"] | components["schemas"]["IssueCreatedDetails"] | components["schemas"]["IssueMCExtension"]);
    IssueChannelFilterValueDetails: {
      projectId: string;
    };
    IssueChecklistsChangedDetails: {
      addedChecklists?: (components["schemas"]["Checklist"])[] | null;
      removedChecklists?: (components["schemas"]["Checklist"])[] | null;
    };
    IssueCodeChangesMCExtension: Record<string, never>;
    IssueCodeReviewLinkRemoved: {
      review: components["schemas"]["CodeReviewRecord"];
      issuePrefix: string;
      issueId: string;
    };
    IssueCommitLinkRemoved: {
      project: components["schemas"]["PR_Project"];
      repositoryId: string;
      commitId: string;
      issuePrefix: string;
      issueId: string;
    };
    IssueCommits: {
      id: string;
    };
    IssueCreatedDetails: {
      issue?: components["schemas"]["Issue"];
      originMessage?: components["schemas"]["MessageLink"];
    };
    IssueDeletedDetails: Record<string, never>;
    IssueDescriptionChangedDetails: {
      oldDescription?: string | null;
      newDescription?: string | null;
    };
    IssueDueDateChangedDetails: {
      /** Format: full-date */
      oldDueDate?: string | null;
      /** Format: full-date */
      newDueDate?: string | null;
    };
    IssueEditableByMe: Record<string, never>;
    IssueFieldFilter: {
      className: string;
    } & (components["schemas"]["IssueFieldFilter.ByCustomField"] | components["schemas"]["IssueFieldFilter.BySystemField"]);
    "IssueFieldFilter.ByCustomField": {
      customField: components["schemas"]["CFIdentifier"];
      filter: components["schemas"]["CFFilter"];
    };
    "IssueFieldFilter.BySystemField": {
      systemField: components["schemas"]["IssueSystemFieldEnum"];
      filter: components["schemas"]["SystemFieldSearchFilter"];
    };
    IssueFieldOrder: {
      className: string;
    } & (components["schemas"]["IssueFieldOrder.Custom"] | components["schemas"]["IssueFieldOrder.System"]);
    "IssueFieldOrder.Custom": {
      field: components["schemas"]["CustomField"];
    };
    "IssueFieldOrder.System": {
      field?: components["schemas"]["IssueSystemFieldEnum"];
    };
    IssueFieldOrderIn: {
      className: string;
    } & (components["schemas"]["IssueFieldOrderIn.Custom"] | components["schemas"]["IssueFieldOrderIn.System"]);
    "IssueFieldOrderIn.Custom": {
      id: string;
      scope: components["schemas"]["ExtendedTypeScope"];
    };
    "IssueFieldOrderIn.System": {
      field: components["schemas"]["IssueSystemFieldEnum"];
    };
    IssueFieldVisibility: {
      field?: components["schemas"]["IssueSystemFieldEnum"];
      visible: boolean;
    };
    IssueFilterValue: {
      issue?: components["schemas"]["IssueIdentifier"];
    };
    IssueImportResult: {
      message: string;
      created?: (components["schemas"]["IssueImportResultItem"])[] | null;
      updated?: (components["schemas"]["IssueImportResultItem"])[] | null;
      skipped?: (components["schemas"]["IssueImportResultItem"])[] | null;
      missingAttributes?: (string)[] | null;
    };
    IssueImportResultItem: {
      externalId?: string | null;
      issue?: components["schemas"]["Issue"];
      error?: string | null;
    };
    IssueImportTransactionWebhookEvent: {
      meta: components["schemas"]["KMetaMod"];
      importTransaction: components["schemas"]["ImportTransactionRecord"];
    };
    IssueLinkedToCodeReview: {
      review: components["schemas"]["CodeReviewRecord"];
      issuePrefix: string;
      issueId: string;
    };
    IssueLinkedToCommit: {
      project: components["schemas"]["PR_Project"];
      repositoryId: string;
      repositoryName: string;
      commit: components["schemas"]["GitCommitInfo"];
      commitChanges?: components["schemas"]["GitCommitChanges"];
      commitUrl: string;
      issuePrefix: string;
      issueId: string;
    };
    IssueListCFInputValue: {
      issues: (components["schemas"]["IssueIdentifier"])[];
    };
    IssueListCFType: Record<string, never>;
    IssueListCFValue: {
      issues: (components["schemas"]["Issue"])[];
    };
    IssueMCExtension: Record<string, never>;
    IssueMentionedDetails: {
      message: components["schemas"]["ChannelItemSnapshot"];
    };
    IssueMenuActionContext: {
      projectIdentifier: components["schemas"]["ProjectIdentifier"];
      issueIdentifier: components["schemas"]["IssueIdentifier"];
    };
    IssueMenuItemUiExtensionApi: {
      displayName: string;
      description?: string | null;
      menuItemUniqueCode: string;
      visibilityFilters: (components["schemas"]["IssueMenuItemVisibilityFilterApi"])[];
    };
    IssueMenuItemUiExtensionIn: {
      displayName: string;
      description?: string | null;
      menuItemUniqueCode: string;
      visibilityFilters: (components["schemas"]["IssueMenuItemVisibilityFilterIn"])[];
    };
    IssueMenuItemVisibilityFilterApi: {
      className: string;
    } & components["schemas"]["IssueEditableByMe"];
    IssueMenuItemVisibilityFilterIn: {
      className: string;
    } & components["schemas"]["IssueEditableByMe"];
    IssueSearchExpression: {
      className: string;
    } & (components["schemas"]["IssueSearchExpression.And"] | components["schemas"]["IssueSearchExpression.FieldFilter"] | components["schemas"]["IssueSearchExpression.Not"] | components["schemas"]["IssueSearchExpression.Or"]);
    "IssueSearchExpression.And": {
      subExpressions: (components["schemas"]["IssueSearchExpression"])[];
    };
    "IssueSearchExpression.FieldFilter": {
      fieldFilter: components["schemas"]["IssueFieldFilter"];
    };
    "IssueSearchExpression.Not": {
      operand: components["schemas"]["IssueSearchExpression"];
    };
    "IssueSearchExpression.Or": {
      subExpressions: (components["schemas"]["IssueSearchExpression"])[];
    };
    IssueStatus: {
      id: string;
      archived: boolean;
      name: string;
      resolved: boolean;
      color: string;
    };
    IssueStatusChangedDetails: {
      oldStatus: components["schemas"]["IssueStatus"];
      newStatus: components["schemas"]["IssueStatus"];
    };
    IssueStatusData: {
      existingId?: string | null;
      name: string;
      resolved: boolean;
      color: string;
      originalStatus?: components["schemas"]["IssueStatus"];
    };
    IssueStatusFilterValue: {
      name: string;
      color: string;
    };
    IssueStatusIn: {
      className: string;
    } & (components["schemas"]["IssueStatusIn.Id"] | components["schemas"]["IssueStatusIn.Name"] | components["schemas"]["IssueStatusIn.Resolved"]);
    "IssueStatusIn.Id": {
      id: string;
    };
    "IssueStatusIn.Name": {
      name: string;
    };
    "IssueStatusIn.Resolved": {
      value: components["schemas"]["ResolvedOption"];
    };
    IssueStatusWithUsages: {
      status: components["schemas"]["IssueStatus"];
      /** Format: int32 */
      usages: number;
    };
    IssueTagsChangedDetails: {
      addedTags?: (components["schemas"]["PlanningTag"])[] | null;
      removedTags?: (components["schemas"]["PlanningTag"])[] | null;
    };
    IssueTitleChangedDetails: {
      oldTitle: string;
      newTitle: string;
    };
    IssueTracker: {
      id: string;
      archived: boolean;
      name: string;
      fields: (components["schemas"]["IssueFieldOrder"])[];
      systemIssueFieldVisibilities: (components["schemas"]["IssueFieldVisibility"])[];
    };
    IssueUnfurlContext: {
      issueId: string;
    };
    IssueWebhookCustomFieldUpdate: {
      customField: components["schemas"]["CustomField"];
      mod?: {
        old: components["schemas"]["CFValue"];
        new: components["schemas"]["CFValue"];
      } | null;
    };
    IssueWebhookEvent: {
      meta: components["schemas"]["KMetaMod"];
      issue: components["schemas"]["Issue"];
      title?: {
        old: string;
        new: string;
      } | null;
      description?: {
        old: string;
        new: string;
      } | null;
      assignee?: {
        old: components["schemas"]["TD_MemberProfile"];
        new: components["schemas"]["TD_MemberProfile"];
      } | null;
      status?: {
        old: components["schemas"]["IssueStatus"];
        new: components["schemas"]["IssueStatus"];
      } | null;
      dueDate?: {
        /** Format: full-date */
        old: string;
        /** Format: full-date */
        new: string;
      } | null;
      tagDelta?: {
        old: (components["schemas"]["PlanningTag"])[];
        new: (components["schemas"]["PlanningTag"])[];
      } | null;
      checklistDelta?: {
        old: (components["schemas"]["Checklist"])[];
        new: (components["schemas"]["Checklist"])[];
      } | null;
      sprintDelta?: {
        old: (components["schemas"]["SprintRecord"])[];
        new: (components["schemas"]["SprintRecord"])[];
      } | null;
      customFieldUpdate?: components["schemas"]["IssueWebhookCustomFieldUpdate"];
      deleted?: {
        old: boolean;
        new: boolean;
      } | null;
    };
    IssuesWidgetSettingsDTO: {
      selectedFilterId: string;
    };
    JobDTO: {
      id: string;
      name: string;
      repoName: string;
      repository: components["schemas"]["RepositoryInProject"];
      archive: boolean;
    };
    JobExecutionDTO: {
      executionId: string;
      /** Format: int64 */
      executionNumber: number;
      jobId: string;
      jobName: string;
      projectId: string;
      branch: string;
      status: components["schemas"]["ExecutionStatus"];
      /** Format: int64 */
      triggeredTime: number;
      /** Format: int64 */
      startedTime?: number | null;
      /** Format: int64 */
      finishedTime?: number | null;
      /** Format: int32 */
      changesCount: number;
      failureConditions: (components["schemas"]["FailureConditionDTO"])[];
      commitId?: string | null;
    };
    JobExecutionTrigger: {
      className: string;
    } & (components["schemas"]["JobExecutionTrigger.CodeReviewClosed"] | components["schemas"]["JobExecutionTrigger.CodeReviewOpened"] | components["schemas"]["JobExecutionTrigger.GitBranchDeleted"] | components["schemas"]["JobExecutionTrigger.GitPush"] | components["schemas"]["JobExecutionTrigger.Manual"] | components["schemas"]["JobExecutionTrigger.SafeMerge"] | components["schemas"]["JobExecutionTrigger.Schedule"]);
    "JobExecutionTrigger.CodeReviewClosed": {
      reviewId: string;
    };
    "JobExecutionTrigger.CodeReviewOpened": {
      reviewId: string;
    };
    "JobExecutionTrigger.GitBranchDeleted": {
      branches: (string)[];
    };
    "JobExecutionTrigger.GitPush": {
      commit: string;
    };
    "JobExecutionTrigger.Manual": {
      principal: components["schemas"]["CPrincipal"];
    };
    "JobExecutionTrigger.SafeMerge": {
      principal: components["schemas"]["CPrincipal"];
    };
    "JobExecutionTrigger.Schedule": Record<string, never>;
    JobParameter: {
      name: string;
      value: string;
    };
    JobSubscription: {
      id: string;
      jobId: string;
      project: components["schemas"]["PR_Project"];
      state: components["schemas"]["JobSubscriptionState"];
      archived: boolean;
    };
    JobSubscriptionState: {
      type: components["schemas"]["JobSubscriptionType"];
      containsMyCommit: boolean;
      runByMe: boolean;
    };
    KB_Article: {
      id: string;
      archived: boolean;
      title: string;
      book: components["schemas"]["KB_Book"];
      folder: components["schemas"]["KB_Folder"];
      documentId: string;
      documentRef: components["schemas"]["Document"];
      /** Format: date-time */
      created: string;
      createdBy?: components["schemas"]["CPrincipal"];
      /** Format: date-time */
      updated: string;
      updatedBy?: components["schemas"]["CPrincipal"];
      alias: string;
    };
    KB_Book: {
      id: string;
      archived: boolean;
      name: string;
      summary: string;
      /** Format: int64 */
      updated: number;
      updatedBy?: components["schemas"]["CPrincipal"];
      alias: string;
      contexts?: (components["schemas"]["KB_BookContext"])[] | null;
      project?: components["schemas"]["PR_Project"];
      rootFolder: components["schemas"]["KB_Folder"];
    };
    KB_BookContext: {
      className: string;
    } & (components["schemas"]["KbNoneContext"] | components["schemas"]["KbProjectContext"]);
    KB_Folder: {
      id: string;
      archived: boolean;
      name: string;
      parent?: components["schemas"]["KB_Folder"];
      subfolders: (components["schemas"]["KB_Folder"])[];
      articles: (components["schemas"]["KB_Article"])[];
      book: components["schemas"]["KB_Book"];
      cover?: components["schemas"]["KB_Article"];
      alias: string;
      /** Format: date-time */
      created: string;
      createdBy?: components["schemas"]["CPrincipal"];
      /** Format: date-time */
      updated: string;
      updatedBy?: components["schemas"]["CPrincipal"];
    };
    KMetaMod: {
      principal: components["schemas"]["CPrincipal"];
      /** Format: date-time */
      timestamp: string;
      method: string;
    };
    KbNoneContext: Record<string, never>;
    KbProjectContext: {
      project: components["schemas"]["PR_Project"];
    };
    KotlinPlatform: {
      name: string;
      targets: (string)[];
    };
    LastChanges: {
      lastChanges: (components["schemas"]["RevisionInfo"])[];
      /** Format: int32 */
      totalChanges: number;
    };
    LaunchResult: {
      className: string;
    } & (components["schemas"]["LaunchResult.Error"] | components["schemas"]["LaunchResult.Success"]);
    "LaunchResult.Error": {
      message: string;
    };
    "LaunchResult.Success": {
      executionId: string;
    };
    LdapRegisterNewUserRule: {
      userType: components["schemas"]["RegisterNewUserType"];
      allowed: boolean;
    };
    LightGuestType: Record<string, never>;
    LineEndingDiff: {
      old: components["schemas"]["LineEnding"];
      new: components["schemas"]["LineEnding"];
    };
    LinkPreview: Record<string, never>;
    ListCommandsPayload: {
      clientId: string;
      userId?: string | null;
      verificationToken?: string | null;
    };
    LocalCodeDiscussionAnchorIn: {
      revision: string;
      filename: string;
      /** Format: int32 */
      line?: number | null;
      /** Format: int32 */
      oldLine?: number | null;
    };
    LocationCFFilter: {
      values: (components["schemas"]["LocationCFInputValue"])[];
    };
    LocationCFInputValue: {
      location?: string | null;
    };
    LocationCFType: Record<string, never>;
    LocationCFValue: {
      location?: components["schemas"]["TD_Location"];
    };
    LocationEvent: {
      meta: components["schemas"]["KMetaMod"];
      location: components["schemas"]["TD_Location"];
    };
    M2AbsenceItemApproveDeletedContent: {
      absence: components["schemas"]["AbsenceRecord"];
      by: components["schemas"]["TD_MemberProfile"];
      approve: boolean;
    };
    M2AbsenceItemApprovedContent: {
      absence: components["schemas"]["AbsenceRecord"];
      by: components["schemas"]["TD_MemberProfile"];
      approve: boolean;
    };
    M2AbsenceItemContent: {
      absence: components["schemas"]["AbsenceRecord"];
      by?: components["schemas"]["TD_MemberProfile"];
    };
    M2AbsenceItemDeletedContent: {
      absence: components["schemas"]["AbsenceRecord"];
      by?: components["schemas"]["TD_MemberProfile"];
    };
    M2AbsenceItemUpdatedContent: {
      absence: components["schemas"]["AbsenceRecord"];
      reason?: {
        old: components["schemas"]["AbsenceReasonRecord"];
        new: components["schemas"]["AbsenceReasonRecord"];
      } | null;
      description?: {
        old: string;
        new: string;
      } | null;
      since?: {
        /** Format: full-date */
        old: string;
        /** Format: full-date */
        new: string;
      } | null;
      till?: {
        /** Format: full-date */
        old: string;
        /** Format: full-date */
        new: string;
      } | null;
      by?: components["schemas"]["TD_MemberProfile"];
    };
    M2BlogItemContent: {
      article: components["schemas"]["ArticleRecord"];
      articleContent: components["schemas"]["ArticleContentRecord"];
      articleDetails: components["schemas"]["ArticleDetailsRecord"];
      articleChannel: components["schemas"]["ArticleChannelRecord"];
    };
    M2BlogItemContentDetails: {
      className: string;
    } & (components["schemas"]["M2BlogItemPreview"] | components["schemas"]["M2BlogItemContent"]);
    M2BlogItemPreview: {
      article: components["schemas"]["ArticleRecord"];
      articlePreview: components["schemas"]["ArticlePreviewRecord"];
      articleDetails: components["schemas"]["ArticleDetailsRecord"];
      articleChannel: components["schemas"]["ArticleChannelRecord"];
    };
    M2ChannelAIAssistanceInfo: {
      sessionId: string;
      sessionName: string;
      llmProvider: string;
    };
    M2ChannelArchivedItemDetails: Record<string, never>;
    M2ChannelAutomationJobFeedInfo: {
      jobSubscription: components["schemas"]["JobSubscription"];
      jobName: string;
      repoName?: string | null;
      notificationDefaults: components["schemas"]["ChannelSpecificDefaults"];
    };
    M2ChannelContact: {
      defaultName: string;
      key: string;
      ext?: components["schemas"]["M2ChannelContactInfo"];
    };
    M2ChannelContactArticle: {
      article: components["schemas"]["ArticleRecord"];
      notificationDefaults: components["schemas"]["ChannelSpecificDefaults"];
    };
    M2ChannelContactCallDiscussion: {
      session: components["schemas"]["CallSession"];
      notificationDefaults: components["schemas"]["ChannelSpecificDefaults"];
    };
    M2ChannelContactInfo: {
      className: string;
    } & (components["schemas"]["M2ChannelAutomationJobFeedInfo"] | components["schemas"]["M2ChannelAIAssistanceInfo"] | components["schemas"]["M2SharedChannelContent"] | components["schemas"]["M2ChannelContentApplication"] | components["schemas"]["M2ChannelContentMember"] | components["schemas"]["M2ChannelContactObsolete"] | components["schemas"]["M2ChannelContentNamedPrivateChannel"] | components["schemas"]["DeploymentM2ChannelInfo"] | components["schemas"]["M2ChannelRdWsTimelineInfo"] | components["schemas"]["M2ChannelContactArticle"] | components["schemas"]["DeploymentTargetM2ChannelInfo"] | components["schemas"]["M2PrivateConversationChannelContent"] | components["schemas"]["SpaceNewsFeedChannel"] | components["schemas"]["M2ChannelContentCodeDiscussion"] | components["schemas"]["M2ChannelIssueInfo"] | components["schemas"]["M2ChannelContentCodeDiscussionInReview"] | components["schemas"]["M2ChannelContactThread"] | components["schemas"]["M2ChannelContentCodeReviewDiscussion"] | components["schemas"]["M2ChannelContactCallDiscussion"] | components["schemas"]["M2ChannelContentCodeReviewFeed"] | components["schemas"]["BillingFeedChannel"]);
    M2ChannelContactObsolete: {
      cause?: components["schemas"]["M2ObsoleteCause"];
    };
    M2ChannelContactThread: {
      parent: components["schemas"]["M2ChannelRecord"];
      text?: string | null;
      messageId: string;
      messageAuthor?: components["schemas"]["CPrincipal"];
      attachments?: string | null;
    };
    M2ChannelContentApplication: {
      app: components["schemas"]["ES_App"];
      notificationDefaults: components["schemas"]["ChannelSpecificDefaults"];
    };
    M2ChannelContentArticle: {
      article: components["schemas"]["ArticleRecord"];
      articleContent: components["schemas"]["ArticleContentRecord"];
      details?: components["schemas"]["ArticleDetailsRecord"];
      channel?: components["schemas"]["ArticleChannelRecord"];
    };
    M2ChannelContentCallDiscussion: {
      session: components["schemas"]["CallSession"];
    };
    M2ChannelContentCodeDiscussion: {
      codeDiscussionId: string;
      notificationDefaults: components["schemas"]["ChannelSpecificDefaults"];
      codeDiscussion?: components["schemas"]["CodeDiscussionRecord"];
    };
    M2ChannelContentCodeDiscussionInReview: {
      notificationDefaults: components["schemas"]["ChannelSpecificDefaults"];
      codeDiscussion: components["schemas"]["CodeDiscussionRecord"];
      parent: components["schemas"]["M2ChannelRecord"];
      messageId: string;
    };
    M2ChannelContentCodeReviewDiscussion: {
      codeReviewDiscussion: string;
      notificationDefaults: components["schemas"]["ChannelSpecificDefaults"];
    };
    M2ChannelContentCodeReviewFeed: {
      codeReviewId: string;
      notificationDefaults: components["schemas"]["ChannelSpecificDefaults"];
      codeReview?: components["schemas"]["CodeReviewRecord"];
      participants?: components["schemas"]["CodeReviewParticipants"];
      pendingMessageCounter?: components["schemas"]["CodeReviewPendingMessageCounter"];
      project?: components["schemas"]["PR_Project"];
    };
    M2ChannelContentInfo: {
      className: string;
    } & (components["schemas"]["M2ChannelContentThread"] | components["schemas"]["M2ChannelAutomationJobFeedInfo"] | components["schemas"]["M2ChannelAIAssistanceInfo"] | components["schemas"]["M2SharedChannelContent"] | components["schemas"]["M2ChannelContentApplication"] | components["schemas"]["M2ChannelContentMember"] | components["schemas"]["M2ChannelContactObsolete"] | components["schemas"]["M2ChannelContentNamedPrivateChannel"] | components["schemas"]["DeploymentM2ChannelInfo"] | components["schemas"]["M2ChannelRdWsTimelineInfo"] | components["schemas"]["M2ChannelContentArticle"] | components["schemas"]["DeploymentTargetM2ChannelInfo"] | components["schemas"]["M2PrivateConversationChannelContent"] | components["schemas"]["SpaceNewsFeedChannel"] | components["schemas"]["M2ChannelContentCodeDiscussion"] | components["schemas"]["M2ChannelIssueInfo"] | components["schemas"]["M2ChannelContentCallDiscussion"] | components["schemas"]["M2ChannelContentCodeReviewDiscussion"] | components["schemas"]["M2ChannelContentCodeReviewFeed"] | components["schemas"]["BillingFeedChannel"]);
    M2ChannelContentMember: {
      member: components["schemas"]["TD_MemberProfile"];
      notificationDefaults: components["schemas"]["ChannelSpecificDefaults"];
      memberTeams?: components["schemas"]["ProfileMembershipRecord"];
    };
    M2ChannelContentNamedPrivateChannel: {
      name: string;
      notificationDefaults?: components["schemas"]["ChannelSpecificDefaults"];
      canHaveThreads: boolean;
      color?: components["schemas"]["PrivateFeedColor"];
      icon?: string | null;
    };
    M2ChannelContentRecord: {
      id: string;
      content?: components["schemas"]["M2ChannelContentInfo"];
    };
    M2ChannelContentThread: {
      record: components["schemas"]["ChannelItemRecord"];
      parent: components["schemas"]["M2ChannelRecord"];
    };
    M2ChannelCreatedItemDetails: Record<string, never>;
    M2ChannelFeedIntroItemDetails: Record<string, never>;
    M2ChannelIssueInfo: {
      projectKey?: components["schemas"]["ProjectKey"];
      issue: components["schemas"]["Issue"];
      notificationDefaults: components["schemas"]["ChannelSpecificDefaults"];
    };
    M2ChannelRdWsTimelineInfo: {
      notificationDefaults: components["schemas"]["ChannelSpecificDefaults"];
      workspaceId: string;
      workspaceName: string;
    };
    M2ChannelRecord: {
      id: string;
      contact: components["schemas"]["M2ChannelContact"];
      /** Format: int32 */
      totalMessages: number;
      lastMessage?: components["schemas"]["MessageInfo"];
      participants?: (components["schemas"]["ChannelParticipant"])[] | null;
      channelArchived?: boolean | null;
      archived: boolean;
      pinnedMessages?: (components["schemas"]["ChannelItemRecord"])[] | null;
      content?: components["schemas"]["M2ChannelContentInfo"];
    };
    M2ChannelRestoredItemDetails: Record<string, never>;
    M2DraftEditorAddedItemContent: {
      id: string;
      title: string;
    };
    M2DraftEditorTeamAddedItemContent: {
      id: string;
      team: components["schemas"]["TD_Team"];
      title: string;
    };
    M2ExternalStatusFailureItemContent: {
      projectId?: string | null;
      repository: string;
      branch: string;
      revisionInfo?: components["schemas"]["RevisionAuthorInfo"];
      changesInfo?: components["schemas"]["LastChanges"];
      url: string;
      externalServiceName: string;
      taskName: string;
      /** Format: int64 */
      timestamp?: number | null;
      description?: string | null;
    };
    M2ExternalStatusSucceedItemContent: {
      projectId?: string | null;
      repository: string;
      branch: string;
      revisionInfo?: components["schemas"]["RevisionAuthorInfo"];
      changesInfo?: components["schemas"]["LastChanges"];
      url: string;
      externalServiceName: string;
      taskName: string;
      /** Format: int64 */
      timestamp?: number | null;
      description?: string | null;
    };
    M2ItemContentDetails: {
      className: "M2ItemContentDetails";
      className: string;
    } & (components["schemas"]["M2AbsenceItemApprovedContent"] | components["schemas"]["M2LiveTypedContent"] | components["schemas"]["M2AbsenceItemDeletedContent"] | components["schemas"]["M2DraftEditorAddedItemContent"] | components["schemas"]["TeamAddedItemDetails"] | components["schemas"]["VideoCallChannelItemContent"] | components["schemas"]["M2AbsenceItemApproveDeletedContent"] | components["schemas"]["IssueCodeChangesMCExtension"] | components["schemas"]["DeploymentM2DetailsWithThread"] | components["schemas"]["M2PackageDeletedDetails"] | components["schemas"]["M2PackageCreatedDetails"] | components["schemas"]["M2BlogItemPreview"] | components["schemas"]["M2BlogItemContent"] | components["schemas"]["StickerContentDetails"] | Omit<components["schemas"]["M2MemberContent"], "className"> | components["schemas"]["M2MemberJoinsContent"] | components["schemas"]["M2MemberLeavesContent"] | components["schemas"]["M2UserLeftChannel"] | components["schemas"]["RdWarmupM2ItemContentDetails"] | components["schemas"]["M2AbsenceItemContent"] | components["schemas"]["M2MaintenanceActionContent"] | components["schemas"]["M2ExternalStatusSucceedItemContent"] | components["schemas"]["M2TextItemContent"] | components["schemas"]["M2ChannelArchivedItemDetails"] | components["schemas"]["M2PollContent"] | components["schemas"]["DeploymentM2DetailsNoThread"] | components["schemas"]["M2AbsenceItemUpdatedContent"] | components["schemas"]["MergeRequestMergedEvent"] | components["schemas"]["ReviewRevisionsChangedEvent"] | components["schemas"]["CodeAnalysisCompletedFeedEvent"] | components["schemas"]["MergeRequestBranchRestoredEvent"] | components["schemas"]["ReviewCompletionStateChangedEvent"] | components["schemas"]["ReviewTitleChangedEvent"] | components["schemas"]["ReviewerChangedEvent"] | components["schemas"]["CodeDiscussionAddedFeedEvent"] | components["schemas"]["ReviewBranchTrackEvent"] | components["schemas"]["ReviewStateChangedEvent"] | components["schemas"]["CodeReviewDiscussionAddedFeedEvent"] | components["schemas"]["ReviewCreatedEvent"] | components["schemas"]["MergeRequestBranchDeletedEvent"] | components["schemas"]["CodeSuggestedEditHeadContentDetails"] | components["schemas"]["M2ChannelCreatedItemDetails"] | components["schemas"]["M2ExternalStatusFailureItemContent"] | components["schemas"]["DeployTargetChangedMCExtension"] | components["schemas"]["MembersAddedItemDetails"] | components["schemas"]["IssueStatusChangedDetails"] | components["schemas"]["IssueChecklistsChangedDetails"] | components["schemas"]["IssueDeletedDetails"] | components["schemas"]["IssueDescriptionChangedDetails"] | components["schemas"]["IssueMentionedDetails"] | components["schemas"]["IssueTagsChangedDetails"] | components["schemas"]["IssueAssigneeChangedDetails"] | components["schemas"]["IssueDueDateChangedDetails"] | components["schemas"]["IssueAttachmentsChangedDetails"] | components["schemas"]["IssueTitleChangedDetails"] | components["schemas"]["IssueCreatedDetails"] | components["schemas"]["IssueMCExtension"] | components["schemas"]["M2TaskExecutionFailureItemContent"] | components["schemas"]["M2ChannelFeedIntroItemDetails"] | components["schemas"]["MembershipMCExtension"] | Omit<components["schemas"]["M2MembershipContent"], "className"> | components["schemas"]["M2MembershipRequestedContent"] | components["schemas"]["M2MembershipTerminatedContent"] | components["schemas"]["M2MembershipCreatedContent"] | components["schemas"]["MCMessage"] | components["schemas"]["M2TaskExecutionSucceedItemContent"] | components["schemas"]["M2DraftEditorTeamAddedItemContent"] | components["schemas"]["MCMessageCommonDetails"] | components["schemas"]["M2ChannelRestoredItemDetails"]);
    M2LiveTypedContent: {
      session: string;
      message: string;
      completedText?: string | null;
      failed?: string | null;
      trace?: string | null;
    };
    M2MaintenanceActionContent: {
      action: string;
      success: boolean;
      details: string;
    };
    M2MemberContent: {
      className: "M2MemberContent";
      className: string;
    } & (Omit<components["schemas"]["M2MemberContent"], "className"> | components["schemas"]["M2MemberJoinsContent"] | components["schemas"]["M2MemberLeavesContent"] | Record<string, never>);
    M2MemberJoinsContent: {
      member: components["schemas"]["TD_MemberProfile"];
    };
    M2MemberLeavesContent: {
      member: components["schemas"]["TD_MemberProfile"];
    };
    M2MembershipContent: {
      className: "M2MembershipContent";
      className: string;
    } & (Omit<components["schemas"]["M2MembershipContent"], "className"> | components["schemas"]["M2MembershipRequestedContent"] | components["schemas"]["M2MembershipTerminatedContent"] | components["schemas"]["M2MembershipCreatedContent"] | Record<string, never>);
    M2MembershipCreatedContent: {
      membership: components["schemas"]["TD_Membership"];
    };
    M2MembershipRequestedContent: {
      membership: components["schemas"]["TD_Membership"];
      leave: boolean;
    };
    M2MembershipTerminatedContent: {
      membership: components["schemas"]["TD_Membership"];
    };
    M2PackageContentDetails: {
      className: string;
    } & (components["schemas"]["M2PackageDeletedDetails"] | components["schemas"]["M2PackageCreatedDetails"]);
    M2PackageCreatedDetails: {
      pkg: components["schemas"]["PackageVersionInfo"];
    };
    M2PackageDeletedDetails: {
      pkg: components["schemas"]["PackageVersionInfo"];
    };
    M2PollContent: {
      poll: components["schemas"]["PollRecord"];
    };
    M2PrivateConversationChannelContent: {
      channelId: string;
      subject?: string | null;
      members: (components["schemas"]["TD_MemberProfile"])[];
      notificationDefaults?: components["schemas"]["ChannelSpecificDefaults"];
    };
    M2SharedChannelContent: {
      name: string;
      group: string;
      access: components["schemas"]["M2.Access"];
      description: string;
      iconId?: string | null;
      notificationDefaults: components["schemas"]["ChannelSpecificDefaults"];
      teams?: (components["schemas"]["TD_Team"])[] | null;
      canEdit?: boolean | null;
      project?: components["schemas"]["PR_Project"];
    };
    M2TaskExecutionFailureItemContent: {
      taskExecutionId: string;
      taskExecutionName: string;
      repoName: string;
      branchName: string;
      commit: string;
      shortCommitMessage: string;
      project: components["schemas"]["ProjectKey"];
      /** Format: int64 */
      finishDateTime: number;
      triggerInfo: string;
      details: string;
    };
    M2TaskExecutionSucceedItemContent: {
      taskExecutionId: string;
      taskExecutionName: string;
      repoName: string;
      branchName: string;
      commit: string;
      shortCommitMessage: string;
      project: components["schemas"]["ProjectKey"];
      /** Format: int64 */
      finishDateTime: number;
      triggerInfo: string;
      details: string;
    };
    M2TextItemContent: {
      markdown?: boolean | null;
      mentions?: (components["schemas"]["EntityMention"])[] | null;
    };
    M2UnreadStatus: {
      unread: boolean;
      /** Format: int32 */
      counter: number;
      id: string;
    };
    M2UserLeftChannel: Record<string, never>;
    MCAction: {
      id: string;
      value: string;
      clientSideAction?: components["schemas"]["MCClientSideAction"];
    };
    MCBaseButton: {
      className: string;
    } & (components["schemas"]["MCButton"] | components["schemas"]["MCDropDownButton"]);
    MCButton: {
      text: string;
      style?: components["schemas"]["MessageButtonStyle"];
      action: components["schemas"]["MCAction"];
      disabled?: boolean | null;
    };
    MCButtonDropDownItem: {
      action: components["schemas"]["MCAction"];
      text: string;
      icon?: components["schemas"]["ApiIcon"];
    };
    MCClientSideAction: {
      context?: components["schemas"]["ClientSideActionContext"];
    };
    MCDetailsWithElements: {
      className: string;
    } & (components["schemas"]["MCParagraph"] | components["schemas"]["MCGroup"] | components["schemas"]["MCSection"]);
    MCDetailsWithInlineElements: {
      className: string;
    } & components["schemas"]["MCOutlineV2"];
    MCDivider: Record<string, never>;
    MCDropDownButton: {
      text: string;
      style?: components["schemas"]["MessageButtonStyle"];
      dropdownItems: (components["schemas"]["MCButtonDropDownItem"])[];
      disabled?: boolean | null;
    };
    MCElement: {
      defaultText: string;
      details?: components["schemas"]["MCElementDetails"];
    };
    MCElementDetails: {
      className: string;
    } & (components["schemas"]["MCInlineGroup"] | components["schemas"]["MCText"] | components["schemas"]["MCImage"] | components["schemas"]["MCDivider"] | components["schemas"]["MCIcon"] | components["schemas"]["MCButton"] | components["schemas"]["MCDropDownButton"] | components["schemas"]["MCTag"] | components["schemas"]["MCParagraph"] | components["schemas"]["MCGroup"] | components["schemas"]["MCSection"] | components["schemas"]["MCFields"]);
    MCFields: {
      fields: ({
          first?: components["schemas"]["MCElement"];
          second?: components["schemas"]["MCElement"];
        })[];
    };
    MCGroup: {
      elements: (components["schemas"]["MCElement"])[];
    };
    MCIcon: {
      name: string;
      style?: components["schemas"]["MessageStyle"];
    };
    MCImage: {
      src: string;
    };
    MCInlineElement: {
      defaultText: string;
      details?: components["schemas"]["MCInlineElementDetails"];
    };
    MCInlineElementDetails: {
      className: string;
    } & (components["schemas"]["MCIcon"] | components["schemas"]["MCButton"] | components["schemas"]["MCDropDownButton"] | components["schemas"]["MCTag"] | components["schemas"]["MCOutlineV2"] | components["schemas"]["MCTimestamp"] | components["schemas"]["MCInlineText"]);
    MCInlineGroup: {
      elements: (components["schemas"]["MCInlineElement"])[];
      accessory?: components["schemas"]["MCElement"];
      textSize?: components["schemas"]["MessageTextSize"];
    };
    MCInlineText: {
      content: string;
      markdown: boolean;
      style?: components["schemas"]["MessageStyle"];
    };
    MCMessage: {
      style?: components["schemas"]["MessageStyle"];
      outline?: components["schemas"]["MCOutline"];
      content: (components["schemas"]["MCElement"])[];
      extension?: components["schemas"]["M2ItemContentDetails"];
    };
    MCMessageCommonDetails: Record<string, never>;
    MCOutline: {
      className: string;
    } & (components["schemas"]["MCOutlineV2"] | components["schemas"]["MCOutlineLegacy"]);
    MCOutlineLegacy: {
      icon?: components["schemas"]["MCElement"];
      text?: components["schemas"]["MCText"];
    };
    MCOutlineV2: {
      elements: (components["schemas"]["MCInlineElement"])[];
    };
    MCParagraph: {
      accessory?: components["schemas"]["MCElement"];
      elements: (components["schemas"]["MCElement"])[];
    };
    MCSection: {
      elements: (components["schemas"]["MCElement"])[];
      style?: components["schemas"]["MessageStyle"];
      header?: components["schemas"]["MCText"];
      footer?: components["schemas"]["MCText"];
    };
    MCTag: {
      text: string;
      style?: components["schemas"]["MessageStyle"];
    };
    MCText: {
      content: string;
      markdown: boolean;
      accessory?: components["schemas"]["MCElement"];
      style?: components["schemas"]["MessageStyle"];
      size?: components["schemas"]["MessageTextSize"];
    };
    MCTextOrInline: Record<string, never>;
    MCTimestamp: {
      /** Format: int64 */
      ts: number;
      style?: components["schemas"]["MessageStyle"];
      format?: components["schemas"]["MessageTimestampFormat"];
      strikethrough: boolean;
    };
    MarketplaceAppMetadata: {
      marketplaceAppId: string;
      lastSentServerUrl: string;
      connectionStatus: components["schemas"]["AppConnectionStatus"];
      uninstallationStatus?: components["schemas"]["AppUninstallationStatus"];
      /** Format: date-time */
      uninstallationStartedAt?: string | null;
    };
    MavenChecksum: {
      algorithm: string;
      value: string;
    };
    MavenCoordinates: {
      groupId: string;
      artifactId: string;
      version: string;
    };
    MavenPackageDependency: {
      scope: string;
      group: string;
      artifact: string;
      version?: string | null;
    };
    MavenPackageFile: {
      name: string;
      /** Format: int64 */
      created: number;
      /** Format: int64 */
      length: number;
      checksums: (components["schemas"]["MavenChecksum"])[];
    };
    MavenPackageParent: {
      group: string;
      artifact: string;
      version: string;
    };
    MavenPackageType: {
      id: string;
    };
    MavenPackageVersionDetails: {
      type: components["schemas"]["PackageType"];
      repository: string;
      name: string;
      version: string;
      tags?: (string)[] | null;
      /** Format: int64 */
      created: number;
      /** Format: int64 */
      accessed?: number | null;
      /** Format: int64 */
      downloads: number;
      pinned: boolean;
      comment?: string | null;
      /** Format: int64 */
      diskSize: number;
      author?: components["schemas"]["CPrincipal"];
      authors?: (components["schemas"]["CPrincipal"])[] | null;
      origin?: components["schemas"]["PackageOrigin"];
      metadata?: ({
        [key: string]: string | undefined;
      }) | null;
      packaging?: string | null;
      packageName?: string | null;
      description?: string | null;
      url?: string | null;
      licenses: (string)[];
      scmUrl?: string | null;
      dependencies: (components["schemas"]["MavenPackageDependency"])[];
      kotlinPlatforms?: (components["schemas"]["KotlinPlatform"])[] | null;
      parent?: components["schemas"]["MavenPackageParent"];
      pathPrefix?: string | null;
      files: (components["schemas"]["MavenPackageFile"])[];
    };
    MavenRepositoryConnectionSettings: {
      nexusStagingProfile?: components["schemas"]["NexusStagingProfile"];
    };
    MdMarkup: {
      unfurl: (components["schemas"]["Unfurl"])[];
    };
    MdTextDocumentContent: {
      markdown: string;
    };
    MeCodeReviewParticipantRecord: {
      id: string;
      role?: components["schemas"]["CodeReviewParticipantRole"];
      theirTurn?: boolean | null;
      reviewerState?: components["schemas"]["ReviewerState"];
      isApproveSticky?: boolean | null;
      reviewOnlyOwnedFiles?: boolean | null;
      review: components["schemas"]["CodeReviewRecord"];
      participants: components["schemas"]["CodeReviewParticipants"];
      pendingCounter: components["schemas"]["CodeReviewPendingMessageCounter"];
      archived: boolean;
    };
    MediaAttachment: {
      className: string;
    } & (components["schemas"]["VideoAttachment"] | components["schemas"]["ImageAttachment"]);
    MeetingAttachment: {
      fileUrl?: string | null;
      title?: string | null;
      mimeType?: string | null;
      fileId?: string | null;
      source?: string | null;
      iconLink?: string | null;
    };
    MeetingMenuActionContext: {
      meetingId: string;
    };
    MeetingMenuItemUiExtensionApi: {
      displayName: string;
      description?: string | null;
      menuItemUniqueCode: string;
    };
    MeetingMenuItemUiExtensionIn: {
      displayName: string;
      description?: string | null;
      menuItemUniqueCode: string;
    };
    MeetingModWebhookEvent: {
      meta: components["schemas"]["KMetaMod"];
      meeting: components["schemas"]["DTO_Meeting"];
    };
    MeetingOccurrenceTime: {
      /** Format: date-time */
      start: string;
      /** Format: date-time */
      end: string;
    };
    MeetingOrganizer: {
      className: string;
    } & (components["schemas"]["MeetingOrganizer.Application"] | components["schemas"]["MeetingOrganizer.ExternalUser"] | components["schemas"]["MeetingOrganizer.HiddenUser"] | components["schemas"]["MeetingOrganizer.User"]);
    "MeetingOrganizer.Application": {
      applicationRef?: components["schemas"]["ES_App"];
    };
    "MeetingOrganizer.ExternalUser": {
      email: string;
    };
    "MeetingOrganizer.HiddenUser": Record<string, never>;
    "MeetingOrganizer.User": {
      profileRef: components["schemas"]["TD_MemberProfile"];
    };
    MeetingRecord: {
      id: string;
      archived: boolean;
      /** Format: date-time */
      starts: string;
      /** Format: date-time */
      finishes: string;
      timezone?: components["schemas"]["ATimeZone"];
      allDay: boolean;
      rooms: (components["schemas"]["TD_Location"])[];
      participants: (components["schemas"]["Participant"])[];
      article?: components["schemas"]["ArticleRecord"];
    };
    MeetingWithOccurrenceTime: {
      meetingId: string;
      occurrenceTime: components["schemas"]["MeetingOccurrenceTime"];
    };
    MeetingsCommonSubscriptionFilter: {
      organizers?: (components["schemas"]["TD_MemberProfile"])[] | null;
      participants?: (components["schemas"]["TD_MemberProfile"])[] | null;
      teams?: (components["schemas"]["TD_Team"])[] | null;
      locations?: (components["schemas"]["TD_Location"])[] | null;
    };
    MeetingsCommonSubscriptionFilterIn: {
      organizers?: (string)[] | null;
      participants?: (string)[] | null;
      teams?: (string)[] | null;
      locations?: (string)[] | null;
    };
    MemberCommonSubscriptionFilter: {
      teams: (components["schemas"]["TD_Team"])[];
      locations: (components["schemas"]["TD_Location"])[];
      profiles?: (components["schemas"]["TD_MemberProfile"])[] | null;
    };
    MemberCommonSubscriptionFilterIn: {
      teams: (string)[];
      locations: (string)[];
      profiles?: (components["schemas"]["ProfileIdentifier"])[] | null;
    };
    MembersAddedItemDetails: {
      principals: (components["schemas"]["CPrincipal"])[];
      othersDisplayNames: (string)[];
    };
    MembershipEvent: {
      profile: components["schemas"]["TD_MemberProfile"];
      membership: (components["schemas"]["TD_Membership"])[];
    };
    MembershipMCExtension: Record<string, never>;
    MemoryAmount: {
      /** Format: int64 */
      bytes: number;
    };
    MenuActionContext: {
      className: string;
    } & (components["schemas"]["DocumentFolderMenuActionContext"] | components["schemas"]["ChannelMessageMenuActionContext"] | components["schemas"]["DocumentMenuActionContext"] | components["schemas"]["IssueMenuActionContext"] | components["schemas"]["BlogEventMenuActionContext"] | components["schemas"]["CodeReviewMenuActionContext"] | components["schemas"]["MeetingMenuActionContext"]);
    MenuActionPayload: {
      menuItemUniqueCode: string;
      context?: components["schemas"]["MenuActionContext"];
      clientId: string;
      userId: string;
      verificationToken?: string | null;
    };
    MenuItemUiExtensionApi: {
      className: string;
    } & (components["schemas"]["DocumentMenuItemUiExtensionApi"] | components["schemas"]["DocumentFolderMenuItemUiExtensionApi"] | components["schemas"]["MeetingMenuItemUiExtensionApi"] | components["schemas"]["ChatMessageMenuItemUiExtensionApi"] | components["schemas"]["CodeReviewMenuItemUiExtensionApi"] | components["schemas"]["IssueMenuItemUiExtensionApi"]);
    MenuItemUiExtensionIn: {
      className: string;
    } & (components["schemas"]["ChatMessageMenuItemUiExtensionIn"] | components["schemas"]["IssueMenuItemUiExtensionIn"] | components["schemas"]["CodeReviewMenuItemUiExtensionIn"] | components["schemas"]["DocumentFolderMenuItemUiExtensionIn"] | components["schemas"]["DocumentMenuItemUiExtensionIn"] | components["schemas"]["MeetingMenuItemUiExtensionIn"]);
    MergeRequestBranch: {
      displayName: string;
      ref: string;
      deleted: boolean;
      head?: string | null;
    };
    MergeRequestBranchDeletedEvent: {
      repository: string;
      branch: string;
      branchType: components["schemas"]["MergeRequestBranchType"];
    };
    MergeRequestBranchPair: {
      repositoryId?: string | null;
      repository: string;
      sourceBranch: string;
      targetBranch: string;
      sourceBranchRef: string;
      sourceBranchInfo?: components["schemas"]["MergeRequestBranch"];
      targetBranchInfo?: components["schemas"]["MergeRequestBranch"];
      isMerged?: boolean | null;
      isStale?: boolean | null;
    };
    MergeRequestBranchRestoredEvent: {
      repository: string;
      branch: string;
      branchType: components["schemas"]["MergeRequestBranchType"];
    };
    MergeRequestCodeIssueAnchor: {
      commitId: string;
      filePath: string;
      /** Format: int32 */
      line: number;
      /** Format: int32 */
      column?: number | null;
      /** Format: int32 */
      endLine?: number | null;
      /** Format: int32 */
      endColumn?: number | null;
    };
    MergeRequestCodeIssueStatsForLevel: {
      level: components["schemas"]["CodeIssueLevel"];
      /** Format: int32 */
      count: number;
    };
    MergeRequestCodeIssuesReport: {
      tool: string;
      /** Format: date-time */
      createdAt: string;
      commitId: string;
      runInProgress: boolean;
      issuesCountByLevel?: (components["schemas"]["MergeRequestCodeIssueStatsForLevel"])[] | null;
    };
    MergeRequestMergedEvent: {
      repository: string;
      sourceBranch: string;
      targetBranch: string;
    };
    MergeRequestRecord: {
      id: string;
      project: components["schemas"]["ProjectKey"];
      projectId: string;
      /** Format: int32 */
      number: number;
      title: string;
      state: components["schemas"]["CodeReviewState"];
      canBeReopened?: boolean | null;
      /** Format: int64 */
      createdAt: number;
      createdBy?: components["schemas"]["TD_MemberProfile"];
      /** Format: int64 */
      timestamp?: number | null;
      turnBased?: boolean | null;
      feedChannel?: components["schemas"]["M2ChannelRecord"];
      feedChannelId?: string | null;
      branchPairs: (components["schemas"]["MergeRequestBranchPair"])[];
      readOnly?: boolean | null;
      externalLink?: components["schemas"]["ExternalCodeReviewLink"];
      commits: (components["schemas"]["ReviewCommit"])[];
      description?: string | null;
      unfurls: (components["schemas"]["Attachment"])[];
      issueIds: (string)[];
      externalIssues?: (components["schemas"]["ExternalIssueIdOut"])[] | null;
      participants?: (components["schemas"]["CodeReviewParticipant"])[] | null;
      reviewers: (components["schemas"]["CodeReviewParticipantRecord"])[];
      authors: (components["schemas"]["CodeReviewParticipantRecord"])[];
      watchers: (components["schemas"]["CodeReviewParticipantRecord"])[];
      discussionCounter: components["schemas"]["DiscussionCounter"];
      reports: (components["schemas"]["MergeRequestCodeIssuesReport"])[];
    };
    MergeSelectOptions: {
      operation: components["schemas"]["MergeSelectOptions.Operation"];
      mergeMode: components["schemas"]["GitMergeMode"];
      rebaseMode: components["schemas"]["GitRebaseMode"];
      squashMode: components["schemas"]["GitSquashMode"];
      squashCommitMessage: string;
      deleteSourceBranch: boolean;
      targetStatusesForLinkedIssues: (components["schemas"]["TargetStatusForLinkedIssue"])[];
    };
    MessageAccessoryElement: {
      className: string;
    } & (components["schemas"]["MessageIcon"] | components["schemas"]["MessageImage"] | components["schemas"]["MessageTag"]);
    MessageAction: {
      className: string;
    } & (components["schemas"]["PostMessageAction"] | components["schemas"]["NavigateUrlAction"]);
    MessageActionPayload: {
      actionId: string;
      actionValue: string;
      message: components["schemas"]["MessageContext"];
      clientId: string;
      userId: string;
      verificationToken?: string | null;
    };
    MessageBlockElement: {
      className: string;
    } & (components["schemas"]["MessageFields"] | components["schemas"]["MessageText"] | components["schemas"]["MessageInlineGroup"] | components["schemas"]["MessageDivider"] | components["schemas"]["MessageControlGroup"]);
    MessageButton: {
      text: string;
      style: components["schemas"]["MessageButtonStyle"];
      action: components["schemas"]["MessageAction"];
      disabled?: boolean | null;
    };
    MessageContext: {
      messageId: string;
      channelId: string;
      messageData?: string | null;
      body?: components["schemas"]["ChatMessage"];
      attachments?: (components["schemas"]["Attachment"])[] | null;
      externalId?: string | null;
      createdTime: string;
    };
    MessageControlElement: {
      className: string;
    } & components["schemas"]["MessageButton"];
    MessageControlGroup: {
      elements: (components["schemas"]["MessageControlElement"])[];
    };
    MessageDivider: Record<string, never>;
    MessageField: {
      first: string;
      second: string;
    };
    MessageFieldElement: {
      className: string;
    } & (components["schemas"]["MessageFieldV2"] | components["schemas"]["MessageField"]);
    MessageFieldV2: {
      first: (components["schemas"]["MessageInlineElement"])[];
      second: (components["schemas"]["MessageInlineElement"])[];
    };
    MessageFields: {
      fields: (components["schemas"]["MessageFieldElement"])[];
      nameTextSize?: components["schemas"]["MessageTextSize"];
      valueTextSize?: components["schemas"]["MessageTextSize"];
    };
    MessageForImport: {
      authorPrincipalId: string;
      text: string;
      /** Format: int64 */
      createdAtUtc: number;
      attachments?: (components["schemas"]["AttachmentIn"])[] | null;
    };
    MessageIcon: {
      icon: components["schemas"]["ApiIcon"];
      style?: components["schemas"]["MessageStyle"];
    };
    MessageImage: {
      src: string;
    };
    MessageInfo: {
      id: string;
      text: string;
      /** Format: int64 */
      time: number;
      author: components["schemas"]["CPrincipal"];
      attachments?: string | null;
      inThirdPerson?: boolean | null;
    };
    MessageInlineElement: {
      className: string;
    } & (components["schemas"]["MessageButton"] | components["schemas"]["MessageInlineText"] | components["schemas"]["MessageIcon"] | components["schemas"]["MessageTimestamp"] | components["schemas"]["MessageTag"]);
    MessageInlineGroup: {
      accessory?: components["schemas"]["MessageAccessoryElement"];
      elements: (components["schemas"]["MessageInlineElement"])[];
      textSize?: components["schemas"]["MessageTextSize"];
      textStyle?: components["schemas"]["MessageStyle"];
      elementsStyle?: components["schemas"]["MessageStyle"];
    };
    MessageInlineText: {
      text: string;
      style?: components["schemas"]["MessageStyle"];
    };
    MessageLink: {
      channelKey: string;
      channelId: string;
      messageId: string;
    };
    MessageOutline: {
      icon?: components["schemas"]["ApiIcon"];
      text: string;
    };
    MessageOutlineBase: {
      className: string;
    } & (components["schemas"]["MessageOutline"] | components["schemas"]["MessageOutlineElements"]);
    MessageOutlineElements: {
      elements: (components["schemas"]["MessageInlineElement"])[];
    };
    MessagePayload: {
      message: components["schemas"]["MessageContext"];
      clientId: string;
      userId: string;
      verificationToken?: string | null;
    };
    MessageSection: {
      elements: (components["schemas"]["MessageBlockElement"])[];
      header?: string | null;
      footer?: string | null;
      style?: components["schemas"]["MessageStyle"];
      textSize?: components["schemas"]["MessageTextSize"];
    };
    MessageSectionElement: {
      className: string;
    } & (components["schemas"]["MessageSection"] | components["schemas"]["MessageDivider"]);
    MessageTag: {
      text: string;
      style?: components["schemas"]["MessageStyle"];
    };
    MessageText: {
      accessory?: components["schemas"]["MessageAccessoryElement"];
      style?: components["schemas"]["MessageStyle"];
      size?: components["schemas"]["MessageTextSize"];
      content: string;
    };
    MessageTimestamp: {
      /** Format: int64 */
      ts: number;
      style?: components["schemas"]["MessageStyle"];
      format?: components["schemas"]["MessageTimestampFormat"];
      strikethrough: boolean;
    };
    NavBarMenuItem: {
      item: string;
      enabled: boolean;
    };
    NavigateUrlAction: {
      url: string;
      withBackUrl: boolean;
      openInNewTab: boolean;
    };
    NavigateUrlActionContext: {
      url: string;
      withBackUrl: boolean;
      openInNewTab: boolean;
    };
    NewExternalIssueEventPayload: {
      clientId: string;
      verificationToken?: string | null;
    };
    NewMergeRequestFromIssueActionContext: {
      projectKey: components["schemas"]["ProjectKey"];
      repository: string;
      commitId: string;
      /** Format: int32 */
      issueNumber: number;
      projectRepos: components["schemas"]["ProjectReposRecord"];
      issueCommitsRef: components["schemas"]["CommitLinksContainer"];
    };
    NewMergeRequestFromIssueBranchActionContext: {
      projectKey: components["schemas"]["ProjectKey"];
      repository: string;
      branchHead: string;
      /** Format: int32 */
      issueNumber: number;
      projectRepos: components["schemas"]["ProjectReposRecord"];
      issueBranchesRef: components["schemas"]["BranchLinksContainer"];
    };
    NewMessage: {
      text: string;
      temporaryId: string;
      attachments?: (components["schemas"]["Attachment"])[] | null;
      pending: boolean;
      draftTag?: string | null;
      postponeId?: string | null;
    };
    NewUnfurlQueueItemsPayload: {
      clientId: string;
      verificationToken?: string | null;
    };
    NexusStagingProfile: {
      id: string;
      name: string;
    };
    NonWorkingDays: {
      /** Format: full-date */
      since: string;
      /** Format: full-date */
      till: string;
      startsEarlier: boolean;
      endsLater: boolean;
    };
    NonWorkingDaysEvent: {
      profile: components["schemas"]["TD_MemberProfile"];
      days: (components["schemas"]["NonWorkingDays"])[];
    };
    NonZeroExitCodeDTO: Record<string, never>;
    NotSet: Record<string, never>;
    NpmPackageDependency: {
      name: string;
      version: string;
      type?: string | null;
    };
    NpmPackageType: {
      id: string;
    };
    NpmPackageVersionDetails: {
      type: components["schemas"]["PackageType"];
      repository: string;
      name: string;
      version: string;
      tags?: (string)[] | null;
      /** Format: int64 */
      created: number;
      /** Format: int64 */
      accessed?: number | null;
      /** Format: int64 */
      downloads: number;
      pinned: boolean;
      comment?: string | null;
      /** Format: int64 */
      diskSize: number;
      author?: components["schemas"]["CPrincipal"];
      authors?: (components["schemas"]["CPrincipal"])[] | null;
      origin?: components["schemas"]["PackageOrigin"];
      metadata?: ({
        [key: string]: string | undefined;
      }) | null;
      description?: string | null;
      dependencies: (components["schemas"]["NpmPackageDependency"])[];
      keywords: (string)[];
      license?: string | null;
      projectUrl?: string | null;
      repositoryUrl?: string | null;
      repositoryRevision?: string | null;
      readme?: string | null;
      unityVersion?: string | null;
    };
    NuGetDependency: {
      targetFramework?: string | null;
      id: string;
      range: string;
    };
    NuGetPackageType: {
      id: string;
    };
    NuGetPackageVersionDetails: {
      type: components["schemas"]["PackageType"];
      repository: string;
      name: string;
      version: string;
      tags?: (string)[] | null;
      /** Format: int64 */
      created: number;
      /** Format: int64 */
      accessed?: number | null;
      /** Format: int64 */
      downloads: number;
      pinned: boolean;
      comment?: string | null;
      /** Format: int64 */
      diskSize: number;
      author?: components["schemas"]["CPrincipal"];
      authors?: (components["schemas"]["CPrincipal"])[] | null;
      origin?: components["schemas"]["PackageOrigin"];
      metadata?: ({
        [key: string]: string | undefined;
      }) | null;
      verbatimVersion: string;
      description?: string | null;
      projectUrl?: string | null;
      license?: string | null;
      licenseUrl?: string | null;
      icon?: string | null;
      title?: string | null;
      dependencies: (components["schemas"]["NuGetDependency"])[];
    };
    OIDCDiscovery: {
      issuer: string;
      authorizationEndpoint: string;
      tokenEndpoint?: string | null;
      userinfoEndpoint?: string | null;
      jwksUri: string;
    };
    OidcRegisterNewUserRule: {
      userType: components["schemas"]["RegisterNewUserType"];
      allowed: boolean;
      restrictedByDomains: (string)[];
    };
    OpenEnumCFCreateParameters: {
      values: (string)[];
    };
    OpenEnumCFInputValue: {
      enumValueIdentifier?: components["schemas"]["CFEnumValueIdentifier"];
    };
    OpenEnumCFType: Record<string, never>;
    OpenEnumCFUpdateParameters: {
      modifications: (components["schemas"]["CFEnumValueModification"])[];
    };
    OpenEnumCFValue: {
      value?: components["schemas"]["EnumValueData"];
    };
    OpenEnumListCFInputValue: {
      enumValueIdentifiers: (components["schemas"]["CFEnumValueIdentifier"])[];
    };
    OpenEnumListCFType: Record<string, never>;
    OpenEnumListCFValue: {
      values: (components["schemas"]["EnumValueData"])[];
    };
    OpenPersonalFeedSettingsAction: {
      tab: string;
      feed: string;
      feedId?: string | null;
    };
    OrgDomainDTO: {
      domain: string;
      /** Format: date-time */
      expireAt?: string | null;
      orgUrl: string;
    };
    OrgThrottlingStatus: {
      /** Format: date-time */
      throttledUntil?: string | null;
    };
    OrganizationForUpdateDTO: {
      name?: string;
      slogan?: string | null;
      logoId?: string | null;
      logoSmall?: string | null;
      logo?: string | null;
      onboardingRequired?: boolean;
      userAgreementAccepted?: boolean;
      timezone?: components["schemas"]["ATimeZone"];
      license?: string | null;
      orgSize?: components["schemas"]["OrgSizeDTO"];
      orgIndustry?: components["schemas"]["OrgIndustryDTO"];
      sendAnonymousDataAgreementAccepted?: boolean;
      marketplaceEnabled?: boolean;
    };
    OrganizationRecord: {
      id: string;
      orgId: string;
      name: string;
      slogan?: string | null;
      logoId?: string | null;
      onboardingRequired?: boolean | null;
      allowDomainsEdit?: boolean | null;
      /** Format: int64 */
      createdAt?: number | null;
      createdWithNavigationV2?: boolean | null;
      timezone?: components["schemas"]["ATimeZone"];
      orgSize?: components["schemas"]["OrgSizeDTO"];
      orgIndustry?: components["schemas"]["OrgIndustryDTO"];
      sendAnonymousDataAgreementAccepted?: boolean | null;
      marketplaceEnabled?: boolean | null;
      slackWorkspace?: string | null;
    };
    OutOfMemoryDTO: Record<string, never>;
    Overdrafts: {
      /** Format: int32 */
      storage: number;
      /** Format: int32 */
      bandwidth: number;
      /** Format: int32 */
      ciCredits: number;
    };
    PR_PrivateProject: {
      key: components["schemas"]["ProjectKey"];
      name: string;
      accessAllowed: boolean;
      admins: (components["schemas"]["TD_MemberProfile"])[];
    };
    PR_Project: {
      id: string;
      key: components["schemas"]["ProjectKey"];
      name: string;
      private: boolean;
      description?: string | null;
      icon?: string | null;
      /** Format: date-time */
      latestRepositoryActivity?: string | null;
      /** Format: date-time */
      createdAt?: string | null;
      archived: boolean;
      trackers: (components["schemas"]["ProjectIssueTrackerItem"])[];
      bundles: (components["schemas"]["ProjectParameterBundle"])[];
      features?: (components["schemas"]["ProjectFeatureState"])[] | null;
      repos: (components["schemas"]["PR_RepositoryInfo"])[];
      guestProfiles: (components["schemas"]["TD_MemberProfile"])[];
      packages: (components["schemas"]["ProjectPackageRepository"])[];
      memberProfiles: (components["schemas"]["TD_MemberProfile"])[];
      memberTeams: (components["schemas"]["TD_Team"])[];
      adminProfiles: (components["schemas"]["TD_MemberProfile"])[];
      adminTeams: (components["schemas"]["TD_Team"])[];
      featurePins?: (components["schemas"]["CommonProjectFeaturePins"])[] | null;
      personalFeaturePins?: (components["schemas"]["ToggleableProjectFeaturePins"])[] | null;
      enable: boolean;
      /** Format: int32 */
      hoursInDay: number;
      /** Format: int32 */
      daysInWeek: number;
      format: components["schemas"]["DurationTextFormat"];
      featuresUsage?: (components["schemas"]["ProjectFeatureUsage"])[] | null;
      boards: (components["schemas"]["BoardRecord"])[];
      tags: (string)[];
      collaboratorsProfiles: (components["schemas"]["TD_MemberProfile"])[];
      collaboratorsTeams: (components["schemas"]["TD_Team"])[];
      type: components["schemas"]["ProjectTeamType"];
      teams?: (components["schemas"]["TD_Team"])[] | null;
      members?: (components["schemas"]["ProjectTeamMemberRecord"])[] | null;
      team?: components["schemas"]["TD_Team"];
    };
    PR_RepositoryInfo: {
      id?: string | null;
      name: string;
      description: string;
      /** Format: date-time */
      latestActivity?: string | null;
      /** Format: date-time */
      proxyPushNotification?: string | null;
      proxyPushNotificationBody?: string | null;
      state: components["schemas"]["RepositoryState"];
      initProgress?: string | null;
      readmeName?: string | null;
      monthlyActivity?: components["schemas"]["RepositoryActivity"];
      defaultBranch?: components["schemas"]["BranchInfo"];
    };
    PR_Tag: {
      name: string;
      /** Format: int32 */
      projectCount: number;
    };
    PackageData: {
      type: components["schemas"]["PackageType"];
      repository: string;
      name: string;
      /** Format: int64 */
      versions: number;
      /** Format: int64 */
      updated: number;
      lastVersion: string;
    };
    PackageMetadata: {
      connectionId?: string | null;
    };
    PackageOrigin: {
      className: string;
    } & (components["schemas"]["PackageOrigin.Build"] | components["schemas"]["PackageOrigin.Url"]);
    "PackageOrigin.Build": {
      name?: string | null;
      url?: string | null;
    };
    "PackageOrigin.Url": {
      url: string;
    };
    PackageRepository: {
      id: string;
      type: components["schemas"]["PackageType"];
      name?: string | null;
      description?: string | null;
      public: boolean;
      cleanupEnabled: boolean;
      settings?: components["schemas"]["ES_PackageRepositorySettings"];
      mode: components["schemas"]["PackageRepositoryMode"];
      archived: boolean;
    };
    PackageRepositoryConnection: {
      className: string;
    } & (components["schemas"]["PackageRepositoryConnection.Remote"] | components["schemas"]["PackageRepositoryConnection.Space"]);
    "PackageRepositoryConnection.Remote": {
      id: string;
      description?: string | null;
      enabled: boolean;
      rememberDownloaded: boolean;
      packageNameFilters?: (string)[] | null;
      url: string;
      credentials: components["schemas"]["PackageRepositoryCredentials"];
      secretId?: string | null;
      secretValue?: string | null;
      settings?: components["schemas"]["PackageRepositoryConnectionSettings"];
    };
    "PackageRepositoryConnection.Space": {
      id: string;
      description?: string | null;
      enabled: boolean;
      rememberDownloaded: boolean;
      packageNameFilters?: (string)[] | null;
      repository: components["schemas"]["ProjectPackageRepository"];
    };
    PackageRepositoryConnectionSettings: {
      className: string;
    } & components["schemas"]["MavenRepositoryConnectionSettings"];
    PackageRepositoryPermissionContext: {
      repository: components["schemas"]["ProjectPackageRepository"];
    };
    PackageType: {
      className: string;
    } & (components["schemas"]["ComposerPackageType"] | components["schemas"]["DartPackageType"] | components["schemas"]["NuGetPackageType"] | components["schemas"]["MavenPackageType"] | components["schemas"]["PythonPackageType"] | components["schemas"]["ContainerPackageType"] | components["schemas"]["FileType"] | components["schemas"]["CratesPackageType"] | components["schemas"]["NpmPackageType"]);
    PackageVersionData: {
      type: components["schemas"]["PackageType"];
      repository: string;
      name: string;
      version: string;
      tags?: (string)[] | null;
      pinned: boolean;
      /** Format: int64 */
      created?: number | null;
      /** Format: int64 */
      lastAccessed?: number | null;
      /** Format: int64 */
      downloads?: number | null;
      comment?: string | null;
      /** Format: int64 */
      diskSize?: number | null;
      path?: string | null;
    };
    PackageVersionDetails: {
      className: string;
    } & (components["schemas"]["ComposerPackageVersionDetails"] | components["schemas"]["PythonPackageVersionDetails"] | components["schemas"]["CratesPackageVersionDetails"] | components["schemas"]["MavenPackageVersionDetails"] | components["schemas"]["DartPackageVersionDetails"] | components["schemas"]["ContainerPackageVersionDetails"] | components["schemas"]["NpmPackageVersionDetails"] | components["schemas"]["NuGetPackageVersionDetails"]);
    PackageVersionInfo: {
      type: components["schemas"]["PackageType"];
      repository: string;
      name: string;
      version: string;
      tags?: (string)[] | null;
    };
    PackageVersionRef: {
      name: string;
      version: string;
    };
    PackagesAccess: {
      permissions?: (components["schemas"]["PackagesAccessRecipient"])[] | null;
      inherited?: (components["schemas"]["PackagesAccessRecipient"])[] | null;
      restricted: boolean;
    };
    PackagesAccessRecipient: {
      access?: components["schemas"]["PackagesSharingAccessType"];
      recipient?: components["schemas"]["PermissionsRecipient"];
      isContainerAccessible: boolean;
    };
    PackagesAccessRecipientIdentifier: {
      access: components["schemas"]["PackagesSharingAccessType"];
      recipient: components["schemas"]["PermissionsRecipientIdentifier"];
    };
    PackagesExecutionResult: {
      className: string;
    } & (components["schemas"]["PackagesExecutionResult.Failure"] | components["schemas"]["PackagesExecutionResult.Success"]);
    "PackagesExecutionResult.Failure": {
      error: string;
    };
    "PackagesExecutionResult.Success": Record<string, never>;
    PackagesPublishing: {
      publishingId: string;
      source: components["schemas"]["PublishingSource"];
      /** Format: int64 */
      created: number;
      /** Format: int64 */
      started?: number | null;
      /** Format: int64 */
      completed?: number | null;
      successful: boolean;
      error?: string | null;
      principal?: components["schemas"]["CPrincipal"];
    };
    PackagesSubscriptionFilter: {
      project?: components["schemas"]["PR_Project"];
      repository?: components["schemas"]["ProjectPackageRepository"];
      namePattern: (string)[];
      versionPattern?: string | null;
    };
    PackagesSubscriptionFilterIn: {
      project?: string | null;
      repository?: string | null;
      namePattern: (string)[];
      versionPattern?: string | null;
    };
    PageUiExtensionApi: {
      className: string;
    } & components["schemas"]["ApplicationHomepageUiExtensionApi"];
    PageUiExtensionIn: {
      className: string;
    } & components["schemas"]["ApplicationHomepageUiExtensionIn"];
    ParameterLastUsageDTO: {
      jobExecutionId: string;
      stepExecutionId?: string | null;
      jobName: string;
      /** Format: date-time */
      usedAt: string;
    };
    Participant: {
      user: components["schemas"]["TD_MemberProfile"];
      status: components["schemas"]["EventParticipationStatus"];
    };
    ParticipantOnProject: {
      profile: components["schemas"]["TD_MemberProfile"];
      roles: (components["schemas"]["ProjectRoleApi"])[];
    };
    ParticipantStateData: {
      audioEnabled: boolean;
      videoEnabled: boolean;
      screenShared: boolean;
      /** Format: int32 */
      qualitiesCount?: number | null;
    };
    ParticipantTeamOnProject: {
      team: components["schemas"]["TD_Team"];
      roles: (components["schemas"]["ProjectRoleApi"])[];
    };
    PercentageCFConstraint: Record<string, never>;
    PercentageCFFilter: {
      minValue?: components["schemas"]["PercentageCFValue"];
      maxValue?: components["schemas"]["PercentageCFValue"];
    };
    PercentageCFType: Record<string, never>;
    PercentageCFValue: {
      /** Format: int32 */
      value?: number | null;
    };
    PermissionContextApi: {
      className: string;
    } & (components["schemas"]["ProjectPermissionContext"] | components["schemas"]["PrivateChannelPermissionContext"] | components["schemas"]["GlobalPermissionContext"] | components["schemas"]["PackageRepositoryPermissionContext"] | components["schemas"]["PrivateProjectPermissionContext"] | components["schemas"]["ChannelPermissionContext"]);
    PermissionTarget: {
      className: string;
    } & (components["schemas"]["ChannelPermissionTarget"] | components["schemas"]["ProjectPermissionTarget"] | components["schemas"]["TeamPermissionTarget"] | components["schemas"]["GlobalPermissionTarget"] | components["schemas"]["ProfilePermissionTarget"]);
    PermissionsRecipient: {
      className: string;
    } & (components["schemas"]["PermissionsRecipient.Profile"] | components["schemas"]["PermissionsRecipient.ProjectRole"] | components["schemas"]["PermissionsRecipient.Team"]);
    "PermissionsRecipient.Profile": {
      profile: components["schemas"]["TD_MemberProfile"];
    };
    "PermissionsRecipient.ProjectRole": {
      project: components["schemas"]["PR_Project"];
      roleId: string;
      name: string;
    };
    "PermissionsRecipient.Team": {
      team: components["schemas"]["TD_Team"];
    };
    PersonalDocumentContainerInfo: {
      owner: components["schemas"]["TD_MemberProfile"];
      grantedRights?: (string)[] | null;
    };
    PersonalSubscriptionEvent: {
      eventCode: string;
      name: string;
      memberOnly?: boolean | null;
      featureFlag?: string | null;
      forCollaborators?: boolean | null;
      forGuests?: boolean | null;
    };
    PersonalSubscriptionSettings: {
      feed: components["schemas"]["PrivateFeed"];
      subjectSettings: (components["schemas"]["PersonalSubscriptionSubjectSettings"])[];
      enabledCodes: (string)[];
    };
    PersonalSubscriptionSubjectSettings: {
      subjectCode: string;
      enabled: boolean;
    };
    PersonalSubscriptionTarget: {
      subjectCode: string;
      targetCode: string;
      description: string;
      events: (components["schemas"]["PersonalSubscriptionEvent"])[];
      featureFlag?: string | null;
    };
    PingWebhookEvent: {
      webhookName: string;
    };
    PlainParameterRecord: {
      id: string;
      archived: boolean;
      bundleId: string;
      key: string;
      description?: string | null;
      /** Format: date-time */
      createdAt?: string | null;
      createdBy?: components["schemas"]["CPrincipal"];
      /** Format: date-time */
      updatedAt?: string | null;
      updatedBy?: components["schemas"]["CPrincipal"];
      value: string;
    };
    PlanItem: {
      id: string;
      checklistId: string;
      tag?: components["schemas"]["PlanningTag"];
      simpleText?: string | null;
      simpleDone?: boolean | null;
      issue?: components["schemas"]["Issue"];
      issueProblem?: string | null;
      canEditIssue?: boolean | null;
      hasChildren: boolean;
      archived: boolean;
      topics: (components["schemas"]["Topic"])[];
      children: (components["schemas"]["PlanItem"])[];
    };
    PlanItemChildren: {
      id: string;
      children: (components["schemas"]["PlanItem"])[];
      archived: boolean;
    };
    PlanningTag: {
      id: string;
      archived: boolean;
      projectId: string;
      parent?: components["schemas"]["PlanningTag"];
      name: string;
    };
    PlanningTagFilterValue: {
      tagIn?: components["schemas"]["PlanningTagIn"];
    };
    PlanningTagIn: {
      className: string;
    } & (components["schemas"]["PlanningTagIn.Id"] | components["schemas"]["PlanningTagIn.Name"]);
    "PlanningTagIn.Id": {
      id: string;
    };
    "PlanningTagIn.Name": {
      path: (string)[];
    };
    PollRecord: {
      id: string;
      owner: components["schemas"]["TD_MemberProfile"];
      question: string;
      meVote: boolean;
      /** Format: int32 */
      countPeople: number;
      anonymous: boolean;
      closed: boolean;
      extendable: boolean;
      multiChoice: boolean;
      ended: boolean;
      /** Format: date-time */
      expirationTime?: string | null;
      votes: (components["schemas"]["VoteGroup"])[];
    };
    PostMessageAction: {
      actionId: string;
      payload: string;
    };
    PostUnfurlContentResult: {
      className: string;
    } & (components["schemas"]["PostUnfurlContentResult.EntityNotFound"] | components["schemas"]["PostUnfurlContentResult.NotApproved"] | components["schemas"]["PostUnfurlContentResult.QueueItemNotFound"] | components["schemas"]["PostUnfurlContentResult.Success"]);
    "PostUnfurlContentResult.EntityNotFound": {
      queueItemId: string;
    };
    "PostUnfurlContentResult.NotApproved": {
      queueItemId: string;
    };
    "PostUnfurlContentResult.QueueItemNotFound": {
      queueItemId: string;
    };
    "PostUnfurlContentResult.Success": {
      queueItemId: string;
    };
    PostponeWorkspaceDeletionChannelAction: {
      workspaceId: string;
    };
    PostponedChannelItem: {
      id: string;
      channelId: string;
      message: string;
      attachments: (components["schemas"]["AttachmentInfo"])[];
      mentions?: (components["schemas"]["EntityMention"])[] | null;
      /** Format: int64 */
      etag: number;
      /** Format: date-time */
      time?: string | null;
      contactKey?: string | null;
      /** Format: date-time */
      postpone: string;
      markdown?: boolean | null;
      parentId?: string | null;
      archived: boolean;
    };
    PreferredIdeVersion: {
      className: string;
    } & (components["schemas"]["PreferredIdeVersion.Fixed"] | components["schemas"]["PreferredIdeVersion.LatestOfQuality"]);
    "PreferredIdeVersion.Fixed": {
      version: string;
      quality: components["schemas"]["IdeVersionQuality"];
    };
    "PreferredIdeVersion.LatestOfQuality": {
      minimumQuality: components["schemas"]["IdeVersionQuality"];
    };
    PrincipalFilterValue: {
      principalIn?: components["schemas"]["PrincipalIn"];
    };
    PrivateChannelPermissionContext: {
      channelId: string;
    };
    PrivateFeed: {
      id: string;
      name: string;
      icon: string;
      color: components["schemas"]["PrivateFeedColor"];
    };
    PrivateProjectPermissionContext: {
      projectId: string;
    };
    ProducerOptions: {
      sfuOptions: components["schemas"]["SFUProducerOptions"];
      /** Format: int64 */
      userConnectionId: number;
      routerId: string;
      source: components["schemas"]["MediaSource"];
    };
    Profile2FARequirement: {
      roleId: string;
      roleCode: string;
      roleName: string;
    };
    ProfileCFFilter: {
      values: (components["schemas"]["ProfileCFInputValue"])[];
    };
    ProfileCFInputValue: {
      profile?: components["schemas"]["ProfileIdentifier"];
    };
    ProfileCFType: Record<string, never>;
    ProfileCFValue: {
      profile?: components["schemas"]["TD_MemberProfile"];
    };
    ProfileEvent: {
      meta: components["schemas"]["KMetaMod"];
      member: components["schemas"]["TD_MemberProfile"];
    };
    ProfileLinkPreview: {
      profile: components["schemas"]["TD_MemberProfile"];
    };
    ProfileListCFInputValue: {
      profiles: (components["schemas"]["ProfileIdentifier"])[];
    };
    ProfileListCFType: Record<string, never>;
    ProfileListCFValue: {
      profiles: (components["schemas"]["TD_MemberProfile"])[];
    };
    ProfileMembershipRecord: {
      id: string;
      memberships: (components["schemas"]["TD_Membership"])[];
      unapprovedMemberships?: (components["schemas"]["TD_Membership"])[] | null;
    };
    ProfileOrganizationEvent: {
      meta: components["schemas"]["KMetaMod"];
      member: components["schemas"]["TD_MemberProfile"];
      joinedOrganization: boolean;
      leftOrganization: boolean;
    };
    ProfilePermissionTarget: {
      profile: components["schemas"]["ProfileIdentifier"];
    };
    ProjectAdminRoleApi: Record<string, never>;
    ProjectCFFilter: {
      values: (components["schemas"]["ProjectCFInputValue"])[];
    };
    ProjectCFInputValue: {
      project?: components["schemas"]["ProjectIdentifier"];
    };
    ProjectCFType: Record<string, never>;
    ProjectCFValue: {
      project?: components["schemas"]["PR_Project"];
    };
    ProjectCommonSubscriptionFilter: {
      project?: components["schemas"]["PR_Project"];
    };
    ProjectCommonSubscriptionFilterIn: {
      project?: string | null;
    };
    ProjectCustomRoleApi: {
      role: string;
    };
    ProjectEvent: {
      meta: components["schemas"]["KMetaMod"];
      project: components["schemas"]["PR_Project"];
    };
    ProjectExternalRoleApi: Record<string, never>;
    ProjectFeaturePinnedItem: {
      kind?: components["schemas"]["ProjectPinnedItemKind"];
      id?: string | null;
    };
    ProjectFeaturePinsIn: {
      feature: components["schemas"]["ProjectFeature"];
      items: (components["schemas"]["ProjectFeaturePinnedItem"])[];
    };
    ProjectFeatureState: {
      feature: components["schemas"]["ProjectFeature"];
      enabled: boolean;
    };
    ProjectFeatureUsage: {
      feature: components["schemas"]["ProjectFeature"];
      /** Format: full-date */
      lastUsedAt?: string | null;
      /** Format: full-date */
      firstUsedAt?: string | null;
    };
    ProjectIssueTrackerItem: {
      key: string;
      tracker: components["schemas"]["IssueTracker"];
    };
    ProjectKey: {
      key: string;
    };
    ProjectMemberRoleApi: Record<string, never>;
    ProjectPackageRepository: {
      id: string;
      project: components["schemas"]["PR_Project"];
      name: string;
      description?: string | null;
      repository: components["schemas"]["PackageRepository"];
      permissions?: (string)[] | null;
      archived: boolean;
      connections: (components["schemas"]["PackageRepositoryConnection"])[];
    };
    ProjectParameterBundle: {
      id: string;
      key: string;
      scope: components["schemas"]["ProjectParameterScope"];
    };
    ProjectParameterScope: {
      className: string;
    } & (components["schemas"]["ProjectParameterScope.Default"] | components["schemas"]["ProjectParameterScope.Repository"]);
    "ProjectParameterScope.Default": Record<string, never>;
    "ProjectParameterScope.Repository": {
      name: string;
    };
    ProjectPermissionContext: {
      project: components["schemas"]["PR_Project"];
    };
    ProjectPermissionTarget: {
      project: components["schemas"]["ProjectIdentifier"];
    };
    ProjectReposRecord: {
      id: string;
      repos: (components["schemas"]["PR_RepositoryInfo"])[];
    };
    ProjectRoleApi: {
      className: string;
    } & (components["schemas"]["ProjectAdminRoleApi"] | components["schemas"]["ProjectExternalRoleApi"] | components["schemas"]["ProjectMemberRoleApi"] | components["schemas"]["ProjectCustomRoleApi"]);
    ProjectScope: {
      project: components["schemas"]["PR_Project"];
    };
    ProjectTeamMemberRecord: {
      id: string;
      project: components["schemas"]["PR_Project"];
      profile: components["schemas"]["TD_MemberProfile"];
      position?: components["schemas"]["TD_Role"];
      /** Format: date-time */
      since: string;
      archived: boolean;
    };
    ProjectTeamRole: {
      className: string;
    } & (components["schemas"]["ProjectTeamRole.Admin"] | components["schemas"]["ProjectTeamRole.Collaborator"] | components["schemas"]["ProjectTeamRole.Member"]);
    "ProjectTeamRole.Admin": Record<string, never>;
    /** @deprecated */
    "ProjectTeamRole.Collaborator": Record<string, never>;
    "ProjectTeamRole.Member": Record<string, never>;
    ProvideExternalIssueData: {
      issuePrefix: string;
      issueId: string;
    };
    PublicHoliday: {
      id: string;
      calendar: components["schemas"]["PublicHolidayCalendarRecord"];
      name: string;
      /** Format: full-date */
      date: string;
      workingDay: boolean;
      halfDay?: boolean | null;
      archived?: boolean | null;
    };
    PublicHolidayCalendarRecord: {
      id: string;
      archived: boolean;
      name: string;
      /** Format: full-date */
      firstDate?: string | null;
      /** Format: full-date */
      lastDate?: string | null;
      /** Format: int32 */
      eventsCount: number;
      location: components["schemas"]["TD_Location"];
    };
    PublicationDetails: {
      className: string;
    } & components["schemas"]["BlogPublicationDetails"];
    PublicationDetailsIn: {
      className: string;
    } & components["schemas"]["BlogPublicationDetailsIn"];
    PublishMessage: {
      id: string;
    };
    PublishingSource: {
      className: string;
    } & components["schemas"]["PublishingSource.Packages"];
    "PublishingSource.Packages": {
      items: (components["schemas"]["PackageVersionRef"])[];
    };
    PurchasedBillingPlan: {
      id: string;
      jetSalesId?: string | null;
      licenseIssuer?: string | null;
      installationPublicKey?: string | null;
      plan: string;
      billingPeriod: string;
      /** Format: full-date */
      since: string;
      /** Format: full-date */
      till: string;
      /** Format: full-date */
      mayUseTill?: string | null;
      currency: components["schemas"]["Currency"];
      /** Format: double */
      addUserPrice: number;
      /** Format: double */
      addStoragePrice: number;
      /** Format: double */
      addBandwidthPrice: number;
      /** Format: double */
      addCiCreditPrice: number;
      /** Format: int32 */
      minActiveUsers: number;
      /** Format: int32 */
      prepaidUsers: number;
      /** Format: int32 */
      storagePerUser: number;
      /** Format: int32 */
      storageOverall: number;
      /** Format: int32 */
      bandwidthPerUser: number;
      /** Format: int32 */
      bandwidthOverall: number;
      /** Format: int32 */
      ciCredits: number;
      /** Format: int32 */
      ciCreditsReserve: number;
      /** Format: double */
      ciCreditsRateForExternalWorker?: number | null;
      /** Format: int32 */
      integrations: number;
      /** Format: int32 */
      searchHistory: number;
      /** Format: double */
      balance: number;
      /** Format: double */
      hardLimitAmount: number;
      hasCardVerifiedAdmin?: boolean | null;
      isTrial?: boolean | null;
      spentTrials?: (string)[] | null;
      trialBasePlan?: string | null;
    };
    PythonChecksum: {
      algorithm: string;
      value: string;
    };
    PythonPackageFile: {
      name: string;
      /** Format: int64 */
      created: number;
      /** Format: int64 */
      length: number;
      checksums: (components["schemas"]["PythonChecksum"])[];
    };
    PythonPackageType: {
      id: string;
    };
    PythonPackageUrl: {
      title: string;
      href: string;
    };
    PythonPackageVersionDetails: {
      repository: string;
      name: string;
      version: string;
      tags?: (string)[] | null;
      /** Format: int64 */
      created: number;
      /** Format: int64 */
      accessed?: number | null;
      /** Format: int64 */
      downloads: number;
      pinned: boolean;
      comment?: string | null;
      /** Format: int64 */
      diskSize: number;
      author?: components["schemas"]["CPrincipal"];
      authors?: (components["schemas"]["CPrincipal"])[] | null;
      origin?: components["schemas"]["PackageOrigin"];
      metadata?: ({
        [key: string]: string | undefined;
      }) | null;
      notNormalizedName: string;
      platform?: string | null;
      summary?: string | null;
      description?: string | null;
      descriptionContentType?: string | null;
      keywords: (string)[];
      homePage?: string | null;
      authorFromPackageDetails?: string | null;
      authorEmail?: string | null;
      maintainer?: string | null;
      maintainerEmail?: string | null;
      license?: string | null;
      classifiers: (string)[];
      projectUrls: (components["schemas"]["PythonPackageUrl"])[];
      requiresDist: (string)[];
      requiresPython?: string | null;
      files: (components["schemas"]["PythonPackageFile"])[];
    };
    QRCode: {
      /** Format: int32 */
      width: number;
      base64Bitmap: string;
    };
    RangeCFFilter: {
      className: string;
    } & (components["schemas"]["PercentageCFFilter"] | components["schemas"]["IntCFFilter"] | components["schemas"]["DateTimeCFFilter"] | components["schemas"]["DateCFFilter"]);
    RangeFilter: {
      minValue?: components["schemas"]["RangeFilterValue"];
      maxValue?: components["schemas"]["RangeFilterValue"];
    };
    RangeFilterValue: {
      className: string;
    } & (components["schemas"]["DateTimeFilterValue"] | components["schemas"]["DateFilterValue"]);
    RdConfigurationSource: {
      className: string;
    } & (components["schemas"]["RdFromDevConfiguration"] | components["schemas"]["RdFromDevfile"]);
    RdDevConfiguration: {
      id: string;
      name: string;
      repoConnections: (components["schemas"]["RepoConnectionWithBranch"])[];
      devContainer: components["schemas"]["RdDevContainer"];
      ide: components["schemas"]["RdDevConfigurationIde"];
      instanceTypeName: string;
      instanceType: components["schemas"]["DevConfigurationInstanceType"];
      project: components["schemas"]["PR_Project"];
      hotPool?: components["schemas"]["DevConfigurationHotPool"];
      warmup: components["schemas"]["DevConfigurationWarmup"];
      hooks?: components["schemas"]["DevConfigurationHooks"];
      hibernation?: components["schemas"]["DevConfigurationHibernation"];
      projectRoot?: string | null;
      sshEnabled?: boolean | null;
      access?: components["schemas"]["DevConfigurationAccessSettingsDTO"];
      archived: boolean;
    };
    RdDevConfigurationIde: {
      ideType: components["schemas"]["IdeType"];
      version?: components["schemas"]["PreferredIdeVersion"];
      vmOptions: (string)[];
    };
    RdDevContainer: {
      image: components["schemas"]["RdDevContainerImage"];
      envVars?: (components["schemas"]["EnvVar"])[] | null;
    };
    RdDevContainerImage: {
      className: string;
    } & (components["schemas"]["RdDevContainerImage.Default"] | components["schemas"]["RdDevContainerImage.FromRegistry"]);
    "RdDevContainerImage.Default": Record<string, never>;
    "RdDevContainerImage.FromRegistry": {
      image: string;
    };
    RdFromDevConfiguration: {
      devConfiguration: components["schemas"]["RdDevConfiguration"];
    };
    RdFromDevfile: {
      path: string;
      configurationRevision: string;
    };
    RdGatewayConnectionInfo: {
      originalLink: string;
      relayLink: string;
      relayAuthData: string;
      version: string;
    };
    RdInstanceType: {
      id: string;
      name: string;
      /** Format: int32 */
      vcpus: number;
      /** Format: int32 */
      memMb: number;
      /** Format: int32 */
      volumeGb: number;
      enabled: boolean;
      active?: boolean | null;
    };
    RdRepoConnection: {
      id: string;
      projectId: string;
      name: string;
      sshUrl: string;
      accessUrl?: string | null;
      currentCredentials: components["schemas"]["FetchCredentials"];
      archived: boolean;
    };
    RdRepository: {
      className: string;
    } & (components["schemas"]["RdRepository.DeletedRepository"] | components["schemas"]["RdRepository.ExternalRepository"] | components["schemas"]["RdRepository.SpaceRepository"]);
    "RdRepository.DeletedRepository": {
      name?: string | null;
      status?: components["schemas"]["RdRepositoryStatus"];
    };
    "RdRepository.ExternalRepository": {
      name: string;
      accessUrl?: string | null;
      status?: components["schemas"]["RdRepositoryStatus"];
    };
    "RdRepository.SpaceRepository": {
      name: string;
      status?: components["schemas"]["RdRepositoryStatus"];
    };
    RdRepositoryStatus: {
      className: string;
    } & (components["schemas"]["RdWorkspaceRepositoryStatus"] | components["schemas"]["RdWarmupRepositoryStatus"]);
    RdWarmupEvent: {
      meta: components["schemas"]["KMetaMod"];
      warmupExecution: components["schemas"]["Rd_WarmupExec"];
    };
    RdWarmupM2ItemContentDetails: {
      warmupExecId: string;
      ideType: components["schemas"]["IdeType"];
      repoName: string;
      branch?: string | null;
      projectKey: components["schemas"]["ProjectKey"];
      configurationName: string;
      status: components["schemas"]["WarmupExecutionStatus"];
    };
    RdWarmupRepositoryStatus: {
      commit: string;
      branch: string;
    };
    RdWarmupSizeData: {
      sourceVolumeSize: components["schemas"]["MemoryAmount"];
    };
    RdWarmupSubscriptionFilter: {
      project?: components["schemas"]["PR_Project"];
      repositoryName?: string | null;
      branchSpec?: (string)[] | null;
    };
    RdWarmupSubscriptionFilterIn: {
      project: string;
      repositoryName?: string | null;
      branchSpec?: (string)[] | null;
    };
    RdWarmupVcsData: {
      repositories: (components["schemas"]["RdRepository"])[];
    };
    RdWorkspaceRepositoryStatus: {
      commit: string;
      branch?: string | null;
      containsNotPushedChanges: boolean;
    };
    RdWorkspaceResources: {
      /** Format: int32 */
      milliCpus: number;
      /** Format: int32 */
      memoryMb: number;
      /** Format: int32 */
      volumeGb: number;
    };
    RdWorkspaceVcsData: {
      repositories: (components["schemas"]["RdRepository"])[];
      /** Format: int32 */
      mergeRequestNumber?: number | null;
      repoName: string;
      branchName: string;
      revision: string;
      containsNotPushedChanges: boolean;
    };
    RdWorkspaceWithoutRefs: {
      id: string;
      ideType: components["schemas"]["IdeType"];
      name: string;
      state: components["schemas"]["RdWorkspaceState"];
      stateReason?: string | null;
      projectId: string;
      /** Format: int32 */
      number: number;
      externalId: string;
      vcsData?: components["schemas"]["RdWorkspaceVcsData"];
      resources: components["schemas"]["RdWorkspaceResources"];
      /** Format: date-time */
      created: string;
      /** Format: date-time */
      updated: string;
      ideVersion?: string | null;
    };
    Rd_WarmupExec: {
      id: string;
      projectId: string;
      vcsData: components["schemas"]["RdWarmupVcsData"];
      status: components["schemas"]["WarmupExecutionStatus"];
      /** Format: date-time */
      startedAt: string;
      /** Format: date-time */
      finishedAt?: string | null;
      ideType: components["schemas"]["IdeType"];
      ideBuild: string;
      ideVersion: string;
      ideQuality?: string | null;
      computeTaskId: string;
      trigger: components["schemas"]["WarmupExecutionTrigger"];
      configurationSource: components["schemas"]["RdConfigurationSource"];
      sizeData?: components["schemas"]["RdWarmupSizeData"];
      archived: boolean;
    };
    RecurrenceRule: {
      freq: components["schemas"]["RecurrenceRuleFreq"];
      ends: components["schemas"]["RecurrenceRuleEnds"];
    };
    RecurrenceRuleEnds: {
      className: string;
    } & (components["schemas"]["RecurrenceRuleEnds.Never"] | components["schemas"]["RecurrenceRuleEnds.OnDate"] | components["schemas"]["RecurrenceRuleEnds.TotalCount"]);
    "RecurrenceRuleEnds.Never": Record<string, never>;
    "RecurrenceRuleEnds.OnDate": {
      /** Format: full-date */
      date: string;
    };
    "RecurrenceRuleEnds.TotalCount": {
      /** Format: int32 */
      count: number;
    };
    RecurrenceRuleFreq: {
      className: string;
    } & (components["schemas"]["RecurrenceRuleFreq.Daily"] | components["schemas"]["RecurrenceRuleFreq.MonthlyOnDate"] | components["schemas"]["RecurrenceRuleFreq.MonthlyOnFirstWeekday"] | components["schemas"]["RecurrenceRuleFreq.MonthlyOnLastWeekday"] | components["schemas"]["RecurrenceRuleFreq.MonthlyOnStartDate"] | components["schemas"]["RecurrenceRuleFreq.Weekly"] | components["schemas"]["RecurrenceRuleFreq.Yearly"]);
    "RecurrenceRuleFreq.Daily": {
      /** Format: int32 */
      interval: number;
    };
    "RecurrenceRuleFreq.MonthlyOnDate": {
      /** Format: int32 */
      day: number;
      /** Format: int32 */
      interval: number;
    };
    "RecurrenceRuleFreq.MonthlyOnFirstWeekday": {
      weekday: components["schemas"]["Weekday"];
      /** Format: int32 */
      shift: number;
      /** Format: int32 */
      interval: number;
    };
    "RecurrenceRuleFreq.MonthlyOnLastWeekday": {
      weekday: components["schemas"]["Weekday"];
      /** Format: int32 */
      interval: number;
    };
    "RecurrenceRuleFreq.MonthlyOnStartDate": {
      /** Format: int32 */
      interval: number;
    };
    "RecurrenceRuleFreq.Weekly": {
      weekdays: (components["schemas"]["Weekday"])[];
      /** Format: int32 */
      interval: number;
    };
    "RecurrenceRuleFreq.Yearly": {
      /** Format: int32 */
      interval: number;
    };
    RefreshTokenPayload: {
      refreshToken: string;
      scope: string;
      clientId: string;
      userId: string;
      verificationToken?: string | null;
    };
    RemoteRepository: {
      url: string;
      auth?: components["schemas"]["RemoteRepositoryAuth"];
      refSpec?: string | null;
    };
    RemoteRepositoryAuth: {
      className: string;
    } & (components["schemas"]["RemoteRepositoryAuth.Basic"] | components["schemas"]["RemoteRepositoryAuth.SSH"] | components["schemas"]["RemoteRepositoryAuth.Token"]);
    "RemoteRepositoryAuth.Basic": {
      username: string;
      password: string;
    };
    "RemoteRepositoryAuth.SSH": {
      privateKey: string;
      passphrase: string;
    };
    "RemoteRepositoryAuth.Token": {
      token: string;
    };
    ReplyMessageAttachment: {
      className: string;
    } & (components["schemas"]["ReplyMessageAttachment.Reply"] | components["schemas"]["ReplyMessageAttachment.ReplyWithSnapshot"]);
    "ReplyMessageAttachment.Reply": {
      messageId: string;
    };
    "ReplyMessageAttachment.ReplyWithSnapshot": {
      message: components["schemas"]["ChannelItemSnapshot"];
    };
    RepoChanges: {
      heads: (components["schemas"]["RepoHeadsChange"])[];
      commits: (components["schemas"]["GitCommitInfoWithChanges"])[];
      /** Format: int32 */
      totalNewCommits: number;
    };
    RepoCommitsSubscriptionFilter: {
      project?: components["schemas"]["PR_Project"];
      repository: string;
      spec: components["schemas"]["RepoCommitsSubscriptionFilterSpec"];
    };
    RepoCommitsSubscriptionFilterIn: {
      project?: string | null;
      repository: string;
      spec: components["schemas"]["RepoCommitsSubscriptionFilterSpec"];
    };
    RepoCommitsSubscriptionFilterSpec: {
      authors: (string)[];
      committers: (string)[];
      branchSpec: (string)[];
      pathSpec: string;
      messageRegex: string;
    };
    RepoConnectionWithBranch: {
      connection: components["schemas"]["RdRepoConnection"];
      defaultBranch?: string | null;
    };
    RepoHeadsChange: {
      name: string;
      oldId: string;
      newId: string;
      force?: boolean | null;
    };
    RepoHeadsSubscriptionFilter: {
      project?: components["schemas"]["PR_Project"];
      repository: string;
    };
    RepoHeadsSubscriptionFilterIn: {
      project?: string | null;
      repository: string;
    };
    RepoStats: {
      /** Format: int32 */
      totalBranches: number;
      /** Format: int32 */
      totalCommits: number;
      /** Format: int64 */
      size: number;
      /** Format: date-time */
      latestActivity?: string | null;
      monthlyActivity?: components["schemas"]["RepositoryActivity"];
    };
    RepositoryActivity: {
      lastActivity: ({
          /** Format: full-date */
          first: string;
          /** Format: int32 */
          second: number;
        })[];
    };
    RepositoryCommitRecord: {
      id: string;
      repositoryId: string;
      repositoryName: string;
      revision: string;
      message?: string | null;
      /** Format: date-time */
      date: string;
      authorName?: string | null;
      authorEmail?: string | null;
      committerName?: string | null;
      committerEmail?: string | null;
      authorProfile?: components["schemas"]["TD_MemberProfile"];
    };
    RepositoryDetails: {
      projectKey: string;
      repository: string;
      starred: boolean;
    };
    RepositoryInProject: {
      name: string;
      isDeleted: boolean;
    };
    RepositoryInReview: {
      name: string;
      deleted: boolean;
    };
    RepositoryMirrorOptions: {
      syncPeriodically: boolean;
      syncOnFetch: boolean;
      allowAtomicPush?: boolean | null;
      mirrorPullRequest?: boolean | null;
    };
    RepositoryUrls: {
      httpUrl?: string | null;
      sshUrl?: string | null;
      sshHost?: string | null;
    };
    ResolvedMentionLink: {
      mention: string;
      link: string;
    };
    ResponsibilityRecord: {
      responsibilityId: string;
      summary: string;
      notes?: string | null;
      assignedPeople: (components["schemas"]["AssignedPerson"])[];
    };
    RetentionPolicyParams: {
      /** Format: int32 */
      numberOfDaysToRetain?: number | null;
      /** Format: int32 */
      numberOfVersionsToRetain?: number | null;
      retainDownloadedOnce: boolean;
    };
    ReviewBranchTrackEvent: {
      repository: string;
      branch: string;
      track: boolean;
    };
    ReviewCommit: {
      repositoryId: string;
      commitId: string;
    };
    ReviewCommitIn: {
      repository: string;
      commit: string;
    };
    ReviewCompletionStateChangedEvent: {
      state: components["schemas"]["ReviewerState"];
    };
    ReviewCreatedEvent: {
      projectKey: string;
      reviewId: string;
      /** Format: int32 */
      reviewNumber: number;
      reviewType: components["schemas"]["ReviewType"];
      description?: components["schemas"]["CodeReviewDescription"];
      descriptionEditedByProfileIds: (components["schemas"]["TD_MemberProfile"])[];
      commits?: (components["schemas"]["UnfurlDetailsCommit"])[] | null;
    };
    ReviewRevisionsChangedEvent: {
      commits: (components["schemas"]["RepositoryCommitRecord"])[];
      changeType: components["schemas"]["ReviewRevisionsChangedType"];
      projectKey?: string | null;
      review?: components["schemas"]["CodeReviewRecord"];
    };
    ReviewStateChangedEvent: {
      state: components["schemas"]["CodeReviewState"];
      review?: components["schemas"]["CodeReviewRecord"];
    };
    ReviewTitleChangedEvent: {
      oldTitle: string;
      newTitle: string;
    };
    ReviewerChangedEvent: {
      uid: components["schemas"]["TD_MemberProfile"];
      changeType: components["schemas"]["ReviewerChangedType"];
    };
    ReviewerParam: {
      profileId: string;
      isCodeOwner?: boolean | null;
      qualityGateSlot?: components["schemas"]["CodeReviewParticipantSlotBase"];
    };
    ReviewsWidgetSettingsDTO: {
      selectedFilterId: string;
    };
    RevisionAuthor: {
      authorName: string;
      profile?: components["schemas"]["TD_MemberProfile"];
    };
    RevisionAuthorInfo: {
      revisionInfo: components["schemas"]["RevisionInfo"];
      author: components["schemas"]["RevisionAuthor"];
    };
    RevisionInfo: {
      revision: string;
      /** Format: int64 */
      date: number;
      message: string;
    };
    RevisionsInReview: {
      repository: components["schemas"]["RepositoryInReview"];
      commits: (components["schemas"]["GitCommitWithGraph"])[];
      read?: (string)[] | null;
    };
    RightDTO: {
      rightCode: components["schemas"]["PermissionIdentifier"];
      name: string;
      group: string;
      description: string;
      targetName: string;
      editable: boolean;
      status: components["schemas"]["RightStatus"];
      modificationAuthor?: components["schemas"]["CPrincipal"];
      /** Format: date-time */
      modificationTimestamp?: string | null;
      dependencies: (string)[];
      optionalFeature?: components["schemas"]["OptionalFeature"];
    };
    RightDescriptorDTO: {
      rightCode: components["schemas"]["PermissionIdentifier"];
      name: string;
      group: string;
      description: string;
      targetName: string;
      dependencies: (string)[];
      optionalFeature?: components["schemas"]["OptionalFeature"];
    };
    RightUpdateDTO: {
      rightCode: components["schemas"]["PermissionIdentifier"];
      status: components["schemas"]["RightStatus"];
    };
    RoleDTO: {
      roleId: string;
      type: components["schemas"]["PermissionRoleType"];
      code?: string | null;
      name: string;
      description: string;
      membersEditable: boolean;
      rightsEditable?: boolean | null;
    };
    Room: {
      id: string;
      archived: boolean;
      name: string;
      channel?: components["schemas"]["M2ChannelRecord"];
      origin?: components["schemas"]["RoomOrigin"];
    };
    RtBlockNode: {
      className: string;
    } & (components["schemas"]["RtBlockUnfurl"] | components["schemas"]["RtTableRow"] | components["schemas"]["RtTableCell"] | components["schemas"]["RtTableHeader"] | components["schemas"]["RtTable"] | components["schemas"]["RtOrderedList"] | components["schemas"]["RtHeading"] | components["schemas"]["RtParagraph"] | components["schemas"]["RtBulletList"] | components["schemas"]["RtCode"] | components["schemas"]["RtBlockquote"] | components["schemas"]["RtHeading"] | components["schemas"]["RtParagraph"] | components["schemas"]["RtCode"] | components["schemas"]["RtBlockquote"] | components["schemas"]["RtHorizontalRule"]);
    RtBlockNodeWithChildren: {
      className: string;
    } & (components["schemas"]["RtTableRow"] | components["schemas"]["RtTableCell"] | components["schemas"]["RtTableHeader"] | components["schemas"]["RtTable"] | components["schemas"]["RtOrderedList"] | components["schemas"]["RtHeading"] | components["schemas"]["RtParagraph"] | components["schemas"]["RtBulletList"] | components["schemas"]["RtCode"] | components["schemas"]["RtBlockquote"]);
    RtBlockUnfurl: {
      href: string;
      title: string;
    };
    RtBlockquote: {
      children: (components["schemas"]["RtBlockNode"])[];
    };
    RtBoldMark: Record<string, never>;
    RtBreak: {
      soft?: boolean | null;
      marks: (components["schemas"]["RtDocumentMark"])[];
    };
    RtBulletList: {
      children: (components["schemas"]["RtListItem"])[];
    };
    RtCode: {
      lang: string;
      children: (components["schemas"]["RtCodeBlockContentNode"])[];
    };
    RtCodeBlockContentNode: {
      className: string;
    } & (components["schemas"]["RtBreak"] | components["schemas"]["RtText"]);
    RtCodeMark: Record<string, never>;
    RtContent: {
      document: components["schemas"]["RtDocument"];
    };
    RtDocument: {
      children: (components["schemas"]["RtBlockNode"])[];
      version: string;
    };
    RtDocumentMark: {
      className: string;
    } & (components["schemas"]["RtBoldMark"] | components["schemas"]["RtCodeMark"] | components["schemas"]["RtItalicMark"] | components["schemas"]["RtLinkMark"] | components["schemas"]["RtStrikeThroughMark"]);
    RtEmoji: {
      emojiName: string;
      marks: (components["schemas"]["RtDocumentMark"])[];
    };
    RtFirstListItemContentNode: {
      className: string;
    } & (components["schemas"]["RtHeading"] | components["schemas"]["RtParagraph"] | components["schemas"]["RtCode"] | components["schemas"]["RtBlockquote"]);
    RtHeading: {
      /** Format: int32 */
      level: number;
      children: (components["schemas"]["RtHeadingContentNode"])[];
      textAlign?: components["schemas"]["RtTextAlign"];
    };
    RtHeadingContentNode: {
      className: string;
    } & (components["schemas"]["RtEmoji"] | components["schemas"]["RtText"] | components["schemas"]["RtImage"] | components["schemas"]["RtUnfurl"] | components["schemas"]["RtMention"]);
    RtHorizontalRule: Record<string, never>;
    RtImage: {
      src: string;
      title?: string | null;
      alt?: string | null;
      marks: (components["schemas"]["RtDocumentMark"])[];
      attrs?: components["schemas"]["RtImageAttrs"];
    };
    /** @deprecated */
    RtImageAttrs: {
      src: string;
      title?: string | null;
      alt?: string | null;
    };
    RtInlineNode: {
      className: string;
    } & (components["schemas"]["RtEmoji"] | components["schemas"]["RtText"] | components["schemas"]["RtBreak"] | components["schemas"]["RtImage"] | components["schemas"]["RtUnfurl"] | components["schemas"]["RtMention"] | components["schemas"]["RtBreak"] | components["schemas"]["RtText"] | components["schemas"]["RtEmoji"] | components["schemas"]["RtText"] | components["schemas"]["RtImage"] | components["schemas"]["RtUnfurl"] | components["schemas"]["RtMention"]);
    RtInlineNodeWithMarks: {
      className: string;
    } & (components["schemas"]["RtEmoji"] | components["schemas"]["RtText"] | components["schemas"]["RtBreak"] | components["schemas"]["RtImage"] | components["schemas"]["RtUnfurl"] | components["schemas"]["RtMention"]);
    RtItalicMark: Record<string, never>;
    /** @deprecated */
    RtLinkAttrs: {
      href: string;
      title?: string | null;
      mention?: string | null;
      details?: components["schemas"]["RtLinkDetails"];
    };
    RtLinkDetails: {
      className: string;
    } & (components["schemas"]["RtPredefinedMentionLinkDetails"] | components["schemas"]["RtProfileLinkDetails"] | components["schemas"]["RtTeamLinkDetails"]);
    RtLinkMark: {
      href: string;
      title?: string | null;
      mention?: string | null;
      details?: components["schemas"]["RtLinkDetails"];
      attrs?: components["schemas"]["RtLinkAttrs"];
    };
    RtListItem: {
      children: (components["schemas"]["RtBlockNode"])[];
    };
    /** @deprecated */
    RtMention: {
      attrs: components["schemas"]["RtMentionAttrs"];
      marks: (components["schemas"]["RtDocumentMark"])[];
    };
    RtMentionAttrs: {
      className: string;
    } & (components["schemas"]["RtProfileMentionAttrs"] | components["schemas"]["RtPredefinedMentionAttrs"] | components["schemas"]["RtTeamMentionAttrs"]);
    RtOrderedList: {
      /** Format: int32 */
      startNumber: number;
      children: (components["schemas"]["RtListItem"])[];
    };
    RtParagraph: {
      children: (components["schemas"]["RtInlineNode"])[];
      textAlign?: components["schemas"]["RtTextAlign"];
    };
    /** @deprecated */
    RtPredefinedMentionAttrs: {
      type: string;
    };
    RtPredefinedMentionLinkDetails: {
      value: string;
    };
    RtProfileLinkDetails: {
      id: string;
      userName: string;
    };
    /** @deprecated */
    RtProfileMentionAttrs: {
      id: string;
      userName: string;
      href: string;
    };
    RtStrikeThroughMark: Record<string, never>;
    RtTable: {
      children: (components["schemas"]["RtTableRow"])[];
    };
    RtTableCell: {
      children: (components["schemas"]["RtBlockNode"])[];
      /** Format: int32 */
      rowspan: number;
      /** Format: int32 */
      colspan: number;
      colwidth?: (number)[] | null;
      attrs?: components["schemas"]["RtTableCellAttrs"];
    };
    /** @deprecated */
    RtTableCellAttrs: {
      /** Format: int32 */
      rowspan: number;
      /** Format: int32 */
      colspan: number;
      colwidth?: (number)[] | null;
    };
    RtTableHeader: {
      children: (components["schemas"]["RtBlockNode"])[];
      /** Format: int32 */
      rowspan: number;
      /** Format: int32 */
      colspan: number;
      colwidth?: (number)[] | null;
      attrs?: components["schemas"]["RtTableCellAttrs"];
    };
    RtTableRow: {
      children: (components["schemas"]["RtTableRowContent"])[];
    };
    RtTableRowContent: {
      className: string;
    } & (components["schemas"]["RtTableCell"] | components["schemas"]["RtTableHeader"]);
    RtTeamLinkDetails: {
      id: string;
    };
    /** @deprecated */
    RtTeamMentionAttrs: {
      id: string;
      teamName: string;
      href: string;
    };
    RtText: {
      value: string;
      marks: (components["schemas"]["RtDocumentMark"])[];
    };
    RtTextDocumentContent: {
      document: components["schemas"]["RtDocument"];
    };
    RtUnfurl: {
      href: string;
      title: string;
      marks: (components["schemas"]["RtDocumentMark"])[];
      attrs?: components["schemas"]["RtUnfurlAttrs"];
    };
    /** @deprecated */
    RtUnfurlAttrs: {
      href: string;
      title: string;
    };
    SFUDataProducerOptions: {
      id: string;
    };
    SFUProducerOptions: {
      id: string;
      parameters: components["schemas"]["SFUProducerParameters"];
    };
    SFUProducerParameters: {
      mediaKind: components["schemas"]["SFUMediaKind"];
      rtpParameters: string;
      paused: boolean;
      closed: boolean;
    };
    SPackageRepositoryAccessWebhookEvent: {
      projectKey: components["schemas"]["ProjectKey"];
      repository: string;
      repositoryType: components["schemas"]["PackageType"];
    };
    SPackageRepositoryWebhookEvent: {
      projectKey: components["schemas"]["ProjectKey"];
      repository: string;
      repositoryType: components["schemas"]["PackageType"];
      action: components["schemas"]["PackageRepositoryEventAction"];
      packageInfo: components["schemas"]["PackageVersionRef"];
    };
    SRepoCommitsWebhookEvent: {
      projectKey: components["schemas"]["ProjectKey"];
      repository: string;
      commit: components["schemas"]["GitCommitInfoWithChanges"];
    };
    SRepoHeadsWebhookEvent: {
      projectKey: components["schemas"]["ProjectKey"];
      repository: string;
      changes: components["schemas"]["RepoChanges"];
    };
    SSLKeystore: {
      name: string;
      /** Format: full-date */
      created: string;
    };
    SSLKeystoreEndpointAuth: {
      sslKeystore: string;
    };
    SafeMerge: {
      state?: components["schemas"]["SafeMergeState"];
      mergeCommitId: string;
      checks: (components["schemas"]["SafeMergeCheck"])[];
      mergeOptions: components["schemas"]["MergeSelectOptions"];
      startedBy?: components["schemas"]["TD_MemberProfile"];
      /** Format: date-time */
      startedAt?: string | null;
      stoppedBy?: components["schemas"]["TD_MemberProfile"];
      /** Format: int64 */
      duration?: number | null;
      /** Format: int32 */
      attempts?: number | null;
      size?: components["schemas"]["SafeMergeSize"];
    };
    SafeMergeCheck: {
      className: string;
    } & (components["schemas"]["SafeMergeCheck.External"] | components["schemas"]["SafeMergeCheck.Job"]);
    "SafeMergeCheck.External": {
      taskId: string;
    };
    "SafeMergeCheck.Job": {
      executionId: string;
    };
    SafeMergeMessage: {
      type: components["schemas"]["SafeMergeMessage.Type"];
      message: string;
    };
    SafeMergeSize: {
      /** Format: int32 */
      files: number;
      /** Format: int32 */
      additions: number;
      /** Format: int32 */
      deletions: number;
      tooManyFiles: boolean;
    };
    SamlMetadataResponse: {
      className: string;
    } & (components["schemas"]["SamlMetadataResponse.Error"] | components["schemas"]["SamlMetadataResponse.Success"]);
    "SamlMetadataResponse.Error": {
      messages: (string)[];
    };
    "SamlMetadataResponse.Success": {
      metadata: string;
    };
    SamlRegisterNewUserRule: {
      userType: components["schemas"]["RegisterNewUserType"];
      allowed: boolean;
    };
    SavedMessage: {
      id: string;
      channel: components["schemas"]["M2ChannelRecord"];
      message: components["schemas"]["ChannelItemRecord"];
      /** Format: date-time */
      created: string;
      archived: boolean;
      labels: (components["schemas"]["SavedMessageLabel"])[];
    };
    SavedMessageLabel: {
      name: string;
      color: string;
      id: string;
      archived: boolean;
    };
    SavedMessagesLabelInfo: {
      label: components["schemas"]["SavedMessageLabel"];
      /** Format: int64 */
      updated: number;
      /** Format: int32 */
      messagesCount: number;
    };
    SecretParameterRecord: {
      id: string;
      archived: boolean;
      bundleId: string;
      key: string;
      description?: string | null;
      /** Format: date-time */
      createdAt?: string | null;
      createdBy?: components["schemas"]["CPrincipal"];
      /** Format: date-time */
      updatedAt?: string | null;
      updatedBy?: components["schemas"]["CPrincipal"];
      protected?: boolean | null;
      secretReference?: string | null;
    };
    SessionParticipationRecord: {
      id: string;
      /** Format: int64 */
      connectionId: number;
      sessionId: string;
      member?: components["schemas"]["TD_MemberProfile"];
      state: components["schemas"]["ParticipationState"];
      participant?: components["schemas"]["TD_CallParticipant"];
      description?: string | null;
      producers: (components["schemas"]["ProducerOptions"])[];
      dataProducers: (components["schemas"]["DataProducerOptions"])[];
      /** Format: int64 */
      version: number;
      data: components["schemas"]["ParticipantStateData"];
    };
    SettingsValue: {
      emailNotificationsEnabled: boolean;
      firstDayOfWeek: components["schemas"]["Weekday"];
      darkTheme?: components["schemas"]["DarkTheme"];
      themeName?: string | null;
      calendarView?: string | null;
      notificationEmail?: components["schemas"]["TD_ProfileEmail"];
      draftType?: components["schemas"]["DraftDocumentType"];
      todoFilters?: boolean | null;
      defaultProject?: components["schemas"]["PR_Project"];
    };
    SpaceIssueId: {
      id: string;
    };
    SpaceNewsFeedChannel: {
      notificationDefaults?: components["schemas"]["ChannelSpecificDefaults"];
      supportReplies?: boolean | null;
    };
    SprintLaunch: {
      className: string;
    } & (components["schemas"]["SprintLaunch.Immediate"] | components["schemas"]["SprintLaunch.Manual"] | components["schemas"]["SprintLaunch.Scheduled"]);
    "SprintLaunch.Immediate": {
      moveUnresolvedIssues: boolean;
      notifySubscribers: boolean;
    };
    "SprintLaunch.Manual": Record<string, never>;
    "SprintLaunch.Scheduled": {
      /** Format: date-time */
      time: string;
      moveUnresolvedIssues: boolean;
      notifySubscribers: boolean;
    };
    SprintRecord: {
      id: string;
      archived: boolean;
      board: components["schemas"]["BoardRecord"];
      name: string;
      state: components["schemas"]["SprintState"];
      /** Format: full-date */
      from: string;
      /** Format: full-date */
      to: string;
      description?: string | null;
      launch: components["schemas"]["SprintLaunch"];
    };
    SshKeyData: {
      fingerprint: string;
      sha256fingerprint?: string | null;
      publicKey: string;
      comment: string;
      /** Format: date-time */
      createdAt?: string | null;
      /** Format: date-time */
      lastUsed?: string | null;
      lastResource?: string | null;
    };
    Sticker: {
      id: string;
      symbol?: string | null;
      attachmentId?: string | null;
      /** Format: int32 */
      width?: number | null;
      /** Format: int32 */
      height?: number | null;
      variants?: (components["schemas"]["StickerVariant"])[] | null;
      animated?: boolean | null;
      archived: boolean;
    };
    StickerContentDetails: {
      sticker: components["schemas"]["Sticker"];
      pack?: components["schemas"]["StickerPackInfo"];
    };
    StickerPackInfo: {
      id: string;
      name: string;
      favoriteByDefault: boolean;
      archived: boolean;
      private: boolean;
      stickers: (components["schemas"]["Sticker"])[];
      /** Format: date-time */
      addedAt?: string | null;
    };
    StickerVariant: {
      id: string;
      name?: string | null;
      /** Format: int32 */
      width: number;
      /** Format: int32 */
      height: number;
    };
    StringCFConstraint: {
      /** Format: int32 */
      min?: number | null;
      /** Format: int32 */
      max?: number | null;
      pattern?: string | null;
      message?: string | null;
    };
    StringCFFilter: {
      query: string;
    };
    StringCFType: Record<string, never>;
    StringCFValue: {
      value?: string | null;
    };
    StringListCFType: Record<string, never>;
    StringListCFValue: {
      values: (string)[];
    };
    SubjectResponsibilitiesTable: {
      subjectId: string;
      name?: string | null;
      reusedInProjects: (string)[];
      responsibilityRecords: (components["schemas"]["ResponsibilityRecord"])[];
    };
    Subscription: {
      subjectCode: string;
      filters: (components["schemas"]["SubscriptionFilter"])[];
      eventTypeCodes: (string)[];
    };
    SubscriptionDTO: {
      id: string;
      name: string;
      enabled: boolean;
      subscription: components["schemas"]["Subscription"];
      privateFeed?: components["schemas"]["PrivateFeed"];
      application?: components["schemas"]["ES_App"];
      requestedAuthentication?: components["schemas"]["SubscriptionRequestedAuthorizations"];
    };
    SubscriptionDefinition: {
      name: string;
      subscription: components["schemas"]["CustomGenericSubscriptionIn"];
    };
    SubscriptionFilter: {
      className: string;
    } & (components["schemas"]["RepoCommitsSubscriptionFilter"] | components["schemas"]["ChatChannelSubscriptionFilter"] | components["schemas"]["AutomationJobSubscriptionFilter"] | components["schemas"]["DocumentCustomSubscriptionFilter"] | components["schemas"]["DocumentFolderCustomSubscriptionFilter"] | components["schemas"]["RdWarmupSubscriptionFilter"] | components["schemas"]["ApplicationsSubscriptionFilter"] | components["schemas"]["ProjectCommonSubscriptionFilter"] | components["schemas"]["RepoHeadsSubscriptionFilter"] | components["schemas"]["MeetingsCommonSubscriptionFilter"] | components["schemas"]["PackagesSubscriptionFilter"] | components["schemas"]["BlogCommonSubscriptionFilter"] | components["schemas"]["ChatMessageReactionSubscriptionFilter"] | components["schemas"]["MemberCommonSubscriptionFilter"] | components["schemas"]["DeploymentsSubscriptionFilter"] | components["schemas"]["AbsenceCommonSubscriptionFilter"] | components["schemas"]["CodeReviewSubscriptionFilter"]);
    SubscriptionFilterIn: {
      className: string;
    } & (components["schemas"]["MemberCommonSubscriptionFilterIn"] | components["schemas"]["RepoCommitsSubscriptionFilterIn"] | components["schemas"]["PackagesSubscriptionFilterIn"] | components["schemas"]["RepoHeadsSubscriptionFilterIn"] | components["schemas"]["ApplicationsSubscriptionFilterIn"] | components["schemas"]["DeploymentsSubscriptionFilterIn"] | components["schemas"]["BlogCommonSubscriptionFilterIn"] | components["schemas"]["ChatMessageReactionSubscriptionFilterIn"] | components["schemas"]["ChatChannelSubscriptionFilterIn"] | components["schemas"]["MeetingsCommonSubscriptionFilterIn"] | components["schemas"]["DocumentCustomSubscriptionFilterIn"] | components["schemas"]["DocumentFolderCustomSubscriptionFilterIn"] | components["schemas"]["AutomationJobSubscriptionFilterIn"] | components["schemas"]["RdWarmupSubscriptionFilterIn"] | components["schemas"]["ProjectCommonSubscriptionFilterIn"] | components["schemas"]["CodeReviewSubscriptionFilterIn"] | components["schemas"]["AbsenceCommonSubscriptionFilterIn"]);
    SubscriptionMetadata: {
      channel: components["schemas"]["M2ChannelRecord"];
      subscription: string;
      subscriptionName: string;
    };
    SubscriptionRequestedAuthorizations: {
      rights: (components["schemas"]["DTO_Right"])[];
      rightCodes: (string)[];
      permissionContext?: components["schemas"]["PermissionContextApi"];
      projects: (components["schemas"]["PR_Project"])[];
    };
    SupportProfileDTO: {
      profile: components["schemas"]["TD_MemberProfile"];
      adminPermissionsGranted: boolean;
    };
    SyntaxMarkup: {
      type?: components["schemas"]["SyntaxMarkupType"];
      range: components["schemas"]["TextRange"];
    };
    SystemFieldSearchFilter: {
      className: string;
    } & (components["schemas"]["AnyOfFilter"] | components["schemas"]["TextQueryFilter"] | components["schemas"]["RangeFilter"] | components["schemas"]["DateRangeFilter"]);
    TD_CallParticipant: {
      className: string;
    } & (components["schemas"]["TD_CallParticipant.App"] | components["schemas"]["TD_CallParticipant.Team"] | components["schemas"]["TD_CallParticipant.User"]);
    "TD_CallParticipant.App": {
      app: components["schemas"]["ES_App"];
    };
    "TD_CallParticipant.Team": {
      team: components["schemas"]["TD_Team"];
    };
    "TD_CallParticipant.User": {
      member: components["schemas"]["TD_MemberProfile"];
    };
    TD_ContactKind: {
      className: string;
    } & (components["schemas"]["TD_ContactKind.Email"] | components["schemas"]["TD_ContactKind.Link"] | components["schemas"]["TD_ContactKind.Messenger"] | components["schemas"]["TD_ContactKind.PhoneNumber"]);
    "TD_ContactKind.Email": Record<string, never>;
    "TD_ContactKind.Link": Record<string, never>;
    "TD_ContactKind.Messenger": {
      messenger: string;
    };
    "TD_ContactKind.PhoneNumber": {
      type: string;
    };
    TD_Language: {
      id: string;
      code: string;
      name: string;
      nativeName: string;
      firstNameTitle: string;
      lastNameTitle: string;
    };
    TD_Location: {
      id: string;
      name: string;
      timezone?: components["schemas"]["ATimeZoneWithOffset"];
      tz?: string | null;
      workdays?: (number)[] | null;
      phones: (string)[];
      emails: (string)[];
      equipment?: (string)[] | null;
      description?: string | null;
      address?: string | null;
      parent?: components["schemas"]["TD_Location"];
      type: string;
      mapId?: string | null;
      /** Format: int32 */
      capacity?: number | null;
      channelId?: string | null;
      archived: boolean;
      equipment2?: (components["schemas"]["TD_LocationEquipmentTypeRecord"])[] | null;
    };
    TD_LocationEquipmentType: {
      name: string;
      archived: boolean;
    };
    TD_LocationEquipmentTypeRecord: {
      id: string;
      name: string;
      archived: boolean;
    };
    TD_LocationMap: {
      id: string;
      picture: string;
      /** Format: date-time */
      created: string;
      /** Format: int32 */
      width?: number | null;
      /** Format: int32 */
      height?: number | null;
    };
    TD_LocationMapPoint: {
      id: string;
      mapId?: string | null;
      /** Format: int32 */
      x: number;
      /** Format: int32 */
      y: number;
      /** Format: date-time */
      created: string;
      memberLocation?: string | null;
      deleted?: boolean | null;
    };
    TD_LocationWithTimeZone: {
      id: string;
      name: string;
      timezone: components["schemas"]["ATimeZoneWithOffset"];
      type?: components["schemas"]["LocationType"];
      parentLocation?: string | null;
    };
    TD_MemberInLocationMap: {
      profile: components["schemas"]["TD_MemberProfile"];
      memberLocation: components["schemas"]["TD_MemberLocation"];
      locationMapPoint?: components["schemas"]["TD_LocationMapPoint"];
    };
    TD_MemberLocation: {
      id: string;
      location: components["schemas"]["TD_Location"];
      locationMapPoints?: (components["schemas"]["TD_LocationMapPoint"])[] | null;
      /** Format: full-date */
      since?: string | null;
      /** Format: full-date */
      till?: string | null;
      member: components["schemas"]["TD_MemberProfile"];
      archived: boolean;
    };
    TD_MemberProfile: {
      id: string;
      username: string;
      name: components["schemas"]["TD_ProfileName"];
      speaksEnglish: boolean;
      smallAvatar?: string | null;
      avatar?: string | null;
      profilePicture?: string | null;
      languages: (components["schemas"]["TD_ProfileLanguage"])[];
      archived: boolean;
      notAMember: boolean;
      suspended?: boolean | null;
      /** Format: date-time */
      suspendedAt?: string | null;
      /** Format: full-date */
      joined?: string | null;
      /** Format: date-time */
      leftAt?: string | null;
      external?: boolean | null;
      externalLight?: boolean | null;
      memberships: (components["schemas"]["TD_Membership"])[];
      unapprovedMemberships?: (components["schemas"]["TD_Membership"])[] | null;
      topics: (components["schemas"]["Topic"])[];
      locationHistory: (components["schemas"]["TD_MemberLocation"])[];
      /** Format: full-date */
      left?: string | null;
      absences: (components["schemas"]["AbsenceRecord"])[];
      folderWithChildren: components["schemas"]["DocumentFolderWithChildren"];
      membershipHistory: (components["schemas"]["TD_Membership"])[];
      externalId?: string | null;
      status: components["schemas"]["TwoFactorAuthenticationStatus"];
      about?: string | null;
      avatarCropSquare?: components["schemas"]["AvatarCropSquare"];
      gender?: components["schemas"]["Gender"];
      /** Format: full-date */
      birthday?: string | null;
      logins: (components["schemas"]["ES_ProfileLogin"])[];
      accessSuspended?: boolean | null;
      /** Format: date-time */
      accessSuspendedAt?: string | null;
      managers: (components["schemas"]["TD_MemberProfile"])[];
      locations: (components["schemas"]["TD_MemberLocation"])[];
      emails: (components["schemas"]["TD_ProfileEmail"])[];
      phones: (string)[];
      messengers: (string)[];
      links: (string)[];
      onboardingRequired: boolean;
      showBannerOnLandingPage?: boolean | null;
      showBannerOnProjectPage?: boolean | null;
      showBannerOnTeamDirectoryHomePage?: boolean | null;
      customFields: {
        [key: string]: components["schemas"]["CFValue"] | undefined;
      };
    };
    TD_MemberWithTeam: {
      profile: components["schemas"]["TD_MemberProfile"];
      teams: (components["schemas"]["TD_Team"])[];
    };
    TD_Membership: {
      id: string;
      member: components["schemas"]["TD_MemberProfile"];
      team: components["schemas"]["TD_Team"];
      role: components["schemas"]["TD_Role"];
      lead: boolean;
      manager?: components["schemas"]["TD_MemberProfile"];
      /** Format: full-date */
      since?: string | null;
      /** Format: full-date */
      till?: string | null;
      /** Format: date-time */
      activeSince?: string | null;
      /** Format: date-time */
      activeTill?: string | null;
      requiresApproval: boolean;
      archived: boolean;
      editFor?: components["schemas"]["TD_Membership"];
      pendingEdit?: components["schemas"]["TD_Membership"];
      approver?: components["schemas"]["TD_MemberProfile"];
      customFields: {
        [key: string]: components["schemas"]["CFValue"] | undefined;
      };
    };
    TD_MergedEvent: {
      events: ({
          first: components["schemas"]["TD_Membership"];
          /** Format: int32 */
          second: number;
        })[];
      profile: components["schemas"]["TD_MemberProfile"];
    };
    TD_ProfileEmail: {
      id: string;
      email: string;
      blocked?: boolean | null;
    };
    TD_ProfileLanguage: {
      name?: components["schemas"]["TD_ProfileName"];
      language: components["schemas"]["TD_Language"];
      languageCode?: string | null;
    };
    TD_ProfileName: {
      firstName: string;
      lastName: string;
    };
    TD_ProfileWorkingDays: {
      profile: components["schemas"]["TD_MemberProfile"];
      workingDays: components["schemas"]["TD_WorkingDays"];
    };
    TD_Role: {
      id: string;
      name: string;
      parent?: components["schemas"]["TD_Role"];
      archived: boolean;
    };
    TD_Stats: {
      /** Format: int32 */
      totalMembers: number;
      teams: ({
          first: components["schemas"]["TD_Team"];
          /** Format: int32 */
          second: number;
        })[];
      roles: ({
          first: components["schemas"]["TD_Role"];
          /** Format: int32 */
          second: number;
        })[];
      locations: ({
          first: components["schemas"]["TD_Location"];
          /** Format: int32 */
          second: number;
        })[];
    };
    TD_Team: {
      id: string;
      name: string;
      description: string;
      parent?: components["schemas"]["TD_Team"];
      emails?: (string)[] | null;
      channelId?: string | null;
      archived: boolean;
      disbanded?: boolean | null;
      /** Format: full-date */
      disbandedAt?: string | null;
      externalId?: string | null;
      defaultManager?: components["schemas"]["TD_MemberProfile"];
      memberships: (components["schemas"]["TD_Membership"])[];
      customFields: {
        [key: string]: components["schemas"]["CFValue"] | undefined;
      };
    };
    TD_WorkingDays: {
      id: string;
      /** Format: full-date */
      dateStart?: string | null;
      /** Format: full-date */
      dateEnd?: string | null;
      workingDaysSpec: components["schemas"]["WorkingDaysSpec"];
    };
    TabIndentedLinesBodyIn: {
      text: string;
    };
    TableIdFilterValue: {
      id?: string | null;
    };
    TargetCFFilter: {
      values: (components["schemas"]["TargetCFInputValue"])[];
    };
    TargetCFInputValue: {
      target?: components["schemas"]["TargetIdentifier"];
    };
    TargetCFType: Record<string, never>;
    TargetCFValue: {
      target?: components["schemas"]["DeployTargetRecord"];
    };
    TargetStatusForLinkedIssue: {
      issueId: string;
      issueStatusId?: string | null;
      isExternalIssue?: boolean | null;
    };
    TeamAddedItemDetails: {
      team: components["schemas"]["TD_Team"];
    };
    TeamCFFilter: {
      values: (components["schemas"]["TeamCFInputValue"])[];
    };
    TeamCFInputValue: {
      team?: string | null;
    };
    TeamCFType: Record<string, never>;
    TeamCFValue: {
      team?: components["schemas"]["TD_Team"];
    };
    TeamEvent: {
      meta: components["schemas"]["KMetaMod"];
      team: components["schemas"]["TD_Team"];
    };
    TeamMembershipEvent: {
      meta: components["schemas"]["KMetaMod"];
      membership: components["schemas"]["TD_Membership"];
      team?: {
        old: components["schemas"]["TD_Team"];
        new: components["schemas"]["TD_Team"];
      } | null;
      role?: {
        old: components["schemas"]["TD_Role"];
        new: components["schemas"]["TD_Role"];
      } | null;
      lead?: {
        old: boolean;
        new: boolean;
      } | null;
      manager?: {
        old: components["schemas"]["TD_MemberProfile"];
        new: components["schemas"]["TD_MemberProfile"];
      } | null;
      since?: {
        /** Format: date-time */
        old: string;
        /** Format: date-time */
        new: string;
      } | null;
      till?: {
        /** Format: date-time */
        old: string;
        /** Format: date-time */
        new: string;
      } | null;
      deleted?: {
        old: boolean;
        new: boolean;
      } | null;
      approvedBy?: {
        old: components["schemas"]["TD_MemberProfile"];
        new: components["schemas"]["TD_MemberProfile"];
      } | null;
    };
    TeamPermissionTarget: {
      team: string;
    };
    TestConnectionResult: {
      success: boolean;
      reason?: string | null;
      dangerBranches: (string)[];
    };
    TestFailedDTO: Record<string, never>;
    TextDocument: {
      id: string;
      /** Format: int64 */
      resetCounter: number;
      /** Format: int64 */
      version?: number | null;
      type: components["schemas"]["DraftDocumentType"];
      text: string;
      model?: string | null;
      attachments?: (components["schemas"]["AttachmentInfo"])[] | null;
      mentions?: (components["schemas"]["ResolvedMentionLink"])[] | null;
    };
    TextDocumentBodyConvertTypeIn: {
      type: components["schemas"]["DraftDocumentType"];
    };
    TextDocumentBodyCreateInBase: {
      className: string;
    } & components["schemas"]["TextDocumentBodyCreateTypedIn"];
    TextDocumentBodyCreateTypedIn: {
      docContent: components["schemas"]["TextDocumentContent"];
    };
    TextDocumentBodyInfo: {
      textDocument?: components["schemas"]["TextDocumentRecord"];
      textDocumentId?: string | null;
      textType?: components["schemas"]["DraftDocumentType"];
    };
    TextDocumentBodyUpdateIn: {
      docContent: components["schemas"]["TextDocumentContent"];
    };
    TextDocumentBodyUpdateInBase: {
      className: string;
    } & (components["schemas"]["TextDocumentBodyConvertTypeIn"] | components["schemas"]["TextDocumentBodyUpdateIn"]);
    TextDocumentContent: {
      className: string;
    } & (components["schemas"]["MdTextDocumentContent"] | components["schemas"]["RtTextDocumentContent"]);
    TextDocumentHttpBody: {
      docContent: components["schemas"]["TextDocumentContent"];
      attachments: (components["schemas"]["AttachmentInfo"])[];
    };
    TextDocumentRecord: {
      id: string;
      archived: boolean;
      type: components["schemas"]["DraftDocumentType"];
      attachments?: (components["schemas"]["AttachmentInfo"])[] | null;
      mentions?: (components["schemas"]["ResolvedMentionLink"])[] | null;
    };
    TextQueryCFFilter: {
      className: string;
    } & (components["schemas"]["VcsCommitCFFilter"] | components["schemas"]["ContactCFFilter"] | components["schemas"]["StringCFFilter"] | components["schemas"]["AutonumberCFFilter"]);
    TextQueryFilter: {
      query: string;
    };
    TextRange: {
      /** Format: int32 */
      start: number;
      /** Format: int32 */
      length: number;
    };
    ThreadContactsRecord: {
      className: string;
    } & components["schemas"]["CRThreadContactsRecord"];
    ThrottledLogin: {
      login: string;
      /** Format: date-time */
      throttledUntil: string;
    };
    TierEntityUsage: {
      /** Format: int32 */
      usage: number;
      /** Format: int32 */
      limit: number;
    };
    TierFeatureLimits: {
      tier: components["schemas"]["Tier"];
      /** Format: int64 */
      storageLimit?: number | null;
      trueTier?: components["schemas"]["Tier"];
      hasCardVerifiedAdmin?: boolean | null;
      applications: components["schemas"]["TierEntityUsage"];
      /** Format: int32 */
      searchHistoryLimit: number;
      availableTrials?: (components["schemas"]["AvailableTrial"])[] | null;
    };
    TimeInterval: {
      since: components["schemas"]["TimeOfDay"];
      till: components["schemas"]["TimeOfDay"];
    };
    TimeOfDay: {
      /** Format: int32 */
      hours: number;
      /** Format: int32 */
      minutes: number;
      /** Format: int32 */
      seconds?: number | null;
    };
    TimeOutDTO: Record<string, never>;
    TimeTrackingItem: {
      id: string;
      user: components["schemas"]["TD_MemberProfile"];
      project: components["schemas"]["PR_Project"];
      /** Format: full-date */
      date: string;
      /** Format: duration */
      duration: string;
      description?: string | null;
      subjectType: components["schemas"]["TimeTrackingSubjectType"];
      subject: string;
      deleted?: boolean | null;
    };
    TodayBillingReport: {
      plan: components["schemas"]["PurchasedBillingPlan"];
      /** Format: int32 */
      activeUsers: number;
      /** Format: int32 */
      userUsage: number;
      /** Format: double */
      userCost: number;
      /** Format: int32 */
      activeGuests?: number | null;
      /** Format: int32 */
      paidActiveGuests?: number | null;
      /** Format: int32 */
      freeActiveGuests?: number | null;
      /** Format: double */
      guestCost?: number | null;
      /** Format: int32 */
      activeMembers?: number | null;
      /** Format: int32 */
      activeLegacyExternalCollaborators?: number | null;
      /** Format: int32 */
      activeExternalCollaborators?: number | null;
      /** Format: int64 */
      storageAllocationB?: number | null;
      /** Format: int64 */
      storageTotalUsage: number;
      /** Format: double */
      storageCost: number;
      /** Format: int64 */
      bandwidthTotalUsage: number;
      /** Format: double */
      bandwidthCost: number;
      /** Format: int64 */
      ciUsage: number;
      /** Format: double */
      ciCost: number;
      /** Format: int64 */
      appUsage: number;
      /** Format: int64 */
      chatUsage: number;
      /** Format: double */
      totalCost: number;
    };
    TodoContent: {
      originalText: string;
      link?: string | null;
      kind?: components["schemas"]["TodoItemContentKind"];
      principal?: components["schemas"]["CPrincipal"];
      /** Format: int64 */
      time?: number | null;
      text: string;
      extId?: string | null;
      unfurls?: (components["schemas"]["Unfurl"])[] | null;
    };
    TodoItemContent: {
      className: string;
    } & (components["schemas"]["TodoItemContentText"] | components["schemas"]["TodoContent"] | components["schemas"]["TodoItemContentMdText"]);
    TodoItemContentMdText: {
      text: string;
      mdMarkup: components["schemas"]["MdMarkup"];
    };
    TodoItemContentText: {
      text: string;
    };
    TodoItemRecord: {
      id: string;
      archived: boolean;
      /** Format: date-time */
      created: string;
      /** Format: date-time */
      updated: string;
      content: components["schemas"]["TodoItemContent"];
      _status: string;
      /** Format: full-date */
      dueDate?: string | null;
      /** Format: date-time */
      dueTime?: string | null;
      notificationRequired?: boolean | null;
    };
    TodoItemUnfurlContext: {
      userId: string;
      todoItemId: string;
    };
    ToggleableProjectFeaturePinnedItem: {
      value: components["schemas"]["ProjectFeaturePinnedItem"];
      isEnabled: boolean;
    };
    ToggleableProjectFeaturePins: {
      feature: components["schemas"]["ProjectFeature"];
      items: (components["schemas"]["ToggleableProjectFeaturePinnedItem"])[];
    };
    TopLevelPageUiExtensionApi: {
      displayName: string;
      description?: string | null;
      uniqueCode: string;
      iframeUrl?: string | null;
    };
    TopLevelPageUiExtensionIn: {
      displayName: string;
      description?: string | null;
      uniqueCode: string;
      iframeUrl?: string | null;
    };
    Topic: {
      id: string;
      archived: boolean;
      name: string;
      parent?: components["schemas"]["Topic"];
      project?: components["schemas"]["PR_Project"];
      responsible: (components["schemas"]["TD_MemberProfile"])[];
    };
    TrackedBranchesInReview: {
      repository: string;
      branches: (components["schemas"]["BranchInfo"])[];
    };
    TrackerIssueFieldOrder: {
      id: string;
      fields: (components["schemas"]["IssueFieldOrder"])[];
      archived: boolean;
    };
    TrackerIssueFieldVisibility: {
      id: string;
      systemIssueFieldVisibilities: (components["schemas"]["IssueFieldVisibility"])[];
      archived: boolean;
    };
    TrustedCertificate: {
      id: string;
      alias: string;
      data: string;
      info: components["schemas"]["CertificateInfo"];
      archived: boolean;
    };
    TwoFactorAuthenticationRequirement: {
      className: string;
    } & (components["schemas"]["TwoFactorAuthenticationRequirement.NotRequired"] | components["schemas"]["TwoFactorAuthenticationRequirement.Required"]);
    "TwoFactorAuthenticationRequirement.NotRequired": Record<string, never>;
    "TwoFactorAuthenticationRequirement.Required": Record<string, never>;
    TwoFactorAuthenticationSecret: {
      secretKey: string;
      qrCode: components["schemas"]["QRCode"];
      scratchCodes: (number)[];
    };
    TypographySettings: {
      fontLigaturesInRegularText?: boolean | null;
      fontLigaturesInCodeSnippets?: boolean | null;
      limitLineLengthInChatMessages?: boolean | null;
    };
    UA_JetBrainsUserAgreement: {
      content: string;
      version: components["schemas"]["UA_Version"];
      /** Format: date-time */
      updated: string;
    };
    UA_JetBrainsUserAgreementStatus: {
      className: string;
    } & (components["schemas"]["UA_JetBrainsUserAgreementStatus.Accepted"] | components["schemas"]["UA_JetBrainsUserAgreementStatus.NotAccepted"]);
    "UA_JetBrainsUserAgreementStatus.Accepted": {
      profile: components["schemas"]["TD_MemberProfile"];
      version: components["schemas"]["UA_Version"];
      /** Format: date-time */
      accepted: string;
    };
    "UA_JetBrainsUserAgreementStatus.NotAccepted": {
      profile: components["schemas"]["TD_MemberProfile"];
    };
    UA_UserAgreement: {
      id: string;
      content: string;
      version: components["schemas"]["UA_Version"];
      /** Format: date-time */
      updated: string;
    };
    UA_UserAgreementStatus: {
      className: string;
    } & (components["schemas"]["UA_UserAgreementStatus.Accepted"] | components["schemas"]["UA_UserAgreementStatus.NotAccepted"]);
    "UA_UserAgreementStatus.Accepted": {
      profile: components["schemas"]["TD_MemberProfile"];
      userAgreement: components["schemas"]["UA_UserAgreement"];
      /** Format: date-time */
      accepted: string;
    };
    "UA_UserAgreementStatus.NotAccepted": {
      profile: components["schemas"]["TD_MemberProfile"];
    };
    UA_Version: {
      /** Format: int32 */
      major: number;
      /** Format: int32 */
      minor: number;
    };
    Unfurl: {
      title: string;
      link: string;
      text: string;
      details?: components["schemas"]["UnfurlDetails"];
      sitename?: string | null;
      image?: string | null;
      imageMime?: string | null;
      /** Format: int32 */
      imageWidth?: number | null;
      /** Format: int32 */
      imageHeight?: number | null;
      video?: string | null;
      videoIFrame?: string | null;
      videoMime?: string | null;
      /** Format: int32 */
      videoHeight?: number | null;
      /** Format: int32 */
      videoWidth?: number | null;
      favicon?: string | null;
      alwaysInline?: boolean | null;
      onlyForCustomLinks?: boolean | null;
      viewTypes?: (components["schemas"]["UnfurlViewType"])[] | null;
    };
    UnfurlActionPayload: {
      actionId: string;
      actionValue: string;
      link: string;
      context: components["schemas"]["ApplicationUnfurlContext"];
      clientId: string;
      userId: string;
      verificationToken?: string | null;
    };
    UnfurlAttachment: {
      unfurl: components["schemas"]["Unfurl"];
      id: string;
      onlyVisibleToYou?: boolean | null;
    };
    UnfurlDeployTargetDetails: {
      targetRef: components["schemas"]["DeployTargetRecord"];
      targetName?: string | null;
      showLinkIcon?: boolean | null;
      skipDetailsRender?: boolean | null;
    };
    UnfurlDeploymentDetails: {
      deploymentRef: components["schemas"]["DeploymentRecord"];
      showLinkIcon?: boolean | null;
      showDetails?: boolean | null;
      showStatus?: boolean | null;
    };
    UnfurlDetails: {
      className: string;
    } & (components["schemas"]["UnfurlDetailsRole"] | components["schemas"]["UnfurlDetailsArticle"] | components["schemas"]["UnfurlDetailsCommit"] | components["schemas"]["UnfurlDetailsIssueTag"] | components["schemas"]["UnfurlDetailsChat"] | components["schemas"]["UnfurlDetailsChecklist"] | components["schemas"]["AutomationJobExecutionUnfurlDetails"] | components["schemas"]["UnfurlDetailsShortCommit"] | components["schemas"]["UnfurlDetailsIssueStatus"] | components["schemas"]["UnfurlDetailsIssueImportTransaction"] | components["schemas"]["UnfurlDetailsSprint"] | components["schemas"]["UnfurlDetailsDateTimeRange"] | components["schemas"]["UnfurlDetailsIssue"] | components["schemas"]["UnfurlDetailsApplication"] | components["schemas"]["AutomationJobUnfurlDetails"] | components["schemas"]["CallSessionUnfurlDetails"] | components["schemas"]["UnfurlDetailsReviewDescriptionDiff"] | components["schemas"]["UnfurlDetailsTeam"] | components["schemas"]["UnfurlDetailsRepositoryBranch"] | components["schemas"]["UnfurlDetailsCodeReview"] | components["schemas"]["UnfurlDetailsMeeting"] | components["schemas"]["UnfurlDetailsPackageDetails"] | components["schemas"]["UnfurlDeploymentDetails"] | components["schemas"]["UnfurlDetailsExternalIssue"] | components["schemas"]["UnfurlDetailsTextDiff"] | components["schemas"]["UnfurlDetailsSnapshotDiff"] | components["schemas"]["UnfurlDetailsProject"] | components["schemas"]["UnfurlDetailsFolder"] | components["schemas"]["UnfurlDetailsChatLink"] | components["schemas"]["UnfurlDetailsIssueId"] | components["schemas"]["UnfurlDetailsDateTime"] | components["schemas"]["UnfurlDetailsProfile"] | components["schemas"]["UnfurlDetailsExternalIssueId"] | components["schemas"]["UnfurlDetailsNewIssueAction"] | components["schemas"]["UnfurlDetailsDraft"] | components["schemas"]["DocumentHistoryUnfurlDetails"] | components["schemas"]["UnfurlDeployTargetDetails"] | components["schemas"]["UnfurlDetailsLocation"] | components["schemas"]["UnfurlDetailsImage"] | components["schemas"]["UnfurlDetailsIssue"] | components["schemas"]["UnfurlDetailsExternal"] | components["schemas"]["UnfurlDetailsMeeting"] | components["schemas"]["UnfurlDetailsImage"] | components["schemas"]["UnfurlDetailsCodeDiffSnippet"] | components["schemas"]["ChannelItemSnapshot"] | components["schemas"]["UnfurlDetailsMC"] | components["schemas"]["UnfurlDetailsArticle"] | components["schemas"]["UnfurlDetailsCodeSnippet"] | components["schemas"]["AutomationJobUnfurlDetails"] | components["schemas"]["AutomationJobExecutionUnfurlDetails"] | components["schemas"]["CallSessionUnfurlDetails"] | components["schemas"]["UnfurlDeployTargetDetails"] | components["schemas"]["UnfurlDetailsCommitsInCodeReview"]);
    UnfurlDetailsApplication: {
      app: components["schemas"]["ES_App"];
    };
    UnfurlDetailsArticle: {
      article: components["schemas"]["ArticleRecord"];
      content?: components["schemas"]["ArticleContentRecord"];
      channel?: components["schemas"]["ArticleChannelRecord"];
      details?: components["schemas"]["ArticleDetailsRecord"];
    };
    UnfurlDetailsChat: {
      channel: string;
      title: string;
    };
    UnfurlDetailsChatLink: {
      contactKey: string;
      title: string;
    };
    UnfurlDetailsChecklist: {
      checklist: components["schemas"]["Checklist"];
    };
    UnfurlDetailsCodeDiffSnippet: {
      header: components["schemas"]["MCMessage"];
      headerAttachments: (components["schemas"]["AttachmentInfo"])[];
      lines: (components["schemas"]["InlineDiffLine"])[];
      /** Format: int32 */
      selectedLineIndex: number;
      /** Format: int32 */
      selectedLinesCount: number;
      sourceBranch?: string | null;
      targetBranch?: string | null;
    };
    UnfurlDetailsCodeReview: {
      review: components["schemas"]["CodeReviewRecord"];
      withIcon?: boolean | null;
      withBranchPair: boolean;
      defaultBranchInRepo?: string | null;
      hideIfCannotResolve?: boolean | null;
      reviewState?: components["schemas"]["CodeReviewState"];
      isMerged?: boolean | null;
    };
    UnfurlDetailsCodeSnippet: {
      anchor: components["schemas"]["CodeSnippetAnchor"];
      lines: (components["schemas"]["CodeLine"])[];
    };
    UnfurlDetailsCommit: {
      project: components["schemas"]["PR_Project"];
      repository: string;
      repositoryId?: string | null;
      commitId: string;
      message: string;
      messageUnfurls?: components["schemas"]["CommitMessageUnfurlsRecord"];
      /** Format: date-time */
      commitDate: string;
      /** Format: date-time */
      authorDate?: string | null;
      author: components["schemas"]["GitAuthorInfo"];
      authorProfile?: components["schemas"]["TD_MemberProfile"];
      hideAuthorAndDate?: boolean | null;
      withBranchTags?: boolean | null;
      reviewId?: string | null;
    };
    UnfurlDetailsCommitsInCodeReview: {
      review: components["schemas"]["CodeReviewRecord"];
      commits: (components["schemas"]["UnfurlDetailsCommit"])[];
      /** Format: int32 */
      totalCommitsCount: number;
    };
    UnfurlDetailsDateTime: {
      /** Format: int64 */
      utcMilliseconds: number;
      params?: components["schemas"]["DateTimeViewParams"];
    };
    UnfurlDetailsDateTimeRange: {
      /** Format: int64 */
      since: number;
      /** Format: int64 */
      till: number;
      params?: components["schemas"]["DateTimeViewParams"];
    };
    UnfurlDetailsDraft: {
      draft: string;
      title: string;
      document?: components["schemas"]["Document"];
      strikeThrough?: boolean | null;
    };
    UnfurlDetailsExternal: Record<string, never>;
    UnfurlDetailsExternalIssue: {
      issue: components["schemas"]["ExternalIssue"];
    };
    UnfurlDetailsExternalIssueId: {
      id: components["schemas"]["ExternalIssueId"];
      marketplaceAppId?: string | null;
    };
    UnfurlDetailsFolder: {
      name: string;
      root: boolean;
      folder?: components["schemas"]["DocumentFolder"];
    };
    UnfurlDetailsImage: {
      icon?: string | null;
      title: string;
      image: components["schemas"]["ImageAttachment"];
    };
    UnfurlDetailsIssue: {
      issue: components["schemas"]["Issue"];
      strikeThrough?: boolean | null;
      compact?: boolean | null;
    };
    UnfurlDetailsIssueId: {
      projectId: string;
      issueId: string;
    };
    UnfurlDetailsIssueImportTransaction: {
      importTransaction: components["schemas"]["ImportTransactionRecord"];
    };
    UnfurlDetailsIssueStatus: {
      status: components["schemas"]["IssueStatus"];
    };
    UnfurlDetailsIssueTag: {
      tag: components["schemas"]["PlanningTag"];
      strikeThrough: boolean;
      textSize?: components["schemas"]["MessageTextSize"];
    };
    UnfurlDetailsLocation: {
      location: components["schemas"]["TD_Location"];
      strikeThrough?: boolean | null;
    };
    UnfurlDetailsMC: {
      message: components["schemas"]["MCMessage"];
      inlineUnfurls?: (components["schemas"]["AttachmentInfo"])[] | null;
    };
    UnfurlDetailsMeeting: {
      meeting: components["schemas"]["DTO_Meeting"];
      compact?: boolean | null;
    };
    UnfurlDetailsNewIssueAction: {
      title: string;
      project: components["schemas"]["PR_Project"];
    };
    UnfurlDetailsPackageDetails: {
      repoRef: components["schemas"]["ProjectPackageRepository"];
      packageName?: string | null;
      version?: string | null;
    };
    UnfurlDetailsProfile: {
      profile: components["schemas"]["TD_MemberProfile"];
      strikeThrough?: boolean | null;
    };
    UnfurlDetailsProject: {
      project: components["schemas"]["PR_Project"];
      strikeThrough?: boolean | null;
    };
    UnfurlDetailsRepositoryBranch: {
      project: components["schemas"]["PR_Project"];
      repository: string;
      branchHead: string;
      deleted: boolean;
      isDefault?: boolean | null;
      tagSize?: components["schemas"]["UnfurlDetailsRepositoryBranch.BranchTagSize"];
    };
    UnfurlDetailsReviewDescriptionDiff: {
      snapshotId: string;
      baseSnapshotId: string;
    };
    UnfurlDetailsRole: {
      role: components["schemas"]["TD_Role"];
    };
    UnfurlDetailsShortCommit: {
      project: components["schemas"]["PR_Project"];
      repository: string;
      commitId: string;
      message: string;
      strikeThrough: boolean;
    };
    UnfurlDetailsSnapshotDiff: {
      snapshotId: string;
      baseSnapshotId: string;
    };
    UnfurlDetailsSprint: {
      project: components["schemas"]["PR_Project"];
      sprint: components["schemas"]["SprintRecord"];
      removed?: boolean | null;
    };
    UnfurlDetailsTeam: {
      team: components["schemas"]["TD_Team"];
      strikeThrough?: boolean | null;
    };
    UnfurlDetailsTextDiff: {
      textBefore: string;
      textAfter: string;
    };
    UnfurlsBlockListEntry: {
      link: string;
      prefix: boolean;
      global: boolean;
    };
    UpdateDocumentAccessIn: {
      addAccessTo?: (components["schemas"]["DocumentAccessRecipientIdentifier"])[] | null;
      removeAccessFrom?: (components["schemas"]["PermissionsRecipientIdentifier"])[] | null;
    };
    UpdateErrorDTO: {
      message?: string | null;
      errorType: components["schemas"]["WorkerError"];
    };
    UpdateFolderAccessIn: {
      addAccessTo?: (components["schemas"]["FolderAccessRecipientIdentifier"])[] | null;
      removeAccessFrom?: (components["schemas"]["PermissionsRecipientIdentifier"])[] | null;
      restricted?: boolean | null;
    };
    UpdateIssueStatusOnMergeRequestMerge: {
      review: components["schemas"]["MergeRequestRecord"];
      newStatus?: string | null;
      issuePrefix: string;
      issueId: string;
    };
    UpdatePackageRepositoryAccessIn: {
      addAccessTo?: (components["schemas"]["PackagesAccessRecipientIdentifier"])[] | null;
      removeAccessFrom?: (components["schemas"]["PermissionsRecipientIdentifier"])[] | null;
      restricted?: boolean | null;
    };
    UrlCFType: Record<string, never>;
    UrlCFValue: {
      href?: string | null;
    };
    VaultConnectionRecord: {
      id: string;
      projectId: string;
      url: string;
      name?: string | null;
      namespace?: string | null;
      vaultNamespace?: string | null;
      appRoleEndpointPath: string;
      appRoleId: string;
      /** Format: date-time */
      createdAt: string;
      createdBy: components["schemas"]["CPrincipal"];
      /** Format: date-time */
      updatedAt: string;
      updatedBy: components["schemas"]["CPrincipal"];
      deleted: boolean;
    };
    VcsCFScope: {
      className: string;
    } & components["schemas"]["VcsCFScope.Project"];
    "VcsCFScope.Project": {
      project: components["schemas"]["PR_Project"];
    };
    VcsCFScopeInput: {
      className: string;
    } & components["schemas"]["VcsCFScopeInput.Project"];
    "VcsCFScopeInput.Project": {
      projectId: string;
    };
    VcsCommitCFFilter: {
      query: string;
    };
    VcsCommitCFInputValue: {
      commit?: components["schemas"]["CFCommitIdentifier"];
    };
    VcsCommitCFParameters: {
      vcsCFScope: components["schemas"]["VcsCFScope"];
    };
    VcsCommitCFParametersInput: {
      vcsCFScope: components["schemas"]["VcsCFScopeInput"];
    };
    VcsCommitCFType: Record<string, never>;
    VcsCommitCFValue: {
      commit?: components["schemas"]["CFCommitInfoBase"];
    };
    VcsCommitListCFInputValue: {
      commits: (components["schemas"]["CFCommitIdentifier"])[];
    };
    VcsCommitListCFType: Record<string, never>;
    VcsCommitListCFValue: {
      commits: (components["schemas"]["CFCommitInfoBase"])[];
    };
    VideoAttachment: {
      id: string;
      name?: string | null;
      /** Format: int32 */
      width?: number | null;
      /** Format: int32 */
      height?: number | null;
      /** Format: int64 */
      sizeBytes: number;
    };
    VideoCallChannelItemContent: {
      session: components["schemas"]["CallSession"];
    };
    VoteGroup: {
      variantName: string;
      /** Format: int32 */
      count: number;
      meVote: boolean;
      lastUsers: (components["schemas"]["TD_MemberProfile"])[];
      owner?: components["schemas"]["TD_MemberProfile"];
    };
    WarmupExecutionTrigger: {
      className: string;
    } & (components["schemas"]["WarmupExecutionTrigger.Legacy"] | components["schemas"]["WarmupExecutionTrigger.Manual"] | components["schemas"]["WarmupExecutionTrigger.Scheduled"] | components["schemas"]["WarmupExecutionTrigger.VCS"]);
    "WarmupExecutionTrigger.Legacy": Record<string, never>;
    "WarmupExecutionTrigger.Manual": {
      user?: components["schemas"]["TD_MemberProfile"];
    };
    "WarmupExecutionTrigger.Scheduled": {
      cronExpressions: (string)[];
    };
    "WarmupExecutionTrigger.VCS": Record<string, never>;
    WebhookDeliveryStatusDTO: {
      className: string;
    } & (components["schemas"]["WebhookDeliveryStatusDTO.ExpectedHttpClientError"] | components["schemas"]["WebhookDeliveryStatusDTO.FailedDelivery"] | components["schemas"]["WebhookDeliveryStatusDTO.InternalError"] | components["schemas"]["WebhookDeliveryStatusDTO.Successful"]);
    "WebhookDeliveryStatusDTO.ExpectedHttpClientError": {
      clientError: components["schemas"]["AppMessageDeliveryClientErrorDTO"];
      deliveryId: string;
      /** Format: date-time */
      sentTime: string;
    };
    "WebhookDeliveryStatusDTO.FailedDelivery": {
      deliveryId: string;
      /** Format: int32 */
      responseCode: number;
      message: string;
      /** Format: date-time */
      sentTime: string;
    };
    "WebhookDeliveryStatusDTO.InternalError": {
      deliveryId: string;
      /** Format: date-time */
      sentTime: string;
    };
    "WebhookDeliveryStatusDTO.Successful": {
      deliveryId: string;
      /** Format: int32 */
      responseCode: number;
      /** Format: date-time */
      sentTime: string;
    };
    WebhookEvent: {
      className: string;
    } & (components["schemas"]["CustomEmojiUpdatedEvent"] | components["schemas"]["LocationEvent"] | components["schemas"]["MeetingModWebhookEvent"] | components["schemas"]["TeamEvent"] | components["schemas"]["CodeReviewDiscussionWebhookEvent"] | components["schemas"]["CodeReviewWebhookEvent"] | components["schemas"]["DeploymentWebhookEvent"] | components["schemas"]["ApplicationUnfurlQueueItemsCreatedEvent"] | components["schemas"]["BlogWebhookEvent"] | components["schemas"]["ChatMessageDeletedEvent"] | components["schemas"]["GoogleIntegrationDisconnectedEvent"] | components["schemas"]["CodeReviewUpdatedWebhookEvent"] | components["schemas"]["ProjectEvent"] | components["schemas"]["DocumentWebhookEvent"] | components["schemas"]["ChatMessageReactionRemovedEvent"] | components["schemas"]["TeamMembershipEvent"] | components["schemas"]["RdWarmupEvent"] | components["schemas"]["SRepoCommitsWebhookEvent"] | components["schemas"]["EmailBouncedEvent"] | components["schemas"]["ChannelEvent"] | components["schemas"]["BusinessEntityRelationEvent"] | components["schemas"]["SPackageRepositoryAccessWebhookEvent"] | components["schemas"]["IssueImportTransactionWebhookEvent"] | components["schemas"]["ChatMessageReactionAddedEvent"] | components["schemas"]["PingWebhookEvent"] | components["schemas"]["DocumentMetaWebhookEvent"] | components["schemas"]["CodeReviewParticipantWebhookEvent"] | components["schemas"]["IssueWebhookEvent"] | components["schemas"]["AutomationJobEvent"] | components["schemas"]["ApplicationUnfurlTargetWebhookEvent"] | components["schemas"]["DocumentFolderMetaWebhookEvent"] | components["schemas"]["CustomEmojiAddedEvent"] | components["schemas"]["ApplicationWebhookEvent"] | components["schemas"]["ProfileEvent"] | components["schemas"]["ChatMessageUpdatedEvent"] | components["schemas"]["FeatureFlagWebhookEvent"] | components["schemas"]["AbsenceWebhookEvent"] | components["schemas"]["SRepoHeadsWebhookEvent"] | components["schemas"]["AbsenceApprovalWebhookEvent"] | components["schemas"]["SPackageRepositoryWebhookEvent"] | components["schemas"]["ApplicationSshKeyWebhookEvent"] | components["schemas"]["CustomEmojiDeletedEvent"] | components["schemas"]["CodeReviewCommitsUpdatedWebhookEvent"] | components["schemas"]["DocumentEditorsChangedEvent"] | components["schemas"]["ApplicationAuthorizedWebhookEvent"] | components["schemas"]["DocumentFolderOwnAccessChangedEvent"] | components["schemas"]["ApplicationAuthorizationRequestedEvent"] | components["schemas"]["ChatMessageCreatedEvent"] | components["schemas"]["ProfileOrganizationEvent"]);
    WebhookRecord: {
      id: string;
      archived: boolean;
      app: components["schemas"]["ES_App"];
      subscriptions: (components["schemas"]["SubscriptionDTO"])[];
      name: string;
      description?: string | null;
      useAppEndpoint: boolean;
      endpoint: components["schemas"]["EndpointDTO"];
      useAppEndpointAuth: boolean;
      endpointAuth: components["schemas"]["EndpointAuthDTO"];
      enabled: boolean;
      acceptedHttpResponseCodes: (number)[];
      doRetries: boolean;
      payloadFields?: string | null;
      payloadTemplate?: string | null;
      payloadType?: components["schemas"]["PayloadType"];
    };
    WebhookRequestPayload: {
      verificationToken?: string | null;
      clientId: string;
      webhookId: string;
      payload: components["schemas"]["WebhookEvent"];
    };
    WeekDayLocation: {
      /** Format: int32 */
      day: number;
      remote: boolean;
    };
    WeekDayTimeInterval: {
      /** Format: int32 */
      day: number;
      checked: boolean;
      interval: components["schemas"]["TimeInterval"];
    };
    WidgetSettingsDTO: {
      className: string;
    } & (components["schemas"]["IssuesWidgetSettingsDTO"] | components["schemas"]["FollowedColleagueSettingsDTO"] | components["schemas"]["ReviewsWidgetSettingsDTO"]);
    WidgetSettingsRecord: {
      id: string;
      archived: boolean;
      data?: components["schemas"]["WidgetSettingsDTO"];
      widgetId: string;
    };
    Workday: {
      weekday: string;
      working: boolean;
      /** Format: int32 */
      hours: number;
      /** Format: int32 */
      minutes?: number | null;
    };
    WorkerComputePoolDTO: {
      key: components["schemas"]["ComputePoolKey"];
      name: string;
    };
    WorkerDTO: {
      id: string;
      name: string;
      owner?: components["schemas"]["TD_MemberProfile"];
      ownerPrincipal?: components["schemas"]["CPrincipal"];
      info: components["schemas"]["WorkerInfoDTO"];
      computePool: components["schemas"]["WorkerComputePoolDTO"];
      version: components["schemas"]["WorkerVersionDTO"];
      /** Format: date-time */
      lastAccessTime?: string | null;
      status: components["schemas"]["WorkerStatus"];
      scope: components["schemas"]["WorkerScope"];
      suspended: boolean;
      projects?: (components["schemas"]["PR_Project"])[] | null;
      tags: (components["schemas"]["WorkerTagDTO"])[];
      stepsStats: components["schemas"]["WorkerStepsStatsDTO"];
      workerStats: components["schemas"]["WorkerStatsDTO"];
      workerCapabilities: (components["schemas"]["WorkerCapability"])[];
      permanentTokenInfo?: components["schemas"]["WorkerPermanentTokenInfoDTO"];
    };
    WorkerInfoDTO: {
      osType?: components["schemas"]["WorkerOSType"];
      osName?: string | null;
      osArch?: string | null;
      osVersion?: string | null;
      hostname?: string | null;
    };
    WorkerPermanentTokenInfoDTO: {
      /** Format: date-time */
      created: string;
    };
    WorkerStatsDTO: {
      volumeFreeSpace?: string | null;
      diskPressure: boolean;
      cpuLimit?: string | null;
      memoryLimit?: string | null;
    };
    WorkerStepsStatsDTO: {
      activity: ({
          /** Format: full-date */
          first: string;
          /** Format: int32 */
          second: number;
        })[];
    };
    WorkerTagDTO: {
      name: string;
    };
    WorkerVersionDTO: {
      workerVersion?: string | null;
      updateError?: components["schemas"]["UpdateErrorDTO"];
    };
    WorkingDaysSpec: {
      days: (components["schemas"]["Workday"])[];
      workingHours?: (components["schemas"]["WeekDayTimeInterval"])[] | null;
      notificationHours?: (components["schemas"]["WeekDayTimeInterval"])[] | null;
      timezone?: components["schemas"]["ATimeZone"];
      boundWeekdays?: (number)[] | null;
      locations?: (components["schemas"]["WeekDayLocation"])[] | null;
    };
    XScopeApi: {
      className: string;
    } & (components["schemas"]["XScopeApi.All"] | components["schemas"]["XScopeApi.None"] | components["schemas"]["XScopeApi.Scope"]);
    "XScopeApi.All": Record<string, never>;
    "XScopeApi.None": Record<string, never>;
    "XScopeApi.Scope": {
      grants: (components["schemas"]["XScopeGrantApi"])[];
    };
    XScopeGrantApi: {
      context: components["schemas"]["PermissionContextApi"];
      right: components["schemas"]["RightDescriptorDTO"];
    };
    /** @enum {string} */
    AbsenceListMode: "All" | "WithAccessibleReasonUnapproved" | "WithAccessibleReasonAll";
    /** @enum {string} */
    AccessType: "PUBLIC" | "CONFIDENTIAL" | "RESTRICTED";
    /** @enum {string} */
    AllChannelsFilter: "CreatedByMe" | "Subscribed";
    /** @enum {string} */
    AllChannelsSortColumn: "Name" | "Subscribers" | "Created";
    /** @enum {string} */
    AppConnectionStatus: "CONNECTING" | "FAILED_TO_CONNECT" | "RECONNECTING" | "CONNECTED";
    /** @enum {string} */
    AppUninstallationStatus: "SENDING_UNINSTALL_PAYLOAD" | "RETRYING_SENDING_UNINSTALL_PAYLOAD" | "FAILED" | "UNINSTALLED";
    /** @enum {string} */
    ApplicationType: "Application" | "InternalApp" | "MarketplaceApp";
    /** @enum {string} */
    AppsOrdering: "NAME_A_TO_Z" | "NAME_Z_TO_A" | "LAST_EDITED";
    /** @enum {string} */
    BuiltInIssueField: "ID" | "DUE_DATE" | "ATTACHMENTS" | "STATUS" | "TITLE" | "DESCRIPTION" | "TAGS" | "ASSIGNEE" | "ATTACHMENT_COUNT" | "SUBITEMS_COUNT";
    /** @enum {string} */
    BusyStatus: "Busy" | "Free";
    /** @enum {string} */
    CDomainStatus: "AVAILABLE" | "OCCUPIED" | "BLOCKED";
    /** @enum {string} */
    ChecklistSorting: "UPDATED" | "TITLE" | "FAV_TITLE";
    /** @enum {string} */
    CodeDiscussionSuggestedEditState: "Accepted" | "Rejected" | "Deleted";
    /** @enum {string} */
    CodeIssueLevel: "NONE" | "NOTE" | "WARNING" | "ERROR";
    /** @enum {string} */
    CodeReviewParticipantRole: "Reviewer" | "Author" | "Watcher";
    /** @enum {string} */
    CodeReviewState: "Opened" | "Closed" | "Deleted";
    /** @enum {string} */
    CodeReviewStateFilter: "Opened" | "Closed" | "RequiresAuthorAttention" | "NeedsReview" | "Merged";
    /** @enum {string} */
    CodeReviewUnfurlContextField: "Title" | "Description";
    /** @enum {string} */
    ColumnSortOrder: "ASC" | "DESC";
    /** @enum {string} */
    CommitExecutionStatus: "SCHEDULED" | "PENDING" | "READY_TO_START" | "FAILED_TO_START" | "RUNNING" | "FAILING" | "SUCCEEDED" | "TERMINATED" | "FAILED" | "HANGING";
    /** @enum {string} */
    ConnectionTopology: "MESH" | "SFU";
    /** @enum {string} */
    CreateExternalIssueProjectError: "DUPLICATE_ISSUE_PREFIX";
    /** @enum {string} */
    CustomFieldType: "AUTONUMBER" | "BOOLEAN" | "DATE" | "DATE_TIME" | "DOCUMENT" | "ENUM" | "INTEGER" | "ISSUE" | "LOCATION" | "OPEN_ENUM" | "PERCENTAGE" | "PROFILE" | "PROJECT" | "STRING" | "TEAM" | "URL" | "COMMIT";
    /** @enum {string} */
    DarkTheme: "AUTO" | "ENABLED" | "DISABLED";
    /** @enum {string} */
    DashboardContainerType: "OLD_PERSONAL" | "PROJECT" | "PERSONAL";
    /** @enum {string} */
    DeploymentIdentifierStatus: "deploying" | "current" | "scheduled";
    /** @enum {string} */
    DeploymentStatus: "SCHEDULED" | "DEPLOYING" | "FAILED" | "CURRENT" | "OBSOLETE" | "HANGING";
    /** @enum {string} */
    DeploymentSyncStatus: "SYNCED" | "DIRTY" | "SYNCING" | "FAILED";
    /** @enum {string} */
    DevConfigurationHookTrigger: "AFTER_USER_ASSIGNED";
    /** @enum {string} */
    DiffLineType: "ADDED" | "DELETED" | "MODIFIED" | "FILTERED_ADDED" | "FILTERED_DELETED" | "FILTERED" | "FILTERED_MODIFIED" | "CONFLICT_OLD" | "CONFLICT_NEW";
    /** @enum {string} */
    DocumentBodyType: "TEXT" | "CHECKLIST" | "FILE";
    /** @enum {string} */
    DraftDocumentType: "RICH_TEXT" | "WYSIWYG" | "MARKDOWN" | "NEW_RICH_TEXT";
    /** @enum {string} */
    DurationTextFormat: "WEEKS" | "DAYS" | "HOURS";
    /** @enum {string} */
    EmojiSearchMatchType: "Name" | "OtherName" | "Emoticon" | "Unicode";
    /** @enum {string} */
    EndpointAppLevelAuthUpdateType: "PublicKeySignature" | "SigningKey" | "Bearer" | "Basic";
    /** @enum {string} */
    EnumValueOrdering: "NAME_ASC" | "NAME_DESC";
    /** @enum {string} */
    EnvVarType: "PLAIN_TEXT" | "PROJECT_PARAMETER" | "PROJECT_SECRET";
    /** @enum {string} */
    EventConferenceKind: "NONE" | "GOOGLE_MEET" | "SPACE_TELEKOM" | "CUSTOM";
    /** @enum {string} */
    EventParticipationStatus: "GOING" | "NOT_GOING" | "NOT_SURE" | "WAITING_FOR_RESPONSE";
    /** @enum {string} */
    ExecutionStatus: "SCHEDULED" | "PENDING" | "READY_TO_START" | "RUNNING" | "FINISHING" | "FINISHED" | "TERMINATING" | "TERMINATED" | "HIBERNATING" | "HIBERNATED" | "RESTARTING" | "FAILED" | "SKIPPED";
    /** @enum {string} */
    ExtendedTypeScopeType: "Org" | "Container";
    /** @enum {string} */
    ExternalIssueCodeLinkingEventsShape: "Transactions" | "StatefulIssues" | "StatefulCodeEntities";
    /** @enum {string} */
    FailureConditionType: "NON_ZERO_EXIT_CODE" | "TEST_FAILED" | "OUT_OF_MEMORY" | "TIME_OUT";
    /** @enum {string} */
    FeatureFlagStatus: "WIP" | "EXPERIMENTAL" | "INTERNAL";
    /** @enum {string} */
    FetchCredentials: "NONE" | "PASSWORD" | "SSH" | "TOKEN";
    /** @enum {string} */
    FileDataType: "FILE" | "DIR";
    /** @enum {string} */
    Gender: "Female" | "Male" | "Other" | "NotSpecified";
    /** @enum {string} */
    GitCommitChangeType: "ADDED" | "DELETED" | "MODIFIED";
    /** @enum {string} */
    GitEntryType: "EXE_FILE" | "FILE" | "DIR" | "GIT_LINK" | "SYM_LINK";
    /** @enum {string} */
    "GitFileAttribute.AttributeState": "Set" | "Unset" | "Custom";
    /** @enum {string} */
    GitFileType: "TEXT" | "LARGE" | "LINK" | "IMAGE" | "BINARY_OTHER";
    /** @enum {string} */
    GitGraphEdgeLineStyle: "SOLID" | "DASHED" | "DOTTED";
    /** @enum {string} */
    GitGraphEdgeType: "UP" | "DOWN";
    /** @enum {string} */
    GitMergeMode: "FF" | "FF_ONLY" | "NO_FF";
    /** @enum {string} */
    GitMergeStatus: "Success" | "SuccessfulFastForward" | "Conflict" | "AlreadyMerged" | "MultipleMergeBase" | "TooManyChanges" | "Error";
    /** @enum {string} */
    GitMergeStatusHttp: "SUCCESSFUL_MERGE" | "SUCCESSFUL_FAST_FORWARD" | "ALREADY_MERGED";
    /** @enum {string} */
    GitRebaseMode: "FF" | "NO_FF";
    /** @enum {string} */
    GitSquashMode: "ALL" | "AUTO" | "NONE";
    /** @enum {string} */
    GrammarDictionaryType: "OTHER" | "SPELLING";
    /** @enum {string} */
    HA_Method: "REST_CREATE" | "REST_QUERY" | "REST_GET" | "REST_UPDATE" | "REST_DELETE" | "HTTP_GET" | "HTTP_POST" | "HTTP_PATCH" | "HTTP_PUT" | "HTTP_DELETE";
    /** @enum {string} */
    HA_Primitive: "Byte" | "Short" | "Int" | "Long" | "Float" | "Double" | "Boolean" | "String" | "Date" | "DateTime" | "Duration";
    /** @enum {string} */
    "HA_Type.Object.Kind": "PAIR" | "TRIPLE" | "BATCH" | "SYNC_BATCH" | "MOD" | "REQUEST_BODY";
    /** @enum {string} */
    HierarchyRole: "SEALED" | "OPEN" | "FINAL" | "ABSTRACT" | "INTERFACE";
    /** @enum {string} */
    HierarchyRole2: "SEALED_CLASS" | "OPEN_CLASS" | "FINAL_CLASS" | "ABSTRACT_CLASS" | "INTERFACE" | "SEALED_INTERFACE";
    /** @enum {string} */
    IdeVersionSortOrder: "ByReleaseDate" | "ByVersionAndQuality";
    /** @enum {string} */
    InterpolatedLineState: "Normal" | "Deleted" | "Modified";
    /** @enum {string} */
    IssueListGrouping: "NONE" | "TAG" | "ASSIGNEE" | "STATUS" | "PROJECT";
    /** @enum {string} */
    IssueSystemFieldEnum: "PROJECT" | "ASSIGNEE" | "CREATED_BY" | "STATUS" | "TAG" | "CREATION_TIME" | "DUE_DATE" | "TITLE" | "DELETED" | "PARENT_ISSUES" | "CHECKLISTS" | "BOARD" | "SUBSCRIBER" | "IMPORT_TRANSACTION";
    /** @enum {string} */
    IssuesSorting: "UPDATED" | "CREATED" | "TITLE" | "DUE";
    /** @enum {string} */
    JobExecutionDisplayStatus: "Awaiting" | "Running" | "Restarting" | "Finishing" | "Stopped" | "Succeeded" | "Failed" | "NoSuitableWorkers" | "WaitingForWorkers" | "Skipped";
    /** @enum {string} */
    JobExecutionStatus: "Started" | "Succeeded" | "Failed" | "Terminated";
    /** @enum {string} */
    JobSubscriptionType: "ALL_FINISHED" | "FAILED";
    /** @enum {string} */
    JobTriggerType: "MANUAL" | "GIT_PUSH" | "SCHEDULE" | "GIT_BRANCH_DELETED" | "CODE_REVIEW_OPENED" | "CODE_REVIEW_CLOSED" | "SAFE_MERGE";
    /** @enum {string} */
    LdapModuleType: "AD" | "OPEN_LDAP";
    /** @enum {string} */
    LineEnding: "CR" | "LF" | "CRLF";
    /** @enum {string} */
    LocationType: "Region" | "Campus" | "Building" | "Floor" | "Room" | "ConferenceRoom";
    /** @enum {string} */
    "M2.Access": "Private" | "Public";
    /** @enum {string} */
    M2EmailNotificationType: "INSTANT" | "DELAYED" | "NONE";
    /** @enum {string} */
    M2ObsoleteCause: "PermissionsDenied";
    /** @enum {string} */
    MediaSource: "USER" | "SCREEN";
    /** @enum {string} */
    MeetingJoiningPreference: "NOBODY" | "EVERYONE";
    /** @enum {string} */
    MeetingModificationPreference: "ORGANIZER" | "PARTICIPANTS" | "EVERYONE";
    /** @enum {string} */
    MeetingOrigin: "User" | "GoogleCalendar";
    /** @enum {string} */
    MeetingVisibility: "PARTICIPANTS" | "EVERYONE";
    /** @enum {string} */
    MergeRequestBranchType: "SOURCE" | "TARGET";
    /** @enum {string} */
    "MergeSelectOptions.Operation": "Merge" | "Rebase" | "DryRun";
    /** @enum {string} */
    MessageButtonStyle: "PRIMARY" | "REGULAR" | "DANGER" | "SECONDARY";
    /** @enum {string} */
    MessageStyle: "PRIMARY" | "SECONDARY" | "SUCCESS" | "ERROR" | "WARNING";
    /** @enum {string} */
    MessageTextSize: "LARGE" | "REGULAR" | "SMALL";
    /** @enum {string} */
    MessageTimestampFormat: "RELATIVE_TO_NOW" | "FULL" | "TIME_ONLY" | "DATE_ONLY";
    /** @enum {string} */
    MessagesSorting: "FromOldestToNewest" | "FromNewestToOldest";
    /** @enum {string} */
    NotificationFilter: "ALL_MESSAGES" | "MENTIONS" | "NOTHING" | "MUTE";
    /** @enum {string} */
    OptionalFeature: "UNKNOWN" | "ADVANCED_TEAM_DIRECTORY" | "BLOGS" | "CALENDARS" | "PERSONAL_DOCUMENTS" | "AUTOMATION";
    /** @enum {string} */
    OrgIndustryDTO: "SoftwareDevelopment" | "Science" | "Education" | "Finance" | "Health" | "Manufacturing" | "Retail" | "Transportation" | "Media" | "Hospitality" | "ProfessionalServices" | "NonProfit" | "Other";
    /** @enum {string} */
    OrgSizeDTO: "JUST_ME" | "N_2_10" | "N_11_50" | "N_51_250" | "N_251_500" | "N_501_1000" | "N_1001_5000" | "MORE_THAN_5000";
    /** @enum {string} */
    PackageRepositoryCredentials: "ANONYMOUS" | "PASSWORD" | "TOKEN" | "HEADER";
    /** @enum {string} */
    PackageRepositoryEventAction: "published" | "removed" | "vulnerabilities";
    /** @enum {string} */
    PackageRepositoryMode: "HOSTING" | "PROXY";
    /** @enum {string} */
    PackagesSortColumn: "Downloads" | "LastAccessed" | "Created" | "Size";
    /** @enum {string} */
    ParticipationState: "NONE" | "CONNECTED" | "DISCONNECTED";
    /** @enum {string} */
    PasswordStrength: "NO_POLICY" | "FAIR" | "GOOD" | "STRONG";
    /** @enum {string} */
    PayloadType: "FIELD_SELECTION" | "STRING_TEMPLATE";
    /** @enum {string} */
    PermissionRoleType: "PREDEFINED" | "CUSTOM" | "AUTHORIZABLE" | "ANONYMOUS";
    /** @enum {string} */
    PrivateFeedColor: "Blue" | "Purple" | "Yellow" | "Green" | "Grey" | "Orange" | "Pink";
    /** @enum {string} */
    ProfileOrder: "DEFAULT" | "FULL_NAME";
    /** @enum {string} */
    ProfileOrgRelation: "MEMBER" | "GUEST" | "ANY";
    /** @enum {string} */
    ProjectFeature: "DOCUMENTS" | "ISSUES" | "BOARDS" | "REPOSITORIES" | "CODE_REVIEWS" | "JOBS" | "PACKAGES" | "DEV_ENVIRONMENTS" | "HOSTING" | "DEPLOYMENTS" | "TABLES" | "PARAMETERS" | "SECRETS";
    /** @enum {string} */
    ProjectPinnedItemKind: "CodeRepository" | "PlanningIssueBoard" | "PackageRepository" | "AutomationJob" | "Document" | "DocumentFolder" | "DeployTarget" | "DocumentBook" | "DevEnvironment" | "PlanningIssueFilter" | "PlanningIssueFilterForMeAndUnresolved" | "PlanningIssueFilterUnresolved" | "ExternalIssueTrackerLink";
    /** @enum {string} */
    ProjectTeamType: "LEGACY" | "MEMBERS" | "ATTACHED";
    /** @enum {string} */
    RdWorkspaceState: "Initializing" | "Activating" | "Active" | "Unhealthy" | "Hibernating" | "Hibernated" | "Deleting" | "Deleted" | "Restarting" | "Failed" | "FailedToStart" | "Created" | "Inactive";
    /** @enum {string} */
    RecurrentModification: "Me" | "SinceMe" | "All";
    /** @enum {string} */
    RegisterNewUserType: "Member" | "ExternalCollaborator" | "Guest";
    /** @enum {string} */
    RepositoryState: "READY" | "IN_PROGRESS" | "ERROR";
    /** @enum {string} */
    ResolvedOption: "UNRESOLVED" | "RESOLVED";
    /** @enum {string} */
    ReviewRevisionsChangedType: "Created" | "Added" | "Removed";
    /** @enum {string} */
    ReviewSorting: "CreatedAtDesc" | "CreatedAtAsc" | "LastUpdatedDesc" | "LastUpdatedAsc";
    /** @enum {string} */
    ReviewType: "CommitSetReview" | "MergeRequest";
    /** @enum {string} */
    ReviewerChangedType: "Joined" | "Left";
    /** @enum {string} */
    ReviewerState: "Accepted" | "Rejected";
    /** @enum {string} */
    RightStatus: "NONE" | "REQUESTED" | "GRANTED" | "REJECTED";
    /** @enum {string} */
    RoomOrigin: "Unknown" | "Chat" | "Adhoc" | "Meeting";
    /** @enum {string} */
    RtTextAlign: "left" | "center" | "right" | "justify";
    /** @enum {string} */
    SFUMediaKind: "video" | "audio";
    /** @enum {string} */
    "SafeMergeMessage.Type": "Progress" | "Success" | "Error";
    /** @enum {string} */
    SafeMergeState: "STARTING" | "RUNNING" | "FAILING" | "FAILED" | "SUCCEEDED" | "CANCELLED";
    /** @enum {string} */
    SavedMessagesLabelsOrder: "UPDATED_ASC" | "UPDATED_DESC" | "MESSAGES_COUNT_ASC" | "MESSAGES_COUNT_DESC";
    /** @enum {string} */
    SnapshotState: "UNKNOWN" | "PENDING" | "COMPLETED" | "ERROR";
    /** @enum {string} */
    SortOrderType: "ASC" | "DESC";
    /** @enum {string} */
    SpecialDateValue: "NOT_SET" | "TODAY" | "YESTERDAY" | "NEXT_WEEK" | "THIS_WEEK" | "LAST_WEEK";
    /** @enum {string} */
    SprintState: "CLOSED" | "CURRENT" | "PLANNED";
    /** @enum {string} */
    StarredItemKind: "Unknown" | "Profile" | "Team" | "Location" | "Project" | "Article" | "CodeDiscussion" | "CodeReview" | "PackageRepository" | "Checklist" | "KbBook" | "KbFolder" | "KbArticle" | "PlanningIssueTracker" | "PlanningIssueBoard" | "CodeRepository" | "AutomationJob" | "HostingSite" | "DocumentSubscription" | "DocumentFolderSubscription" | "DocumentBookSubscription" | "Document" | "DocumentFolder" | "Topic" | "ApplicationSubscription" | "DeployTarget";
    /** @enum {string} */
    SyncRecordModType: "CREATED" | "UPDATED" | "ARCHIVED";
    /** @enum {string} */
    SyntaxMarkupType: "KEYWORD" | "COMMENT" | "NUM_LITERAL" | "STRING_LITERAL" | "DECLARATION" | "PARAMETER_ASSIGNMENT" | "IDENTIFIER_TYPE" | "IDENTIFIER_DECLARATION" | "IDENTIFIER" | "INVOCATION" | "DSL" | "KEY" | "TAG" | "ANNOTATION" | "PREPROCESSOR_ANNOTATION" | "PREPROCESSOR_MESSAGE" | "HIGHLIGHT" | "CODE_FOLD" | "SKIP";
    /** @enum {string} */
    Tier: "Free" | "Team" | "Organization" | "Classroom" | "Beta" | "Enterprise";
    /** @enum {string} */
    TimeTrackingSubjectType: "ISSUE";
    /** @enum {string} */
    TodoItemContentKind: "NONE" | "REGULAR" | "MESSAGE" | "ISSUE" | "BLOG" | "DOCUMENT" | "MEETING" | "CODE_REVIEW" | "EXTERNAL_ISSUE";
    /** @enum {string} */
    TwoFactorAuthenticationStatus: "NOT_SETUP" | "INACTIVE" | "ACTIVE";
    /** @enum {string} */
    UnfurlDateTimeFormat: "RELATIVE_TO_NOW" | "FULL" | "TIME_ONLY" | "DATE_ONLY";
    /** @enum {string} */
    UnfurlDateTimeStyle: "REGULAR" | "SECONDARY" | "STRIKETHROUGH" | "BOLD" | "CODE";
    /** @enum {string} */
    "UnfurlDetailsRepositoryBranch.BranchTagSize": "SMALL" | "NORMAL";
    /** @enum {string} */
    UnfurlViewType: "Inline" | "Attachment";
    /** @enum {string} */
    VersionStatus: "Outdated" | "Active";
    /** @enum {string} */
    VolumeState: "UNKNOWN" | "CREATING" | "AVAILABLE" | "IN_USE" | "DELETING" | "DELETED" | "ERROR";
    /** @enum {string} */
    WarmupExecutionStatus: "Started" | "Failed" | "Terminated" | "SnapshotCreated" | "SnapshotDeleted" | "CreatingSnapshot";
    /** @enum {string} */
    Weekday: "SUNDAY" | "MONDAY" | "TUESDAY" | "WEDNESDAY" | "THURSDAY" | "FRIDAY" | "SATURDAY";
    /** @enum {string} */
    WorkerCapability: "Docker" | "DockerCompose" | "BlockStorage" | "Git";
    /** @enum {string} */
    WorkerError: "StartError" | "DownloadError" | "Error";
    /** @enum {string} */
    WorkerOSType: "Linux" | "Windows" | "Mac" | "Other";
    /** @enum {string} */
    WorkerScope: "Organization" | "Project";
    /** @enum {string} */
    WorkerStatus: "Healthy" | "Disconnected" | "Unhealthy" | "Suspended" | "GracefulShutdown" | "Locked" | "WithWarning" | "NotInitialized";
    AbsenceIdentifier: {
      className: string;
    } & components["schemas"]["AbsenceIdentifier.Id"];
    "AbsenceIdentifier.Id": {
      id: string;
    };
    ApplicationIdentifier: {
      className: string;
    } & (components["schemas"]["ApplicationIdentifier.ClientId"] | components["schemas"]["ApplicationIdentifier.Id"] | components["schemas"]["ApplicationIdentifier.Me"]);
    "ApplicationIdentifier.ClientId": {
      clientId: string;
    };
    "ApplicationIdentifier.Id": {
      id: string;
    };
    "ApplicationIdentifier.Me": Record<string, never>;
    BoardIdentifier: {
      className: string;
    } & components["schemas"]["BoardIdentifier.Id"];
    "BoardIdentifier.Id": {
      id: string;
    };
    CFEntityIdentifier: {
      className: string;
    } & (components["schemas"]["CFAbsenceIdentifier"] | components["schemas"]["CFDeployTargetIdentifier"] | components["schemas"]["CFIssueIdentifier"] | components["schemas"]["CFMembershipIdentifier"] | components["schemas"]["CFProfileIdentifier"] | components["schemas"]["CFTeamIdentifier"]);
    CFAbsenceIdentifier: {
      absence: components["schemas"]["AbsenceIdentifier"];
    };
    CFDeployTargetIdentifier: {
      project: components["schemas"]["ProjectIdentifier"];
      target: components["schemas"]["TargetIdentifier"];
    };
    CFIssueIdentifier: {
      issue: components["schemas"]["IssueIdentifier"];
    };
    CFMembershipIdentifier: {
      membership: components["schemas"]["TeamMembershipIdentifier"];
    };
    CFProfileIdentifier: {
      profile: components["schemas"]["ProfileIdentifier"];
    };
    CFTeamIdentifier: {
      team: components["schemas"]["TeamIdentifier"];
    };
    CFEntityTypeIdentifier: {
      className: string;
    } & (components["schemas"]["CFAbsenceEntityType"] | components["schemas"]["CFDeployTargetEntityType"] | components["schemas"]["CFIssueTrackerEntityType"] | components["schemas"]["CFMembershipEntityType"] | components["schemas"]["CFProfileEntityType"] | components["schemas"]["CFTeamEntityType"]);
    CFAbsenceEntityType: Record<string, never>;
    CFDeployTargetEntityType: Record<string, never>;
    CFIssueTrackerEntityType: {
      issueTracker: components["schemas"]["IssueTrackerIdentifier"];
    };
    CFMembershipEntityType: Record<string, never>;
    CFProfileEntityType: Record<string, never>;
    CFTeamEntityType: Record<string, never>;
    CFEnumValueIdentifier: {
      className: string;
    } & (components["schemas"]["CFEnumValueIdentifier.Id"] | components["schemas"]["CFEnumValueIdentifier.Name"]);
    "CFEnumValueIdentifier.Id": {
      id: string;
    };
    "CFEnumValueIdentifier.Name": {
      name: string;
    };
    CFIdentifier: {
      className: string;
    } & (components["schemas"]["CFIdentifier.Id"] | components["schemas"]["CFIdentifier.Name"]);
    "CFIdentifier.Id": {
      id: string;
    };
    "CFIdentifier.Name": {
      name: string;
    };
    CalendarIdentifier: {
      className: string;
    } & (components["schemas"]["CalendarIdentifier.Id"] | components["schemas"]["CalendarIdentifier.PersonalCalendar"]);
    "CalendarIdentifier.Id": {
      id: string;
    };
    "CalendarIdentifier.PersonalCalendar": Record<string, never>;
    ChannelIdentifier: {
      className: string;
    } & (components["schemas"]["ChannelIdentifier.Application"] | components["schemas"]["ChannelIdentifier.Article"] | components["schemas"]["ChannelIdentifier.Channel"] | components["schemas"]["ChannelIdentifier.ContactKey"] | components["schemas"]["ChannelIdentifier.Id"] | components["schemas"]["ChannelIdentifier.Issue"] | components["schemas"]["ChannelIdentifier.Profile"] | components["schemas"]["ChannelIdentifier.Review"] | components["schemas"]["ChannelIdentifier.Thread"]);
    "ChannelIdentifier.Application": {
      application: components["schemas"]["ApplicationIdentifier"];
    };
    "ChannelIdentifier.Article": {
      article: string;
    };
    "ChannelIdentifier.Channel": {
      channel: components["schemas"]["ChatChannel"];
    };
    "ChannelIdentifier.ContactKey": {
      contactKey: string;
    };
    "ChannelIdentifier.Id": {
      id: string;
    };
    "ChannelIdentifier.Issue": {
      issue: components["schemas"]["IssueIdentifier"];
    };
    "ChannelIdentifier.Profile": {
      member: components["schemas"]["ProfileIdentifier"];
    };
    "ChannelIdentifier.Review": {
      codeReview: components["schemas"]["ReviewIdentifier"];
    };
    "ChannelIdentifier.Thread": {
      message: string;
    };
    ChatChannel: {
      className: string;
    } & (components["schemas"]["ChatChannel.FromId"] | components["schemas"]["ChatChannel.FromName"]);
    "ChatChannel.FromId": {
      id: string;
    };
    "ChatChannel.FromName": {
      name: string;
    };
    ChatMessageIdentifier: {
      className: string;
    } & (components["schemas"]["ChatMessageIdentifier.ExternalId"] | components["schemas"]["ChatMessageIdentifier.InternalId"]);
    "ChatMessageIdentifier.InternalId": {
      id: string;
    };
    ChecklistIdentifier: {
      className: string;
    } & components["schemas"]["ChecklistIdentifier.Id"];
    "ChecklistIdentifier.Id": {
      id: string;
    };
    ComputePoolIdentifier: {
      className: string;
    } & (components["schemas"]["ComputePoolIdentifier.Id"] | components["schemas"]["ComputePoolIdentifier.Key"]);
    "ComputePoolIdentifier.Id": {
      id: string;
    };
    "ComputePoolIdentifier.Key": {
      value: string;
    };
    DashboardIdentifier: {
      className: string;
    } & (components["schemas"]["DashboardIdentifier.Id"] | components["schemas"]["DashboardIdentifier.Personal"] | components["schemas"]["DashboardIdentifier.Project"]);
    "DashboardIdentifier.Id": {
      id: string;
    };
    "DashboardIdentifier.Personal": {
      profile: components["schemas"]["ProfileIdentifier"];
    };
    "DashboardIdentifier.Project": {
      project: components["schemas"]["ProjectIdentifier"];
      profile: components["schemas"]["ProfileIdentifier"];
    };
    DeploymentIdentifier: {
      className: string;
    } & (components["schemas"]["DeploymentIdentifier.Id"] | components["schemas"]["DeploymentIdentifier.Status"] | components["schemas"]["DeploymentIdentifier.Version"]);
    "DeploymentIdentifier.Id": {
      id: string;
    };
    "DeploymentIdentifier.Status": {
      status: components["schemas"]["DeploymentIdentifierStatus"];
    };
    "DeploymentIdentifier.Version": {
      version: string;
    };
    DocumentSharingAccessType: {
      className: string;
    } & (components["schemas"]["DocumentSharingAccessType.Editor"] | components["schemas"]["DocumentSharingAccessType.Manager"] | components["schemas"]["DocumentSharingAccessType.Viewer"]);
    "DocumentSharingAccessType.Editor": Record<string, never>;
    "DocumentSharingAccessType.Manager": Record<string, never>;
    "DocumentSharingAccessType.Viewer": Record<string, never>;
    ExtendedTypeScope: {
      className: string;
    } & (components["schemas"]["ExtendedTypeScope.Container"] | components["schemas"]["ExtendedTypeScope.Org"]);
    "ExtendedTypeScope.Container": {
      containerId: string;
    };
    "ExtendedTypeScope.Org": Record<string, never>;
    FolderIdentifier: {
      className: string;
    } & (components["schemas"]["FolderIdentifier.Id"] | components["schemas"]["FolderIdentifier.Root"] | components["schemas"]["FolderIdentifier.SharedWithMe"]);
    "FolderIdentifier.Id": {
      id: string;
    };
    "FolderIdentifier.Root": Record<string, never>;
    "FolderIdentifier.SharedWithMe": Record<string, never>;
    FolderSharingAccessType: {
      className: string;
    } & (components["schemas"]["FolderSharingAccessType.Editor"] | components["schemas"]["FolderSharingAccessType.Manager"] | components["schemas"]["FolderSharingAccessType.Viewer"]);
    "FolderSharingAccessType.Editor": Record<string, never>;
    "FolderSharingAccessType.Manager": Record<string, never>;
    "FolderSharingAccessType.Viewer": Record<string, never>;
    GlobalTargetIdentifier: {
      className: string;
    } & (components["schemas"]["GlobalTargetIdentifier.Composite"] | components["schemas"]["GlobalTargetIdentifier.Number"]);
    "GlobalTargetIdentifier.Composite": {
      project: components["schemas"]["ProjectIdentifier"];
      target: components["schemas"]["TargetIdentifier"];
    };
    "GlobalTargetIdentifier.Number": {
      number: string;
    };
    ImportExistsPolicy: {
      className: string;
    } & (components["schemas"]["ImportExistsPolicy.Skip"] | components["schemas"]["ImportExistsPolicy.Update"]);
    "ImportExistsPolicy.Skip": Record<string, never>;
    "ImportExistsPolicy.Update": Record<string, never>;
    ImportMissingPolicy: {
      className: string;
    } & (components["schemas"]["ImportMissingPolicy.ReplaceWithDefault"] | components["schemas"]["ImportMissingPolicy.Skip"]);
    "ImportMissingPolicy.ReplaceWithDefault": Record<string, never>;
    "ImportMissingPolicy.Skip": Record<string, never>;
    IssueIdentifier: {
      className: string;
    } & (components["schemas"]["IssueIdentifier.ExternalId"] | components["schemas"]["IssueIdentifier.Id"] | components["schemas"]["IssueIdentifier.Key"]);
    "IssueIdentifier.ExternalId": {
      project: components["schemas"]["ProjectIdentifier"];
      externalId: string;
    };
    "IssueIdentifier.Id": {
      id: string;
    };
    "IssueIdentifier.Key": {
      key: string;
    };
    IssueTrackerIdentifier: {
      className: string;
    } & (components["schemas"]["IssueTrackerIdentifier.DefaultProjectTracker"] | components["schemas"]["IssueTrackerIdentifier.Id"]);
    "IssueTrackerIdentifier.DefaultProjectTracker": {
      project: components["schemas"]["ProjectIdentifier"];
    };
    "IssueTrackerIdentifier.Id": {
      id: string;
    };
    MessageRecipient: {
      className: string;
    } & (components["schemas"]["MessageRecipient.Channel"] | components["schemas"]["MessageRecipient.CodeReview"] | components["schemas"]["MessageRecipient.Issue"] | components["schemas"]["MessageRecipient.Member"]);
    "MessageRecipient.Channel": {
      channel: components["schemas"]["ChatChannel"];
    };
    "MessageRecipient.CodeReview": {
      codeReview: string;
    };
    "MessageRecipient.Issue": {
      issue: string;
    };
    "MessageRecipient.Member": {
      member: components["schemas"]["ProfileIdentifier"];
    };
    PackageRepositoryIdentifier: {
      className: string;
    } & (components["schemas"]["PackageRepositoryIdentifier.Id"] | components["schemas"]["PackageRepositoryIdentifier.Key"] | components["schemas"]["PackageRepositoryIdentifier.TypeAndName"]);
    "PackageRepositoryIdentifier.Id": {
      id: string;
    };
    "PackageRepositoryIdentifier.Key": {
      key: string;
    };
    "PackageRepositoryIdentifier.TypeAndName": {
      type: string;
      name: string;
    };
    PackagesSharingAccessType: {
      className: string;
    } & (components["schemas"]["PackagesSharingAccessType.Manager"] | components["schemas"]["PackagesSharingAccessType.Viewer"] | components["schemas"]["PackagesSharingAccessType.Writer"]);
    "PackagesSharingAccessType.Manager": Record<string, never>;
    "PackagesSharingAccessType.Viewer": Record<string, never>;
    "PackagesSharingAccessType.Writer": Record<string, never>;
    PermissionContextIdentifier: {
      className: string;
    } & (components["schemas"]["ChannelPermissionContextIdentifier"] | components["schemas"]["GlobalPermissionContextIdentifier"] | components["schemas"]["PackageRepositoryPermissionContextIdentifier"] | components["schemas"]["ProjectPermissionContextIdentifier"]);
    ChannelPermissionContextIdentifier: {
      channel: string;
    };
    GlobalPermissionContextIdentifier: Record<string, never>;
    PackageRepositoryPermissionContextIdentifier: {
      packageRepository: string;
    };
    ProjectPermissionContextIdentifier: {
      project: components["schemas"]["ProjectIdentifier"];
    };
    PermissionIdentifier: {
      className: string;
    } & (components["schemas"]["PermissionIdentifier.AccessPrivateSites"] | components["schemas"]["PermissionIdentifier.AddCustomEmoji"] | components["schemas"]["PermissionIdentifier.AddMembers"] | components["schemas"]["PermissionIdentifier.AddMembersOrTeamsToParticipantList"] | components["schemas"]["PermissionIdentifier.AddMessageReactions"] | components["schemas"]["PermissionIdentifier.AddNewChannels"] | components["schemas"]["PermissionIdentifier.AddNewExternalUser"] | components["schemas"]["PermissionIdentifier.AddParticipantsToCodeReviewDiscussionsAndThreads"] | components["schemas"]["PermissionIdentifier.AddParticipantsToIssueCommentThreads"] | components["schemas"]["PermissionIdentifier.AddReactionsToArticleComments"] | components["schemas"]["PermissionIdentifier.AddReactionsToCommentsInCodeReviews"] | components["schemas"]["PermissionIdentifier.AddReactionsToDirectMessages"] | components["schemas"]["PermissionIdentifier.AddReactionsToIssueComments"] | components["schemas"]["PermissionIdentifier.AddTeams"] | components["schemas"]["PermissionIdentifier.AdminPackageRepositories"] | components["schemas"]["PermissionIdentifier.AdminVisionProject"] | components["schemas"]["PermissionIdentifier.ApproveAbsences"] | components["schemas"]["PermissionIdentifier.ArchiveAndRestoreDocuments"] | components["schemas"]["PermissionIdentifier.AttachWorkersToAutomationComputePools"] | components["schemas"]["PermissionIdentifier.AuthorizeDomainsAndPatternsForAppPoweredPreviews"] | components["schemas"]["PermissionIdentifier.BaseRightForAllBonusAppUsers"] | components["schemas"]["PermissionIdentifier.BrowseChannels"] | components["schemas"]["PermissionIdentifier.ChangeBackgroundImagesForOrganization"] | components["schemas"]["PermissionIdentifier.ConnectToFleetWorkspaces"] | components["schemas"]["PermissionIdentifier.CreateApplications"] | components["schemas"]["PermissionIdentifier.CreateBoards"] | components["schemas"]["PermissionIdentifier.CreateCodeReviews"] | components["schemas"]["PermissionIdentifier.CreateDevConfigurations"] | components["schemas"]["PermissionIdentifier.CreateDevEnvironments"] | components["schemas"]["PermissionIdentifier.CreateDocuments"] | components["schemas"]["PermissionIdentifier.CreateFolders"] | components["schemas"]["PermissionIdentifier.CreateIssues"] | components["schemas"]["PermissionIdentifier.CreateOrganizationAutomationWorkers"] | components["schemas"]["PermissionIdentifier.CreatePackageRepositories"] | components["schemas"]["PermissionIdentifier.CreatePermanentTokensForYourself"] | components["schemas"]["PermissionIdentifier.CreateProjectAutomationWorkers"] | components["schemas"]["PermissionIdentifier.CreateProjectSecrets"] | components["schemas"]["PermissionIdentifier.CreateProjects"] | components["schemas"]["PermissionIdentifier.CreateSuggestedEdit"] | components["schemas"]["PermissionIdentifier.DelegateGlobalPermissions"] | components["schemas"]["PermissionIdentifier.DeleteApplications"] | components["schemas"]["PermissionIdentifier.DeleteDocumentsForever"] | components["schemas"]["PermissionIdentifier.DeleteHostingSites"] | components["schemas"]["PermissionIdentifier.DeleteMemberProfile"] | components["schemas"]["PermissionIdentifier.DeletePackageRepositoriesContent"] | components["schemas"]["PermissionIdentifier.DeleteProjectParameters"] | components["schemas"]["PermissionIdentifier.DeleteProjectSecrets"] | components["schemas"]["PermissionIdentifier.DeleteVaultConnections"] | components["schemas"]["PermissionIdentifier.EditBonusEvents"] | components["schemas"]["PermissionIdentifier.EditBonusQuestionnaires"] | components["schemas"]["PermissionIdentifier.EditCodeReviews"] | components["schemas"]["PermissionIdentifier.EditDevEnvironmentsSettings"] | components["schemas"]["PermissionIdentifier.EditDocuments"] | components["schemas"]["PermissionIdentifier.EditFolderContent"] | components["schemas"]["PermissionIdentifier.EditLocations"] | components["schemas"]["PermissionIdentifier.EditMemberVacationPeriods"] | components["schemas"]["PermissionIdentifier.EditTeamMembershipHistory"] | components["schemas"]["PermissionIdentifier.GrantAccessRightsToOtherMembersForBonusApp"] | components["schemas"]["PermissionIdentifier.GrantPermissionsToOtherMembers"] | components["schemas"]["PermissionIdentifier.ImportArticles"] | components["schemas"]["PermissionIdentifier.ImportIssues"] | components["schemas"]["PermissionIdentifier.ImportMessages"] | components["schemas"]["PermissionIdentifier.ImportMessagesObsolete"] | components["schemas"]["PermissionIdentifier.JoinDevEnvironmentsFromHotPool"] | components["schemas"]["PermissionIdentifier.ListApplicationCommands"] | components["schemas"]["PermissionIdentifier.ListHostingSites"] | components["schemas"]["PermissionIdentifier.ListRestrictedProjects"] | components["schemas"]["PermissionIdentifier.ManageAbsenceTypes"] | components["schemas"]["PermissionIdentifier.ManageAnySpentTime"] | components["schemas"]["PermissionIdentifier.ManageAuthenticationModules"] | components["schemas"]["PermissionIdentifier.ManageAuthenticationSessions"] | components["schemas"]["PermissionIdentifier.ManageAutomationComputePools"] | components["schemas"]["PermissionIdentifier.ManageAutomationComputePoolsInProjects"] | components["schemas"]["PermissionIdentifier.ManageAutomationDiagnosticData"] | components["schemas"]["PermissionIdentifier.ManageAutomationJobs"] | components["schemas"]["PermissionIdentifier.ManageAutomationWorkers"] | components["schemas"]["PermissionIdentifier.ManageBoards"] | components["schemas"]["PermissionIdentifier.ManageBusinessEntities"] | components["schemas"]["PermissionIdentifier.ManageChannels"] | components["schemas"]["PermissionIdentifier.ManageChecklists"] | components["schemas"]["PermissionIdentifier.ManageCustomFields"] | components["schemas"]["PermissionIdentifier.ManageCustomFieldsForTargets"] | components["schemas"]["PermissionIdentifier.ManageDocuments"] | components["schemas"]["PermissionIdentifier.ManageDocumentsObsolete"] | components["schemas"]["PermissionIdentifier.ManageEmoji"] | components["schemas"]["PermissionIdentifier.ManageEmployeesSalaries"] | components["schemas"]["PermissionIdentifier.ManageExternalEntityLinkPatterns"] | components["schemas"]["PermissionIdentifier.ManageFeatureFlags"] | components["schemas"]["PermissionIdentifier.ManageFolders"] | components["schemas"]["PermissionIdentifier.ManageGitRepositories"] | components["schemas"]["PermissionIdentifier.ManageHistoricalAbsences"] | components["schemas"]["PermissionIdentifier.ManageHostingSite"] | components["schemas"]["PermissionIdentifier.ManageIssueAssignment"] | components["schemas"]["PermissionIdentifier.ManageIssueSettings"] | components["schemas"]["PermissionIdentifier.ManageLinkPreviewBlocklist"] | components["schemas"]["PermissionIdentifier.ManageLoggingLevel"] | components["schemas"]["PermissionIdentifier.ManageMaintenanceData"] | components["schemas"]["PermissionIdentifier.ManageMeetingConferenceRooms"] | components["schemas"]["PermissionIdentifier.ManageMeetings"] | components["schemas"]["PermissionIdentifier.ManageOnboardingHints"] | components["schemas"]["PermissionIdentifier.ManageOwnSpentTime"] | components["schemas"]["PermissionIdentifier.ManagePermanentTokens"] | components["schemas"]["PermissionIdentifier.ManagePersonalTables"] | components["schemas"]["PermissionIdentifier.ManageProjectPermissionScheme"] | components["schemas"]["PermissionIdentifier.ManageProjectSidebarPins"] | components["schemas"]["PermissionIdentifier.ManageSalaryEventsForDirectReports"] | components["schemas"]["PermissionIdentifier.ManageSharedDevEnvironmentsOfAllProjectMembers"] | components["schemas"]["PermissionIdentifier.ManageStickers"] | components["schemas"]["PermissionIdentifier.ManageTables"] | components["schemas"]["PermissionIdentifier.ManageTags"] | components["schemas"]["PermissionIdentifier.ManageThrottledLogins"] | components["schemas"]["PermissionIdentifier.ManageTwoFactorAuthenticationAndApplicationPasswords"] | components["schemas"]["PermissionIdentifier.ManageVacations"] | components["schemas"]["PermissionIdentifier.ManageWarmUpAutomaticTriggers"] | components["schemas"]["PermissionIdentifier.ModerateSuggestions"] | components["schemas"]["PermissionIdentifier.ModifyDeploymentTargets"] | components["schemas"]["PermissionIdentifier.ModifyDeployments"] | components["schemas"]["PermissionIdentifier.ModifyProjectParameters"] | components["schemas"]["PermissionIdentifier.ModifyVaultConnections"] | components["schemas"]["PermissionIdentifier.MoveIssues"] | components["schemas"]["PermissionIdentifier.ObsoleteUseProjectSecrets"] | components["schemas"]["PermissionIdentifier.PinOrUnpinDirectMessages"] | components["schemas"]["PermissionIdentifier.PinOrUnpinIssueComments"] | components["schemas"]["PermissionIdentifier.PinOrUnpinMessages"] | components["schemas"]["PermissionIdentifier.PostCommentsToArticles"] | components["schemas"]["PermissionIdentifier.PostCommentsToCodeReviews"] | components["schemas"]["PermissionIdentifier.PostCommentsToIssues"] | components["schemas"]["PermissionIdentifier.PostContentForOtherMembers"] | components["schemas"]["PermissionIdentifier.PostMessages"] | components["schemas"]["PermissionIdentifier.PostMessagesInThreads"] | components["schemas"]["PermissionIdentifier.ProvideExternalInlineUnfurls"] | components["schemas"]["PermissionIdentifier.ProvideExternalUnfurlsAsAttachments"] | components["schemas"]["PermissionIdentifier.PublishArticles"] | components["schemas"]["PermissionIdentifier.PublishSitesOrApplications"] | components["schemas"]["PermissionIdentifier.PublishVisionProject"] | components["schemas"]["PermissionIdentifier.ReadGitRepositories"] | components["schemas"]["PermissionIdentifier.ReadPackageRepositories"] | components["schemas"]["PermissionIdentifier.ReadVisionProject"] | components["schemas"]["PermissionIdentifier.RemoveMembersOrTeamsFromParticipantList"] | components["schemas"]["PermissionIdentifier.ReportCodeIssuesForRepository"] | components["schemas"]["PermissionIdentifier.ReportExternalStatusChecks"] | components["schemas"]["PermissionIdentifier.RestoreIssues"] | components["schemas"]["PermissionIdentifier.SendDirectMessages"] | components["schemas"]["PermissionIdentifier.SetUpTwoFactorAuthenticationForYourselfAndCreateApplicationPasswords"] | components["schemas"]["PermissionIdentifier.StartAutomationJobs"] | components["schemas"]["PermissionIdentifier.StartNewConversations"] | components["schemas"]["PermissionIdentifier.StopAutomationJobs"] | components["schemas"]["PermissionIdentifier.SubmitAnswerToBonusQuestionnaires"] | components["schemas"]["PermissionIdentifier.TrackApplicationState"] | components["schemas"]["PermissionIdentifier.UnpublishArticles"] | components["schemas"]["PermissionIdentifier.UpdateAbsences"] | components["schemas"]["PermissionIdentifier.UpdateApplications"] | components["schemas"]["PermissionIdentifier.UpdateChannelInfo"] | components["schemas"]["PermissionIdentifier.UpdateChannelSubscriptions"] | components["schemas"]["PermissionIdentifier.UpdateEmployeesSalary"] | components["schemas"]["PermissionIdentifier.UpdateIssues"] | components["schemas"]["PermissionIdentifier.UpdateLanguages"] | components["schemas"]["PermissionIdentifier.UpdateLocations"] | components["schemas"]["PermissionIdentifier.UpdateMeetingRsvpStatus"] | components["schemas"]["PermissionIdentifier.UpdateMeetings"] | components["schemas"]["PermissionIdentifier.UpdateMemberBusinessEntities"] | components["schemas"]["PermissionIdentifier.UpdateMemberProfiles"] | components["schemas"]["PermissionIdentifier.UpdateMemberProfilesAndEditLocations"] | components["schemas"]["PermissionIdentifier.UpdateNotificationSettings"] | components["schemas"]["PermissionIdentifier.UpdateOrganizationDetails"] | components["schemas"]["PermissionIdentifier.UpdateOverdrafts"] | components["schemas"]["PermissionIdentifier.UpdatePersonalTables"] | components["schemas"]["PermissionIdentifier.UpdatePositions"] | components["schemas"]["PermissionIdentifier.UpdateProjectSecrets"] | components["schemas"]["PermissionIdentifier.UpdateProjectTables"] | components["schemas"]["PermissionIdentifier.UpdateReactions"] | components["schemas"]["PermissionIdentifier.UpdateResponsibilities"] | components["schemas"]["PermissionIdentifier.UpdateTeams"] | components["schemas"]["PermissionIdentifier.UpdateToDos"] | components["schemas"]["PermissionIdentifier.UpdateWorkingHours"] | components["schemas"]["PermissionIdentifier.UseCalls"] | components["schemas"]["PermissionIdentifier.ViewAbsenceApprovals"] | components["schemas"]["PermissionIdentifier.ViewAbsenceReasons"] | components["schemas"]["PermissionIdentifier.ViewAbsenceTypes"] | components["schemas"]["PermissionIdentifier.ViewAbsences"] | components["schemas"]["PermissionIdentifier.ViewAllExternalUsers"] | components["schemas"]["PermissionIdentifier.ViewAndRemoveApplicationConsents"] | components["schemas"]["PermissionIdentifier.ViewAnswersToBonusQuestionnaires"] | components["schemas"]["PermissionIdentifier.ViewApplicationLogs"] | components["schemas"]["PermissionIdentifier.ViewApplicationSecrets"] | components["schemas"]["PermissionIdentifier.ViewApplications"] | components["schemas"]["PermissionIdentifier.ViewArticleComments"] | components["schemas"]["PermissionIdentifier.ViewArticles"] | components["schemas"]["PermissionIdentifier.ViewAtelierReport"] | components["schemas"]["PermissionIdentifier.ViewAutomationComputePools"] | components["schemas"]["PermissionIdentifier.ViewAutomationDiagnosticData"] | components["schemas"]["PermissionIdentifier.ViewAutomationJobs"] | components["schemas"]["PermissionIdentifier.ViewAutomationWorkers"] | components["schemas"]["PermissionIdentifier.ViewBoards"] | components["schemas"]["PermissionIdentifier.ViewBonusEvents"] | components["schemas"]["PermissionIdentifier.ViewBonusQuestionnaires"] | components["schemas"]["PermissionIdentifier.ViewBouncedEmailAddresses"] | components["schemas"]["PermissionIdentifier.ViewBusinessEntities"] | components["schemas"]["PermissionIdentifier.ViewChannelInfo"] | components["schemas"]["PermissionIdentifier.ViewChannelParticipants"] | components["schemas"]["PermissionIdentifier.ViewCodeReviewChannelParticipants"] | components["schemas"]["PermissionIdentifier.ViewCodeReviewComments"] | components["schemas"]["PermissionIdentifier.ViewCodeReviews"] | components["schemas"]["PermissionIdentifier.ViewConfidentialCustomFields"] | components["schemas"]["PermissionIdentifier.ViewCustomEmoji"] | components["schemas"]["PermissionIdentifier.ViewDeployments"] | components["schemas"]["PermissionIdentifier.ViewDevEnvironmentsDebugData"] | components["schemas"]["PermissionIdentifier.ViewDevEnvironmentsOfAllProjectMembers"] | components["schemas"]["PermissionIdentifier.ViewDevEnvironmentsSettings"] | components["schemas"]["PermissionIdentifier.ViewDirectMessages"] | components["schemas"]["PermissionIdentifier.ViewDocuments"] | components["schemas"]["PermissionIdentifier.ViewEmployeesSalary"] | components["schemas"]["PermissionIdentifier.ViewExternalEntityLinkPatterns"] | components["schemas"]["PermissionIdentifier.ViewFolderContent"] | components["schemas"]["PermissionIdentifier.ViewFolderMetadata"] | components["schemas"]["PermissionIdentifier.ViewFolderMetadataObsolete"] | components["schemas"]["PermissionIdentifier.ViewGoogleIntegrationStatus"] | components["schemas"]["PermissionIdentifier.ViewIssues"] | components["schemas"]["PermissionIdentifier.ViewKeysOfProjectSecrets"] | components["schemas"]["PermissionIdentifier.ViewLanguages"] | components["schemas"]["PermissionIdentifier.ViewListOfBonusEvents"] | components["schemas"]["PermissionIdentifier.ViewLocationMapPoints"] | components["schemas"]["PermissionIdentifier.ViewLocations"] | components["schemas"]["PermissionIdentifier.ViewMaintenanceData"] | components["schemas"]["PermissionIdentifier.ViewMarketplaceApplications"] | components["schemas"]["PermissionIdentifier.ViewMeetings"] | components["schemas"]["PermissionIdentifier.ViewMemberBusinessEntities"] | components["schemas"]["PermissionIdentifier.ViewMemberLocations"] | components["schemas"]["PermissionIdentifier.ViewMemberProfileBasicInfo"] | components["schemas"]["PermissionIdentifier.ViewMemberProfiles"] | components["schemas"]["PermissionIdentifier.ViewMemberVacationPeriods"] | components["schemas"]["PermissionIdentifier.ViewMembershipRatioReport"] | components["schemas"]["PermissionIdentifier.ViewMemberships"] | components["schemas"]["PermissionIdentifier.ViewMessageReactions"] | components["schemas"]["PermissionIdentifier.ViewMessages"] | components["schemas"]["PermissionIdentifier.ViewNotificationSettings"] | components["schemas"]["PermissionIdentifier.ViewOrganizationDetails"] | components["schemas"]["PermissionIdentifier.ViewOrganizationInfo"] | components["schemas"]["PermissionIdentifier.ViewParticipantsInArticleCommentsThreads"] | components["schemas"]["PermissionIdentifier.ViewParticipantsInIssueCommentThreads"] | components["schemas"]["PermissionIdentifier.ViewPermissionsGrantedToOtherMembers"] | components["schemas"]["PermissionIdentifier.ViewPersonalTables"] | components["schemas"]["PermissionIdentifier.ViewPositions"] | components["schemas"]["PermissionIdentifier.ViewProjectDetails"] | components["schemas"]["PermissionIdentifier.ViewProjectParameters"] | components["schemas"]["PermissionIdentifier.ViewReactionsToArticleComments"] | components["schemas"]["PermissionIdentifier.ViewReactionsToCommentsInCodeReviews"] | components["schemas"]["PermissionIdentifier.ViewReactionsToDirectMessages"] | components["schemas"]["PermissionIdentifier.ViewReactionsToIssueComments"] | components["schemas"]["PermissionIdentifier.ViewResponsibilities"] | components["schemas"]["PermissionIdentifier.ViewRestrictedCustomFields"] | components["schemas"]["PermissionIdentifier.ViewSpentTime"] | components["schemas"]["PermissionIdentifier.ViewTables"] | components["schemas"]["PermissionIdentifier.ViewTeams"] | components["schemas"]["PermissionIdentifier.ViewToDos"] | components["schemas"]["PermissionIdentifier.ViewUsageData"] | components["schemas"]["PermissionIdentifier.ViewVaultConnections"] | components["schemas"]["PermissionIdentifier.ViewWorkingHours"] | components["schemas"]["PermissionIdentifier.WriteGitRepositories"] | components["schemas"]["PermissionIdentifier.WritePackageRepositories"] | components["schemas"]["PermissionIdentifier.WritePackageRepositoriesObsolete"] | components["schemas"]["PermissionIdentifier.WriteVisionProject"]);
    "PermissionIdentifier.AccessPrivateSites": Record<string, never>;
    "PermissionIdentifier.AddCustomEmoji": Record<string, never>;
    "PermissionIdentifier.AddMembers": Record<string, never>;
    "PermissionIdentifier.AddMembersOrTeamsToParticipantList": Record<string, never>;
    "PermissionIdentifier.AddMessageReactions": Record<string, never>;
    "PermissionIdentifier.AddNewChannels": Record<string, never>;
    "PermissionIdentifier.AddNewExternalUser": Record<string, never>;
    "PermissionIdentifier.AddParticipantsToCodeReviewDiscussionsAndThreads": Record<string, never>;
    "PermissionIdentifier.AddParticipantsToIssueCommentThreads": Record<string, never>;
    "PermissionIdentifier.AddReactionsToArticleComments": Record<string, never>;
    "PermissionIdentifier.AddReactionsToCommentsInCodeReviews": Record<string, never>;
    "PermissionIdentifier.AddReactionsToDirectMessages": Record<string, never>;
    "PermissionIdentifier.AddReactionsToIssueComments": Record<string, never>;
    "PermissionIdentifier.AddTeams": Record<string, never>;
    "PermissionIdentifier.AdminPackageRepositories": Record<string, never>;
    "PermissionIdentifier.AdminVisionProject": Record<string, never>;
    "PermissionIdentifier.ApproveAbsences": Record<string, never>;
    "PermissionIdentifier.ArchiveAndRestoreDocuments": Record<string, never>;
    "PermissionIdentifier.AttachWorkersToAutomationComputePools": Record<string, never>;
    "PermissionIdentifier.AuthorizeDomainsAndPatternsForAppPoweredPreviews": Record<string, never>;
    "PermissionIdentifier.BaseRightForAllBonusAppUsers": Record<string, never>;
    "PermissionIdentifier.BrowseChannels": Record<string, never>;
    "PermissionIdentifier.ChangeBackgroundImagesForOrganization": Record<string, never>;
    "PermissionIdentifier.ConnectToFleetWorkspaces": Record<string, never>;
    "PermissionIdentifier.CreateApplications": Record<string, never>;
    "PermissionIdentifier.CreateBoards": Record<string, never>;
    "PermissionIdentifier.CreateCodeReviews": Record<string, never>;
    "PermissionIdentifier.CreateDevConfigurations": Record<string, never>;
    "PermissionIdentifier.CreateDevEnvironments": Record<string, never>;
    "PermissionIdentifier.CreateDocuments": Record<string, never>;
    "PermissionIdentifier.CreateFolders": Record<string, never>;
    "PermissionIdentifier.CreateIssues": Record<string, never>;
    "PermissionIdentifier.CreateOrganizationAutomationWorkers": Record<string, never>;
    "PermissionIdentifier.CreatePackageRepositories": Record<string, never>;
    "PermissionIdentifier.CreatePermanentTokensForYourself": Record<string, never>;
    "PermissionIdentifier.CreateProjectAutomationWorkers": Record<string, never>;
    "PermissionIdentifier.CreateProjectSecrets": Record<string, never>;
    "PermissionIdentifier.CreateProjects": Record<string, never>;
    "PermissionIdentifier.CreateSuggestedEdit": Record<string, never>;
    "PermissionIdentifier.DelegateGlobalPermissions": Record<string, never>;
    "PermissionIdentifier.DeleteApplications": Record<string, never>;
    "PermissionIdentifier.DeleteDocumentsForever": Record<string, never>;
    "PermissionIdentifier.DeleteHostingSites": Record<string, never>;
    "PermissionIdentifier.DeleteMemberProfile": Record<string, never>;
    "PermissionIdentifier.DeletePackageRepositoriesContent": Record<string, never>;
    "PermissionIdentifier.DeleteProjectParameters": Record<string, never>;
    "PermissionIdentifier.DeleteProjectSecrets": Record<string, never>;
    "PermissionIdentifier.DeleteVaultConnections": Record<string, never>;
    "PermissionIdentifier.EditBonusEvents": Record<string, never>;
    "PermissionIdentifier.EditBonusQuestionnaires": Record<string, never>;
    "PermissionIdentifier.EditCodeReviews": Record<string, never>;
    "PermissionIdentifier.EditDevEnvironmentsSettings": Record<string, never>;
    "PermissionIdentifier.EditDocuments": Record<string, never>;
    "PermissionIdentifier.EditFolderContent": Record<string, never>;
    "PermissionIdentifier.EditLocations": Record<string, never>;
    "PermissionIdentifier.EditMemberVacationPeriods": Record<string, never>;
    "PermissionIdentifier.EditTeamMembershipHistory": Record<string, never>;
    "PermissionIdentifier.GrantAccessRightsToOtherMembersForBonusApp": Record<string, never>;
    "PermissionIdentifier.GrantPermissionsToOtherMembers": Record<string, never>;
    "PermissionIdentifier.ImportArticles": Record<string, never>;
    "PermissionIdentifier.ImportIssues": Record<string, never>;
    "PermissionIdentifier.ImportMessages": Record<string, never>;
    "PermissionIdentifier.ImportMessagesObsolete": Record<string, never>;
    "PermissionIdentifier.JoinDevEnvironmentsFromHotPool": Record<string, never>;
    "PermissionIdentifier.ListApplicationCommands": Record<string, never>;
    "PermissionIdentifier.ListHostingSites": Record<string, never>;
    "PermissionIdentifier.ListRestrictedProjects": Record<string, never>;
    "PermissionIdentifier.ManageAbsenceTypes": Record<string, never>;
    "PermissionIdentifier.ManageAnySpentTime": Record<string, never>;
    "PermissionIdentifier.ManageAuthenticationModules": Record<string, never>;
    "PermissionIdentifier.ManageAuthenticationSessions": Record<string, never>;
    "PermissionIdentifier.ManageAutomationComputePools": Record<string, never>;
    "PermissionIdentifier.ManageAutomationComputePoolsInProjects": Record<string, never>;
    "PermissionIdentifier.ManageAutomationDiagnosticData": Record<string, never>;
    "PermissionIdentifier.ManageAutomationJobs": Record<string, never>;
    "PermissionIdentifier.ManageAutomationWorkers": Record<string, never>;
    "PermissionIdentifier.ManageBoards": Record<string, never>;
    "PermissionIdentifier.ManageBusinessEntities": Record<string, never>;
    "PermissionIdentifier.ManageChannels": Record<string, never>;
    "PermissionIdentifier.ManageChecklists": Record<string, never>;
    "PermissionIdentifier.ManageCustomFields": Record<string, never>;
    "PermissionIdentifier.ManageCustomFieldsForTargets": Record<string, never>;
    "PermissionIdentifier.ManageDocuments": Record<string, never>;
    "PermissionIdentifier.ManageDocumentsObsolete": Record<string, never>;
    "PermissionIdentifier.ManageEmoji": Record<string, never>;
    "PermissionIdentifier.ManageEmployeesSalaries": Record<string, never>;
    "PermissionIdentifier.ManageExternalEntityLinkPatterns": Record<string, never>;
    "PermissionIdentifier.ManageFeatureFlags": Record<string, never>;
    "PermissionIdentifier.ManageFolders": Record<string, never>;
    "PermissionIdentifier.ManageGitRepositories": Record<string, never>;
    "PermissionIdentifier.ManageHistoricalAbsences": Record<string, never>;
    "PermissionIdentifier.ManageHostingSite": Record<string, never>;
    "PermissionIdentifier.ManageIssueAssignment": Record<string, never>;
    "PermissionIdentifier.ManageIssueSettings": Record<string, never>;
    "PermissionIdentifier.ManageLinkPreviewBlocklist": Record<string, never>;
    "PermissionIdentifier.ManageLoggingLevel": Record<string, never>;
    "PermissionIdentifier.ManageMaintenanceData": Record<string, never>;
    "PermissionIdentifier.ManageMeetingConferenceRooms": Record<string, never>;
    "PermissionIdentifier.ManageMeetings": Record<string, never>;
    "PermissionIdentifier.ManageOnboardingHints": Record<string, never>;
    "PermissionIdentifier.ManageOwnSpentTime": Record<string, never>;
    "PermissionIdentifier.ManagePermanentTokens": Record<string, never>;
    "PermissionIdentifier.ManagePersonalTables": Record<string, never>;
    "PermissionIdentifier.ManageProjectPermissionScheme": Record<string, never>;
    "PermissionIdentifier.ManageProjectSidebarPins": Record<string, never>;
    "PermissionIdentifier.ManageSalaryEventsForDirectReports": Record<string, never>;
    "PermissionIdentifier.ManageSharedDevEnvironmentsOfAllProjectMembers": Record<string, never>;
    "PermissionIdentifier.ManageStickers": Record<string, never>;
    "PermissionIdentifier.ManageTables": Record<string, never>;
    "PermissionIdentifier.ManageTags": Record<string, never>;
    "PermissionIdentifier.ManageThrottledLogins": Record<string, never>;
    "PermissionIdentifier.ManageTwoFactorAuthenticationAndApplicationPasswords": Record<string, never>;
    "PermissionIdentifier.ManageVacations": Record<string, never>;
    "PermissionIdentifier.ManageWarmUpAutomaticTriggers": Record<string, never>;
    "PermissionIdentifier.ModerateSuggestions": Record<string, never>;
    "PermissionIdentifier.ModifyDeploymentTargets": Record<string, never>;
    "PermissionIdentifier.ModifyDeployments": Record<string, never>;
    "PermissionIdentifier.ModifyProjectParameters": Record<string, never>;
    "PermissionIdentifier.ModifyVaultConnections": Record<string, never>;
    "PermissionIdentifier.MoveIssues": Record<string, never>;
    "PermissionIdentifier.ObsoleteUseProjectSecrets": Record<string, never>;
    "PermissionIdentifier.PinOrUnpinDirectMessages": Record<string, never>;
    "PermissionIdentifier.PinOrUnpinIssueComments": Record<string, never>;
    "PermissionIdentifier.PinOrUnpinMessages": Record<string, never>;
    "PermissionIdentifier.PostCommentsToArticles": Record<string, never>;
    "PermissionIdentifier.PostCommentsToCodeReviews": Record<string, never>;
    "PermissionIdentifier.PostCommentsToIssues": Record<string, never>;
    "PermissionIdentifier.PostContentForOtherMembers": Record<string, never>;
    "PermissionIdentifier.PostMessages": Record<string, never>;
    "PermissionIdentifier.PostMessagesInThreads": Record<string, never>;
    "PermissionIdentifier.ProvideExternalInlineUnfurls": Record<string, never>;
    "PermissionIdentifier.ProvideExternalUnfurlsAsAttachments": Record<string, never>;
    "PermissionIdentifier.PublishArticles": Record<string, never>;
    "PermissionIdentifier.PublishSitesOrApplications": Record<string, never>;
    "PermissionIdentifier.PublishVisionProject": Record<string, never>;
    "PermissionIdentifier.ReadGitRepositories": Record<string, never>;
    "PermissionIdentifier.ReadPackageRepositories": Record<string, never>;
    "PermissionIdentifier.ReadVisionProject": Record<string, never>;
    "PermissionIdentifier.RemoveMembersOrTeamsFromParticipantList": Record<string, never>;
    "PermissionIdentifier.ReportCodeIssuesForRepository": Record<string, never>;
    "PermissionIdentifier.ReportExternalStatusChecks": Record<string, never>;
    "PermissionIdentifier.RestoreIssues": Record<string, never>;
    "PermissionIdentifier.SendDirectMessages": Record<string, never>;
    "PermissionIdentifier.SetUpTwoFactorAuthenticationForYourselfAndCreateApplicationPasswords": Record<string, never>;
    "PermissionIdentifier.StartAutomationJobs": Record<string, never>;
    "PermissionIdentifier.StartNewConversations": Record<string, never>;
    "PermissionIdentifier.StopAutomationJobs": Record<string, never>;
    "PermissionIdentifier.SubmitAnswerToBonusQuestionnaires": Record<string, never>;
    "PermissionIdentifier.TrackApplicationState": Record<string, never>;
    "PermissionIdentifier.UnpublishArticles": Record<string, never>;
    "PermissionIdentifier.UpdateAbsences": Record<string, never>;
    "PermissionIdentifier.UpdateApplications": Record<string, never>;
    "PermissionIdentifier.UpdateChannelInfo": Record<string, never>;
    "PermissionIdentifier.UpdateChannelSubscriptions": Record<string, never>;
    "PermissionIdentifier.UpdateEmployeesSalary": Record<string, never>;
    "PermissionIdentifier.UpdateIssues": Record<string, never>;
    "PermissionIdentifier.UpdateLanguages": Record<string, never>;
    "PermissionIdentifier.UpdateLocations": Record<string, never>;
    "PermissionIdentifier.UpdateMeetingRsvpStatus": Record<string, never>;
    "PermissionIdentifier.UpdateMeetings": Record<string, never>;
    "PermissionIdentifier.UpdateMemberBusinessEntities": Record<string, never>;
    "PermissionIdentifier.UpdateMemberProfiles": Record<string, never>;
    "PermissionIdentifier.UpdateMemberProfilesAndEditLocations": Record<string, never>;
    "PermissionIdentifier.UpdateNotificationSettings": Record<string, never>;
    "PermissionIdentifier.UpdateOrganizationDetails": Record<string, never>;
    "PermissionIdentifier.UpdateOverdrafts": Record<string, never>;
    "PermissionIdentifier.UpdatePersonalTables": Record<string, never>;
    "PermissionIdentifier.UpdatePositions": Record<string, never>;
    "PermissionIdentifier.UpdateProjectSecrets": Record<string, never>;
    "PermissionIdentifier.UpdateProjectTables": Record<string, never>;
    "PermissionIdentifier.UpdateReactions": Record<string, never>;
    "PermissionIdentifier.UpdateResponsibilities": Record<string, never>;
    "PermissionIdentifier.UpdateTeams": Record<string, never>;
    "PermissionIdentifier.UpdateToDos": Record<string, never>;
    "PermissionIdentifier.UpdateWorkingHours": Record<string, never>;
    "PermissionIdentifier.UseCalls": Record<string, never>;
    "PermissionIdentifier.ViewAbsenceApprovals": Record<string, never>;
    "PermissionIdentifier.ViewAbsenceReasons": Record<string, never>;
    "PermissionIdentifier.ViewAbsenceTypes": Record<string, never>;
    "PermissionIdentifier.ViewAbsences": Record<string, never>;
    "PermissionIdentifier.ViewAllExternalUsers": Record<string, never>;
    "PermissionIdentifier.ViewAndRemoveApplicationConsents": Record<string, never>;
    "PermissionIdentifier.ViewAnswersToBonusQuestionnaires": Record<string, never>;
    "PermissionIdentifier.ViewApplicationLogs": Record<string, never>;
    "PermissionIdentifier.ViewApplicationSecrets": Record<string, never>;
    "PermissionIdentifier.ViewApplications": Record<string, never>;
    "PermissionIdentifier.ViewArticleComments": Record<string, never>;
    "PermissionIdentifier.ViewArticles": Record<string, never>;
    "PermissionIdentifier.ViewAtelierReport": Record<string, never>;
    "PermissionIdentifier.ViewAutomationComputePools": Record<string, never>;
    "PermissionIdentifier.ViewAutomationDiagnosticData": Record<string, never>;
    "PermissionIdentifier.ViewAutomationJobs": Record<string, never>;
    "PermissionIdentifier.ViewAutomationWorkers": Record<string, never>;
    "PermissionIdentifier.ViewBoards": Record<string, never>;
    "PermissionIdentifier.ViewBonusEvents": Record<string, never>;
    "PermissionIdentifier.ViewBonusQuestionnaires": Record<string, never>;
    "PermissionIdentifier.ViewBouncedEmailAddresses": Record<string, never>;
    "PermissionIdentifier.ViewBusinessEntities": Record<string, never>;
    "PermissionIdentifier.ViewChannelInfo": Record<string, never>;
    "PermissionIdentifier.ViewChannelParticipants": Record<string, never>;
    "PermissionIdentifier.ViewCodeReviewChannelParticipants": Record<string, never>;
    "PermissionIdentifier.ViewCodeReviewComments": Record<string, never>;
    "PermissionIdentifier.ViewCodeReviews": Record<string, never>;
    "PermissionIdentifier.ViewConfidentialCustomFields": Record<string, never>;
    "PermissionIdentifier.ViewCustomEmoji": Record<string, never>;
    "PermissionIdentifier.ViewDeployments": Record<string, never>;
    "PermissionIdentifier.ViewDevEnvironmentsDebugData": Record<string, never>;
    "PermissionIdentifier.ViewDevEnvironmentsOfAllProjectMembers": Record<string, never>;
    "PermissionIdentifier.ViewDevEnvironmentsSettings": Record<string, never>;
    "PermissionIdentifier.ViewDirectMessages": Record<string, never>;
    "PermissionIdentifier.ViewDocuments": Record<string, never>;
    "PermissionIdentifier.ViewEmployeesSalary": Record<string, never>;
    "PermissionIdentifier.ViewExternalEntityLinkPatterns": Record<string, never>;
    "PermissionIdentifier.ViewFolderContent": Record<string, never>;
    "PermissionIdentifier.ViewFolderMetadata": Record<string, never>;
    "PermissionIdentifier.ViewFolderMetadataObsolete": Record<string, never>;
    "PermissionIdentifier.ViewGoogleIntegrationStatus": Record<string, never>;
    "PermissionIdentifier.ViewIssues": Record<string, never>;
    "PermissionIdentifier.ViewKeysOfProjectSecrets": Record<string, never>;
    "PermissionIdentifier.ViewLanguages": Record<string, never>;
    "PermissionIdentifier.ViewListOfBonusEvents": Record<string, never>;
    "PermissionIdentifier.ViewLocationMapPoints": Record<string, never>;
    "PermissionIdentifier.ViewLocations": Record<string, never>;
    "PermissionIdentifier.ViewMaintenanceData": Record<string, never>;
    "PermissionIdentifier.ViewMarketplaceApplications": Record<string, never>;
    "PermissionIdentifier.ViewMeetings": Record<string, never>;
    "PermissionIdentifier.ViewMemberBusinessEntities": Record<string, never>;
    "PermissionIdentifier.ViewMemberLocations": Record<string, never>;
    "PermissionIdentifier.ViewMemberProfileBasicInfo": Record<string, never>;
    "PermissionIdentifier.ViewMemberProfiles": Record<string, never>;
    "PermissionIdentifier.ViewMemberVacationPeriods": Record<string, never>;
    "PermissionIdentifier.ViewMembershipRatioReport": Record<string, never>;
    "PermissionIdentifier.ViewMemberships": Record<string, never>;
    "PermissionIdentifier.ViewMessageReactions": Record<string, never>;
    "PermissionIdentifier.ViewMessages": Record<string, never>;
    "PermissionIdentifier.ViewNotificationSettings": Record<string, never>;
    "PermissionIdentifier.ViewOrganizationDetails": Record<string, never>;
    "PermissionIdentifier.ViewOrganizationInfo": Record<string, never>;
    "PermissionIdentifier.ViewParticipantsInArticleCommentsThreads": Record<string, never>;
    "PermissionIdentifier.ViewParticipantsInIssueCommentThreads": Record<string, never>;
    "PermissionIdentifier.ViewPermissionsGrantedToOtherMembers": Record<string, never>;
    "PermissionIdentifier.ViewPersonalTables": Record<string, never>;
    "PermissionIdentifier.ViewPositions": Record<string, never>;
    "PermissionIdentifier.ViewProjectDetails": Record<string, never>;
    "PermissionIdentifier.ViewProjectParameters": Record<string, never>;
    "PermissionIdentifier.ViewReactionsToArticleComments": Record<string, never>;
    "PermissionIdentifier.ViewReactionsToCommentsInCodeReviews": Record<string, never>;
    "PermissionIdentifier.ViewReactionsToDirectMessages": Record<string, never>;
    "PermissionIdentifier.ViewReactionsToIssueComments": Record<string, never>;
    "PermissionIdentifier.ViewResponsibilities": Record<string, never>;
    "PermissionIdentifier.ViewRestrictedCustomFields": Record<string, never>;
    "PermissionIdentifier.ViewSpentTime": Record<string, never>;
    "PermissionIdentifier.ViewTables": Record<string, never>;
    "PermissionIdentifier.ViewTeams": Record<string, never>;
    "PermissionIdentifier.ViewToDos": Record<string, never>;
    "PermissionIdentifier.ViewUsageData": Record<string, never>;
    "PermissionIdentifier.ViewVaultConnections": Record<string, never>;
    "PermissionIdentifier.ViewWorkingHours": Record<string, never>;
    "PermissionIdentifier.WriteGitRepositories": Record<string, never>;
    "PermissionIdentifier.WritePackageRepositories": Record<string, never>;
    /** @deprecated */
    "PermissionIdentifier.WritePackageRepositoriesObsolete": Record<string, never>;
    "PermissionIdentifier.WriteVisionProject": Record<string, never>;
    PermissionsRecipientIdentifier: {
      className: string;
    } & (components["schemas"]["PermissionsRecipientIdentifier.Profile"] | components["schemas"]["PermissionsRecipientIdentifier.ProjectRole"] | components["schemas"]["PermissionsRecipientIdentifier.Team"]);
    "PermissionsRecipientIdentifier.Profile": {
      profileId: string;
    };
    "PermissionsRecipientIdentifier.ProjectRole": {
      projectId: string;
      roleId: string;
      name: string;
    };
    "PermissionsRecipientIdentifier.Team": {
      teamId: string;
    };
    PlanItemIdentifier: {
      className: string;
    } & components["schemas"]["PlanItemIdentifier.Id"];
    "PlanItemIdentifier.Id": {
      id: string;
    };
    PrincipalIn: {
      className: string;
    } & (components["schemas"]["PrincipalIn.Application"] | components["schemas"]["PrincipalIn.BuiltIn"] | components["schemas"]["PrincipalIn.Profile"]);
    "PrincipalIn.Application": {
      application: components["schemas"]["ApplicationIdentifier"];
    };
    "PrincipalIn.BuiltIn": {
      builtIn: string;
    };
    "PrincipalIn.Profile": {
      profile: components["schemas"]["ProfileIdentifier"];
    };
    ProfileIdentifier: {
      className: string;
    } & (components["schemas"]["ProfileIdentifier.ExternalId"] | components["schemas"]["ProfileIdentifier.Id"] | components["schemas"]["ProfileIdentifier.Me"] | components["schemas"]["ProfileIdentifier.Username"]);
    "ProfileIdentifier.ExternalId": {
      externalId: string;
    };
    "ProfileIdentifier.Id": {
      id: string;
    };
    "ProfileIdentifier.Me": Record<string, never>;
    "ProfileIdentifier.Username": {
      username: string;
    };
    ProjectIdentifier: {
      className: string;
    } & (components["schemas"]["ProjectIdentifier.Id"] | components["schemas"]["ProjectIdentifier.Key"]);
    "ProjectIdentifier.Id": {
      id: string;
    };
    "ProjectIdentifier.Key": {
      key: string;
    };
    ProjectRoleIn: {
      className: string;
    } & (components["schemas"]["ProjectAdministratorRoleIn"] | components["schemas"]["ProjectCustomRoleIn"] | components["schemas"]["ProjectExternalRoleIn"] | components["schemas"]["ProjectMemberRoleIn"]);
    ProjectAdministratorRoleIn: Record<string, never>;
    ProjectCustomRoleIn: {
      role: string;
    };
    ProjectExternalRoleIn: Record<string, never>;
    ProjectMemberRoleIn: Record<string, never>;
    ReactionItemIdentifier: {
      className: string;
    } & (components["schemas"]["ReactionItemIdentifier.ArticleReaction"] | components["schemas"]["ReactionItemIdentifier.ChatMessageReaction"]);
    "ReactionItemIdentifier.ArticleReaction": {
      article: string;
    };
    "ReactionItemIdentifier.ChatMessageReaction": {
      channel: components["schemas"]["ChannelIdentifier"];
      message: components["schemas"]["ChatMessageIdentifier"];
    };
    ReviewIdentifier: {
      className: string;
    } & (components["schemas"]["ReviewIdentifier.Id"] | components["schemas"]["ReviewIdentifier.Key"] | components["schemas"]["ReviewIdentifier.Number"]);
    "ReviewIdentifier.Id": {
      id: string;
    };
    "ReviewIdentifier.Key": {
      key: string;
    };
    "ReviewIdentifier.Number": {
      /** Format: int32 */
      number: number;
    };
    SprintIdentifier: {
      className: string;
    } & (components["schemas"]["SprintIdentifier.Current"] | components["schemas"]["SprintIdentifier.Id"]);
    "SprintIdentifier.Current": {
      board: components["schemas"]["BoardIdentifier"];
    };
    "SprintIdentifier.Id": {
      id: string;
    };
    SyncBatchInfo: {
      className: string;
    } & components["schemas"]["SyncBatchInfo.SinceEtag"];
    "SyncBatchInfo.SinceEtag": {
      etag: string;
      /** Format: int32 */
      batchSize: number;
    };
    TargetIdentifier: {
      className: string;
    } & (components["schemas"]["TargetIdentifier.Id"] | components["schemas"]["TargetIdentifier.Key"] | components["schemas"]["TargetIdentifier.Number"]);
    "TargetIdentifier.Id": {
      id: string;
    };
    "TargetIdentifier.Key": {
      key: string;
    };
    "TargetIdentifier.Number": {
      /** Format: int32 */
      number: number;
    };
    TeamIdentifier: {
      className: string;
    } & (components["schemas"]["TeamIdentifier.ExternalId"] | components["schemas"]["TeamIdentifier.Id"] | components["schemas"]["TeamIdentifier.Name"]);
    "TeamIdentifier.ExternalId": {
      externalId: string;
    };
    "TeamIdentifier.Id": {
      id: string;
    };
    "TeamIdentifier.Name": {
      name: string;
    };
    TeamMembershipIdentifier: {
      className: string;
    } & components["schemas"]["TeamMembershipIdentifier.Id"];
    "TeamMembershipIdentifier.Id": {
      id: string;
    };
    TimeTrackingSubjectIdentifier: {
      className: string;
    } & components["schemas"]["TimeTrackingSubjectIdentifier.Issue"];
    "TimeTrackingSubjectIdentifier.Issue": {
      issue: components["schemas"]["IssueIdentifier"];
    };
    WidgetSettingsIdentifier: {
      className: string;
    } & (components["schemas"]["WidgetSettingsIdentifier.Id"] | components["schemas"]["WidgetSettingsIdentifier.Plain"]);
    "WidgetSettingsIdentifier.Id": {
      id: string;
    };
    "WidgetSettingsIdentifier.Plain": {
      profile: components["schemas"]["ProfileIdentifier"];
      dashboard: components["schemas"]["DashboardIdentifier"];
      widget: string;
    };
    WorkerScopeFilter: {
      className: string;
    } & (components["schemas"]["WorkerScopeFilter.OrganizationOnly"] | components["schemas"]["WorkerScopeFilter.Project"]);
    "WorkerScopeFilter.OrganizationOnly": Record<string, never>;
    "WorkerScopeFilter.Project": {
      project: components["schemas"]["ProjectIdentifier"];
    };
    WorkerSortOrder: {
      className: string;
    } & (components["schemas"]["WorkerSortOrder.AccessTime"] | components["schemas"]["WorkerSortOrder.Name"]);
    "WorkerSortOrder.AccessTime": {
      time: components["schemas"]["SortOrderType"];
    };
    "WorkerSortOrder.Name": {
      name: components["schemas"]["SortOrderType"];
    };
    WorkspaceIdentifier: {
      className: string;
    } & (components["schemas"]["WorkspaceIdentifier.ByProject"] | components["schemas"]["WorkspaceIdentifier.ExternalId"] | components["schemas"]["WorkspaceIdentifier.Id"]);
    "WorkspaceIdentifier.ByProject": {
      project: components["schemas"]["ProjectIdentifier"];
      /** Format: int32 */
      number: number;
    };
    "WorkspaceIdentifier.ExternalId": {
      externalId: string;
    };
    "WorkspaceIdentifier.Id": {
      id: string;
    };
  };
  responses: {
    /** @description Error */
    default: {
      content: {
        "application/json": {
          error: string;
          error_description: string;
        };
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
